   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"semtest.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvSemaphoreTest,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	prvSemaphoreTest:
  24              	.LFB1:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/semtest.c"
   1:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	
   4:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/semtest.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/semtest.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/semtest.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /*
  55:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * Creates two sets of two tasks.  The tasks within a set share a variable, access 
  56:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * to which is guarded by a semaphore.
  57:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * 
  58:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * Each task starts by attempting to obtain the semaphore.  On obtaining a 
  59:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * semaphore a task checks to ensure that the guarded variable has an expected 
  60:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * value.  It then clears the variable to zero before counting it back up to the 
  61:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * expected value in increments of 1.  After each increment the variable is checked 
  62:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * to ensure it contains the value to which it was just set. When the starting 
  63:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * value is again reached the task releases the semaphore giving the other task in 
  64:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * the set a chance to do exactly the same thing.  The starting value is high 
  65:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * enough to ensure that a tick is likely to occur during the incrementing loop.
  66:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  *
  67:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * An error is flagged if at any time during the process a shared variable is 
  68:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * found to have a value other than that expected.  Such an occurrence would 
  69:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * suggest an error in the mutual exclusion mechanism by which access to the 
  70:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * variable is restricted.
  71:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  *
  72:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * The first set of two tasks poll their semaphore.  The second set use blocking 
  73:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  * calls.
  74:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  *
  75:../FreeRTOS/Demo/Common/Minimal/semtest.c ****  */
  76:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  77:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  78:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #include <stdlib.h>
  79:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  80:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* Scheduler include files. */
  81:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #include "FreeRTOS.h"
  82:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #include "task.h"
  83:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #include "semphr.h"
  84:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  85:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* Demo app include files. */
  86:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #include "semtest.h"
  87:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  88:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* The value to which the shared variables are counted. */
  89:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #define semtstBLOCKING_EXPECTED_VALUE		( ( unsigned long ) 0xfff )
  90:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #define semtstNON_BLOCKING_EXPECTED_VALUE	( ( unsigned long ) 0xff  )
  91:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  92:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #define semtstSTACK_SIZE			configMINIMAL_STACK_SIZE
  93:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  94:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #define semtstNUM_TASKS				( 4 )
  95:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  96:../FreeRTOS/Demo/Common/Minimal/semtest.c **** #define semtstDELAY_FACTOR			( ( portTickType ) 10 )
  97:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
  98:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* The task function as described at the top of the file. */
  99:../FreeRTOS/Demo/Common/Minimal/semtest.c **** static portTASK_FUNCTION_PROTO( prvSemaphoreTest, pvParameters );
 100:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 101:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* Structure used to pass parameters to each task. */
 102:../FreeRTOS/Demo/Common/Minimal/semtest.c **** typedef struct SEMAPHORE_PARAMETERS
 103:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
 104:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	xSemaphoreHandle xSemaphore;
 105:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	volatile unsigned long *pulSharedVariable;
 106:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	portTickType xBlockTime;
 107:../FreeRTOS/Demo/Common/Minimal/semtest.c **** } xSemaphoreParameters;
 108:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 109:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* Variables used to check that all the tasks are still running without errors. */
 110:../FreeRTOS/Demo/Common/Minimal/semtest.c **** static volatile short sCheckVariables[ semtstNUM_TASKS ] = { 0 };
 111:../FreeRTOS/Demo/Common/Minimal/semtest.c **** static volatile short sNextCheckVariable = 0;
 112:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 113:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 114:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 115:../FreeRTOS/Demo/Common/Minimal/semtest.c **** void vStartSemaphoreTasks( unsigned portBASE_TYPE uxPriority )
 116:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
 117:../FreeRTOS/Demo/Common/Minimal/semtest.c **** xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
 118:../FreeRTOS/Demo/Common/Minimal/semtest.c **** const portTickType xBlockTime = ( portTickType ) 100;
 119:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 120:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	/* Create the structure used to pass parameters to the first two tasks. */
 121:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters
 122:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 123:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	if( pxFirstSemaphoreParameters != NULL )
 124:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	{
 125:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		/* Create the semaphore used by the first two tasks. */
 126:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
 127:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 128:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 129:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		{
 130:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* Create the variable which is to be shared by the first two tasks. */
 131:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsign
 132:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 133:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* Initialise the share variable to the value the tasks expect. */
 134:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 135:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 136:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* The first two tasks do not block on semaphore calls. */
 137:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->xBlockTime = ( portTickType ) 0;
 138:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 139:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
 140:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 141:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirst
 142:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		}
 143:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	}
 144:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 145:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	/* Do exactly the same to create the second set of tasks, only this time 
 146:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	provide a block time for the semaphore calls. */
 147:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameter
 148:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	if( pxSecondSemaphoreParameters != NULL )
 149:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	{
 150:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 151:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 152:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 153:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		{
 154:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsig
 155:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 156:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 157:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 158:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 159:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecon
 160:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		}
 161:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	}
 162:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 163:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	/* vQueueAddToRegistry() adds the semaphore to the registry, if one is
 164:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	in use.  The registry is provided as a means for kernel aware 
 165:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	debuggers to locate semaphores and has no purpose if a kernel aware debugger
 166:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 167:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 168:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	defined to be less than 1. */
 169:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxFirstSemaphoreParameters->xSemaphore, ( signed char * ) "C
 170:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxSecondSemaphoreParameters->xSemaphore, ( signed char * ) "
 171:../FreeRTOS/Demo/Common/Minimal/semtest.c **** }
 172:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 173:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 174:../FreeRTOS/Demo/Common/Minimal/semtest.c **** static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
 175:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
  26              		.loc 1 175 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 8, -8
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 6, -16
  38              		.cfi_offset 5, -20
  39              		.cfi_offset 4, -24
  40 0004 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 32
  43              		.loc 1 175 0
  44 0006 0546     		mov	r5, r0
 176:../FreeRTOS/Demo/Common/Minimal/semtest.c **** xSemaphoreParameters *pxParameters;
 177:../FreeRTOS/Demo/Common/Minimal/semtest.c **** volatile unsigned long *pulSharedVariable, ulExpectedValue;
 178:../FreeRTOS/Demo/Common/Minimal/semtest.c **** unsigned long ulCounter;
 179:../FreeRTOS/Demo/Common/Minimal/semtest.c **** short sError = pdFALSE, sCheckVariableToUse;
 180:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 181:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	/* See which check variable to use.  sNextCheckVariable is not semaphore 
 182:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	protected! */
 183:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	portENTER_CRITICAL();
  45              		.loc 1 183 0
  46 0008 FFF7FEFF 		bl	vPortEnterCritical
  47              	.LVL1:
 184:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		sCheckVariableToUse = sNextCheckVariable;
  48              		.loc 1 184 0
  49 000c 40F20003 		movw	r3, #:lower16:.LANCHOR0
  50 0010 C0F20003 		movt	r3, #:upper16:.LANCHOR0
  51 0014 1F88     		ldrh	r7, [r3, #0]
 185:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		sNextCheckVariable++;
  52              		.loc 1 185 0
  53 0016 1888     		ldrh	r0, [r3, #0]
  54              	.LVL2:
  55 0018 421C     		adds	r2, r0, #1
  56 001a 1A80     		strh	r2, [r3, #0]	@ movhi
 186:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	portEXIT_CRITICAL();
  57              		.loc 1 186 0
  58 001c FFF7FEFF 		bl	vPortExitCritical
  59              	.LVL3:
 187:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 188:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	/* A structure is passed in as the parameter.  This contains the shared 
 189:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	variable being guarded. */
 190:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 191:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pulSharedVariable = pxParameters->pulSharedVariable;
 192:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 193:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	/* If we are blocking we use a much higher count to ensure loads of context
 194:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	switches occur during the count. */
 195:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	if( pxParameters->xBlockTime > ( portTickType ) 0 )
  60              		.loc 1 195 0
  61 0020 AA68     		ldr	r2, [r5, #8]
 191:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pulSharedVariable = pxParameters->pulSharedVariable;
  62              		.loc 1 191 0
  63 0022 6C68     		ldr	r4, [r5, #4]
  64              	.LVL4:
  65              		.loc 1 195 0
  66 0024 002A     		cmp	r2, #0
  67 0026 45D0     		beq	.L2
 196:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	{
 197:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
  68              		.loc 1 197 0
  69 0028 40F6FF71 		movw	r1, #4095
  70 002c 0191     		str	r1, [sp, #4]
  71              	.LVL5:
  72              	.L3:
  73 002e 40F20008 		movw	r8, #:lower16:.LANCHOR1
 175:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
  74              		.loc 1 175 0
  75 0032 0026     		movs	r6, #0
  76 0034 3FB2     		sxth	r7, r7
  77              	.LVL6:
  78 0036 C0F20008 		movt	r8, #:upper16:.LANCHOR1
  79              	.LVL7:
  80              	.L18:
 198:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	}
 199:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	else
 200:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	{
 201:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 202:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	}
 203:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 204:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	for( ;; )
 205:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	{
 206:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		/* Try to obtain the semaphore. */
 207:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
  81              		.loc 1 207 0
  82 003a 0021     		movs	r1, #0
  83 003c 2868     		ldr	r0, [r5, #0]
  84 003e 0B46     		mov	r3, r1
  85 0040 FFF7FEFF 		bl	xQueueGenericReceive
  86 0044 0128     		cmp	r0, #1
  87 0046 0CD0     		beq	.L20
  88              	.LVL8:
  89              	.L5:
 208:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		{
 209:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* We have the semaphore and so expect any other tasks using the
 210:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			shared variable to have left it in the state we expect to find
 211:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			it. */
 212:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
 213:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			{
 214:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 215:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			}
 216:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			
 217:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* Clear the variable, then count it back up to the expected value
 218:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			before releasing the semaphore.  Would expect a context switch or
 219:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			two during this time. */
 220:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 221:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			{
 222:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				*pulSharedVariable = ulCounter;
 223:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 224:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				{
 225:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 					sError = pdTRUE;
 226:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				}
 227:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			}
 228:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 229:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* Release the semaphore, and if no errors have occurred increment the check
 230:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			variable. */
 231:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 232:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			{
 233:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 234:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			}
 235:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 236:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if( sError == pdFALSE )
 237:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			{
 238:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				if( sCheckVariableToUse < semtstNUM_TASKS )
 239:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				{
 240:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 					( sCheckVariables[ sCheckVariableToUse ] )++;
 241:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				}
 242:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			}
 243:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 244:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			/* If we have a block time then we are running at a priority higher
 245:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			than the idle priority.  This task takes a long time to complete
 246:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			a cycle	(deliberately so to test the guarding) so will be starving
 247:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			out lower priority tasks.  Block for some time to allow give lower
 248:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			priority tasks some processor time. */
 249:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 250:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		}
 251:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		else
 252:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		{
 253:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if( pxParameters->xBlockTime == ( portTickType ) 0 )
  90              		.loc 1 253 0
  91 0048 AA68     		ldr	r2, [r5, #8]
  92 004a 002A     		cmp	r2, #0
  93 004c F5D1     		bne	.L18
 254:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			{
 255:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				/* We have not got the semaphore yet, so no point using the
 256:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				processor.  We are not blocking when attempting to obtain the
 257:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				semaphore. */
 258:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				taskYIELD();
  94              		.loc 1 258 0
  95 004e FFF7FEFF 		bl	vPortYieldFromISR
 207:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
  96              		.loc 1 207 0
  97 0052 0021     		movs	r1, #0
  98              		.loc 1 258 0
  99 0054 AA68     		ldr	r2, [r5, #8]
 100              	.LVL9:
 207:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 101              		.loc 1 207 0
 102 0056 2868     		ldr	r0, [r5, #0]
 103 0058 0B46     		mov	r3, r1
 104 005a FFF7FEFF 		bl	xQueueGenericReceive
 105 005e 0128     		cmp	r0, #1
 106 0060 F2D1     		bne	.L5
 107              	.LVL10:
 108              	.L20:
 212:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
 109              		.loc 1 212 0
 110 0062 2268     		ldr	r2, [r4, #0]
 111 0064 019B     		ldr	r3, [sp, #4]
 220:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 112              		.loc 1 220 0
 113 0066 0199     		ldr	r1, [sp, #4]
 212:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
 114              		.loc 1 212 0
 115 0068 9A42     		cmp	r2, r3
 116 006a 18BF     		it	ne
 117 006c 0126     		movne	r6, #1
 118              	.LVL11:
 220:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 119              		.loc 1 220 0
 120 006e 0023     		movs	r3, #0
 121              	.LVL12:
 122              	.L8:
 222:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				*pulSharedVariable = ulCounter;
 123              		.loc 1 222 0
 124 0070 2360     		str	r3, [r4, #0]
 223:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 125              		.loc 1 223 0
 126 0072 2168     		ldr	r1, [r4, #0]
 220:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 127              		.loc 1 220 0
 128 0074 0198     		ldr	r0, [sp, #4]
 225:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 					sError = pdTRUE;
 129              		.loc 1 225 0
 130 0076 9942     		cmp	r1, r3
 131 0078 18BF     		it	ne
 132 007a 0126     		movne	r6, #1
 133              	.LVL13:
 220:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 134              		.loc 1 220 0
 135 007c 0133     		adds	r3, r3, #1
 136              	.LVL14:
 137 007e 9842     		cmp	r0, r3
 138 0080 F6D2     		bcs	.L8
 231:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 139              		.loc 1 231 0
 140 0082 0021     		movs	r1, #0
 141 0084 2868     		ldr	r0, [r5, #0]
 142 0086 0A46     		mov	r2, r1
 143 0088 0B46     		mov	r3, r1
 144              	.LVL15:
 145 008a FFF7FEFF 		bl	xQueueGenericSend
 146 008e 78B1     		cbz	r0, .L13
 236:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			if( sError == pdFALSE )
 147              		.loc 1 236 0
 148 0090 36B9     		cbnz	r6, .L9
 238:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				if( sCheckVariableToUse < semtstNUM_TASKS )
 149              		.loc 1 238 0
 150 0092 032F     		cmp	r7, #3
 151 0094 04DC     		bgt	.L9
 240:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 					( sCheckVariables[ sCheckVariableToUse ] )++;
 152              		.loc 1 240 0
 153 0096 38F81730 		ldrh	r3, [r8, r7, lsl #1]
 154 009a 5A1C     		adds	r2, r3, #1
 155 009c 28F81720 		strh	r2, [r8, r7, lsl #1]	@ movhi
 156              	.LVL16:
 157              	.L9:
 249:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 158              		.loc 1 249 0
 159 00a0 A968     		ldr	r1, [r5, #8]
 160 00a2 01EB8100 		add	r0, r1, r1, lsl #2
 161 00a6 4000     		lsls	r0, r0, #1
 162 00a8 FFF7FEFF 		bl	vTaskDelay
 163 00ac AA68     		ldr	r2, [r5, #8]
 164 00ae C4E7     		b	.L18
 165              	.LVL17:
 166              	.L13:
 233:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 167              		.loc 1 233 0
 168 00b0 0126     		movs	r6, #1
 169              	.LVL18:
 170 00b2 F5E7     		b	.L9
 171              	.LVL19:
 172              	.L2:
 201:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 173              		.loc 1 201 0
 174 00b4 FF26     		movs	r6, #255
 175 00b6 0196     		str	r6, [sp, #4]
 176              	.LVL20:
 177 00b8 B9E7     		b	.L3
 178              		.cfi_endproc
 179              	.LFE1:
 181 00ba 00BF     		.section	.text.vStartSemaphoreTasks,"ax",%progbits
 182              		.align	2
 183              		.global	vStartSemaphoreTasks
 184              		.thumb
 185              		.thumb_func
 187              	vStartSemaphoreTasks:
 188              	.LFB0:
 116:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
 189              		.loc 1 116 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              	.LVL21:
 194 0000 70B5     		push	{r4, r5, r6, lr}
 195              	.LCFI2:
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 14, -4
 198              		.cfi_offset 6, -8
 199              		.cfi_offset 5, -12
 200              		.cfi_offset 4, -16
 201 0002 0646     		mov	r6, r0
 202 0004 84B0     		sub	sp, sp, #16
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 32
 121:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters
 205              		.loc 1 121 0
 206 0006 0C20     		movs	r0, #12
 207              	.LVL22:
 208 0008 FFF7FEFF 		bl	pvPortMalloc
 209              	.LVL23:
 123:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	if( pxFirstSemaphoreParameters != NULL )
 210              		.loc 1 123 0
 211 000c 0446     		mov	r4, r0
 212 000e 0028     		cmp	r0, #0
 213 0010 37D0     		beq	.L22
 126:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
 214              		.loc 1 126 0
 215 0012 0120     		movs	r0, #1
 216              	.LVL24:
 217 0014 0021     		movs	r1, #0
 218 0016 0322     		movs	r2, #3
 219 0018 FFF7FEFF 		bl	xQueueGenericCreate
 220 001c 2060     		str	r0, [r4, #0]
 221 001e 0028     		cmp	r0, #0
 222 0020 2FD0     		beq	.L22
 126:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
 223              		.loc 1 126 0 is_stmt 0 discriminator 1
 224 0022 0021     		movs	r1, #0
 225 0024 0B46     		mov	r3, r1
 226 0026 0A46     		mov	r2, r1
 227 0028 FFF7FEFF 		bl	xQueueGenericSend
 128:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 228              		.loc 1 128 0 is_stmt 1 discriminator 1
 229 002c 2368     		ldr	r3, [r4, #0]
 230 002e 43B3     		cbz	r3, .L22
 131:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsign
 231              		.loc 1 131 0
 232 0030 0420     		movs	r0, #4
 233 0032 FFF7FEFF 		bl	pvPortMalloc
 137:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->xBlockTime = ( portTickType ) 0;
 234              		.loc 1 137 0
 235 0036 0025     		movs	r5, #0
 131:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsign
 236              		.loc 1 131 0
 237 0038 0346     		mov	r3, r0
 134:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 238              		.loc 1 134 0
 239 003a FF22     		movs	r2, #255
 140:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 240              		.loc 1 140 0
 241 003c 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 242 0040 40F20001 		movw	r1, #:lower16:.LC0
 131:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsign
 243              		.loc 1 131 0
 244 0044 6360     		str	r3, [r4, #4]
 140:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 245              		.loc 1 140 0
 246 0046 C0F20001 		movt	r1, #:upper16:.LC0
 134:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 247              		.loc 1 134 0
 248 004a 1A60     		str	r2, [r3, #0]
 140:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 249              		.loc 1 140 0
 250 004c C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 137:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->xBlockTime = ( portTickType ) 0;
 251              		.loc 1 137 0
 252 0050 A560     		str	r5, [r4, #8]
 140:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 253              		.loc 1 140 0
 254 0052 7822     		movs	r2, #120
 255 0054 2346     		mov	r3, r4
 256 0056 0095     		str	r5, [sp, #0]
 257 0058 0195     		str	r5, [sp, #4]
 258 005a 0295     		str	r5, [sp, #8]
 259 005c 0395     		str	r5, [sp, #12]
 260 005e FFF7FEFF 		bl	xTaskGenericCreate
 141:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirst
 261              		.loc 1 141 0
 262 0062 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 263 0066 40F20001 		movw	r1, #:lower16:.LC1
 264 006a C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 265 006e C0F20001 		movt	r1, #:upper16:.LC1
 266 0072 7822     		movs	r2, #120
 267 0074 2346     		mov	r3, r4
 268 0076 0095     		str	r5, [sp, #0]
 269 0078 0195     		str	r5, [sp, #4]
 270 007a 0295     		str	r5, [sp, #8]
 271 007c 0395     		str	r5, [sp, #12]
 272 007e FFF7FEFF 		bl	xTaskGenericCreate
 273              	.L22:
 147:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameter
 274              		.loc 1 147 0
 275 0082 0C20     		movs	r0, #12
 276 0084 FFF7FEFF 		bl	pvPortMalloc
 277              	.LVL25:
 148:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	if( pxSecondSemaphoreParameters != NULL )
 278              		.loc 1 148 0
 279 0088 0446     		mov	r4, r0
 280              	.LVL26:
 281 008a 0028     		cmp	r0, #0
 282 008c 39D0     		beq	.L21
 150:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 283              		.loc 1 150 0
 284 008e 0120     		movs	r0, #1
 285              	.LVL27:
 286 0090 0021     		movs	r1, #0
 287 0092 0322     		movs	r2, #3
 288 0094 FFF7FEFF 		bl	xQueueGenericCreate
 289 0098 2060     		str	r0, [r4, #0]
 290 009a 0028     		cmp	r0, #0
 291 009c 31D0     		beq	.L21
 150:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 292              		.loc 1 150 0 is_stmt 0 discriminator 1
 293 009e 0021     		movs	r1, #0
 294 00a0 0A46     		mov	r2, r1
 295 00a2 0B46     		mov	r3, r1
 296 00a4 FFF7FEFF 		bl	xQueueGenericSend
 152:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 297              		.loc 1 152 0 is_stmt 1 discriminator 1
 298 00a8 2068     		ldr	r0, [r4, #0]
 299 00aa 50B3     		cbz	r0, .L21
 154:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsig
 300              		.loc 1 154 0
 301 00ac 0420     		movs	r0, #4
 302 00ae FFF7FEFF 		bl	pvPortMalloc
 155:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 303              		.loc 1 155 0
 304 00b2 40F6FF72 		movw	r2, #4095
 154:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsig
 305              		.loc 1 154 0
 306 00b6 0346     		mov	r3, r0
 307 00b8 6360     		str	r3, [r4, #4]
 158:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 308              		.loc 1 158 0
 309 00ba 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 155:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 310              		.loc 1 155 0
 311 00be 1A60     		str	r2, [r3, #0]
 158:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 312              		.loc 1 158 0
 313 00c0 40F20001 		movw	r1, #:lower16:.LC2
 156:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 314              		.loc 1 156 0
 315 00c4 6422     		movs	r2, #100
 158:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 316              		.loc 1 158 0
 317 00c6 0025     		movs	r5, #0
 156:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 318              		.loc 1 156 0
 319 00c8 A260     		str	r2, [r4, #8]
 158:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 320              		.loc 1 158 0
 321 00ca C0F20001 		movt	r1, #:upper16:.LC2
 322 00ce 7822     		movs	r2, #120
 323 00d0 2346     		mov	r3, r4
 324 00d2 C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 325 00d6 0096     		str	r6, [sp, #0]
 326 00d8 0195     		str	r5, [sp, #4]
 327 00da 0295     		str	r5, [sp, #8]
 328 00dc 0395     		str	r5, [sp, #12]
 329 00de FFF7FEFF 		bl	xTaskGenericCreate
 159:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecon
 330              		.loc 1 159 0
 331 00e2 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 332 00e6 40F20001 		movw	r1, #:lower16:.LC3
 333 00ea C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 334 00ee C0F20001 		movt	r1, #:upper16:.LC3
 335 00f2 7822     		movs	r2, #120
 336 00f4 2346     		mov	r3, r4
 337 00f6 0096     		str	r6, [sp, #0]
 338 00f8 0195     		str	r5, [sp, #4]
 339 00fa 0295     		str	r5, [sp, #8]
 340 00fc 0395     		str	r5, [sp, #12]
 341 00fe FFF7FEFF 		bl	xTaskGenericCreate
 342              	.L21:
 171:../FreeRTOS/Demo/Common/Minimal/semtest.c **** }
 343              		.loc 1 171 0
 344 0102 04B0     		add	sp, sp, #16
 345 0104 70BD     		pop	{r4, r5, r6, pc}
 346              		.cfi_endproc
 347              	.LFE0:
 349 0106 00BF     		.section	.text.xAreSemaphoreTasksStillRunning,"ax",%progbits
 350              		.align	2
 351              		.global	xAreSemaphoreTasksStillRunning
 352              		.thumb
 353              		.thumb_func
 355              	xAreSemaphoreTasksStillRunning:
 356              	.LFB2:
 259:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			}
 260:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		}
 261:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	}
 262:../FreeRTOS/Demo/Common/Minimal/semtest.c **** }
 263:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 264:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 265:../FreeRTOS/Demo/Common/Minimal/semtest.c **** /* This is called to check that all the created tasks are still running. */
 266:../FreeRTOS/Demo/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 267:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
 357              		.loc 1 267 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362              	.LVL28:
 268:../FreeRTOS/Demo/Common/Minimal/semtest.c **** static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
 269:../FreeRTOS/Demo/Common/Minimal/semtest.c **** portBASE_TYPE xTask, xReturn = pdTRUE;
 270:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 271:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 272:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	{
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 363              		.loc 1 273 0
 364 0000 40F20002 		movw	r2, #:lower16:.LANCHOR1
 365 0004 C0F20002 		movt	r2, #:upper16:.LANCHOR1
 366 0008 40F20003 		movw	r3, #:lower16:.LANCHOR2
 267:../FreeRTOS/Demo/Common/Minimal/semtest.c **** {
 367              		.loc 1 267 0
 368 000c 2DE9F007 		push	{r4, r5, r6, r7, r8, r9, sl}
 369              	.LCFI4:
 370              		.cfi_def_cfa_offset 28
 371              		.cfi_offset 10, -4
 372              		.cfi_offset 9, -8
 373              		.cfi_offset 8, -12
 374              		.cfi_offset 7, -16
 375              		.cfi_offset 6, -20
 376              		.cfi_offset 5, -24
 377              		.cfi_offset 4, -28
 378              		.loc 1 273 0
 379 0010 C0F20003 		movt	r3, #:upper16:.LANCHOR2
 380 0014 1588     		ldrh	r5, [r2, #0]
 266:../FreeRTOS/Demo/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 381              		.loc 1 266 0
 382 0016 B3F90010 		ldrsh	r1, [r3, #0]
 274:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		{
 275:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xReturn = pdFALSE;
 276:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		}
 277:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 278:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 383              		.loc 1 278 0
 384 001a 1788     		ldrh	r7, [r2, #0]
 266:../FreeRTOS/Demo/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 385              		.loc 1 266 0
 386 001c 0FFA85FC 		sxth	ip, r5
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 387              		.loc 1 273 0
 388 0020 5088     		ldrh	r0, [r2, #2]
 266:../FreeRTOS/Demo/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 389              		.loc 1 266 0
 390 0022 B1EB0C04 		subs	r4, r1, ip
 391              		.loc 1 278 0
 392 0026 5688     		ldrh	r6, [r2, #2]
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 393              		.loc 1 273 0
 394 0028 B3F902A0 		ldrsh	sl, [r3, #2]
 395 002c B2F80480 		ldrh	r8, [r2, #4]
 266:../FreeRTOS/Demo/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 396              		.loc 1 266 0
 397 0030 18BF     		it	ne
 398 0032 0124     		movne	r4, #1
 399              	.LVL29:
 400              		.loc 1 278 0
 401 0034 9588     		ldrh	r5, [r2, #4]
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 402              		.loc 1 273 0
 403 0036 B3F90490 		ldrsh	r9, [r3, #4]
 404 003a D188     		ldrh	r1, [r2, #6]
 405 003c 0FFA80FC 		sxth	ip, r0
 275:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xReturn = pdFALSE;
 406              		.loc 1 275 0
 407 0040 E245     		cmp	sl, ip
 408 0042 14BF     		ite	ne
 409 0044 A446     		movne	ip, r4
 410 0046 4FF0000C 		moveq	ip, #0
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 411              		.loc 1 273 0
 412 004a B3F90600 		ldrsh	r0, [r3, #6]
 413              		.loc 1 278 0
 414 004e D488     		ldrh	r4, [r2, #6]
 415              	.LVL30:
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 416              		.loc 1 273 0
 417 0050 0FFA88F8 		sxth	r8, r8
 275:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 			xReturn = pdFALSE;
 418              		.loc 1 275 0
 419 0054 C145     		cmp	r9, r8
 420 0056 14BF     		ite	ne
 421 0058 6246     		movne	r2, ip
 422 005a 0022     		moveq	r2, #0
 273:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 423              		.loc 1 273 0
 424 005c 09B2     		sxth	r1, r1
 425              		.loc 1 278 0
 426 005e 1F80     		strh	r7, [r3, #0]	@ movhi
 427              	.LVL31:
 428 0060 5E80     		strh	r6, [r3, #2]	@ movhi
 429              	.LVL32:
 430 0062 9D80     		strh	r5, [r3, #4]	@ movhi
 431              	.LVL33:
 432 0064 DC80     		strh	r4, [r3, #6]	@ movhi
 433              	.LVL34:
 279:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	}
 280:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 
 281:../FreeRTOS/Demo/Common/Minimal/semtest.c **** 	return xReturn;
 282:../FreeRTOS/Demo/Common/Minimal/semtest.c **** }
 434              		.loc 1 282 0
 435 0066 8842     		cmp	r0, r1
 436 0068 14BF     		ite	ne
 437 006a 1046     		movne	r0, r2
 438 006c 0020     		moveq	r0, #0
 439 006e BDE8F007 		pop	{r4, r5, r6, r7, r8, r9, sl}
 440 0072 7047     		bx	lr
 441              		.cfi_endproc
 442              	.LFE2:
 444              		.section	.bss.sCheckVariables,"aw",%nobits
 445              		.align	2
 446              		.set	.LANCHOR1,. + 0
 449              	sCheckVariables:
 450 0000 00000000 		.space	8
 450      00000000 
 451              		.section	.bss.sLastCheckVariables.4793,"aw",%nobits
 452              		.align	2
 453              		.set	.LANCHOR2,. + 0
 456              	sLastCheckVariables.4793:
 457 0000 00000000 		.space	8
 457      00000000 
 458              		.section	.rodata.str1.4,"aMS",%progbits,1
 459              		.align	2
 460              	.LC0:
 461 0000 506F6C53 		.ascii	"PolSEM1\000"
 461      454D3100 
 462              	.LC1:
 463 0008 506F6C53 		.ascii	"PolSEM2\000"
 463      454D3200 
 464              	.LC2:
 465 0010 426C6B53 		.ascii	"BlkSEM1\000"
 465      454D3100 
 466              	.LC3:
 467 0018 426C6B53 		.ascii	"BlkSEM2\000"
 467      454D3200 
 468              		.section	.bss.sNextCheckVariable,"aw",%nobits
 469              		.align	1
 470              		.set	.LANCHOR0,. + 0
 473              	sNextCheckVariable:
 474 0000 0000     		.space	2
 475              		.text
 476              	.Letext0:
 477              		.file 2 "../FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 478              		.file 3 "../FreeRTOS/Source/include/task.h"
 479              		.file 4 "../FreeRTOS/Source/include/queue.h"
 480              		.file 5 "../FreeRTOS/Source/include/semphr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 semtest.c
     /tmp/ccnSXzce.s:19     .text.prvSemaphoreTest:00000000 $t
     /tmp/ccnSXzce.s:23     .text.prvSemaphoreTest:00000000 prvSemaphoreTest
     /tmp/ccnSXzce.s:470    .bss.sNextCheckVariable:00000000 .LANCHOR0
     /tmp/ccnSXzce.s:446    .bss.sCheckVariables:00000000 .LANCHOR1
     /tmp/ccnSXzce.s:182    .text.vStartSemaphoreTasks:00000000 $t
     /tmp/ccnSXzce.s:187    .text.vStartSemaphoreTasks:00000000 vStartSemaphoreTasks
     /tmp/ccnSXzce.s:460    .rodata.str1.4:00000000 .LC0
     /tmp/ccnSXzce.s:462    .rodata.str1.4:00000008 .LC1
     /tmp/ccnSXzce.s:464    .rodata.str1.4:00000010 .LC2
     /tmp/ccnSXzce.s:466    .rodata.str1.4:00000018 .LC3
     /tmp/ccnSXzce.s:350    .text.xAreSemaphoreTasksStillRunning:00000000 $t
     /tmp/ccnSXzce.s:355    .text.xAreSemaphoreTasksStillRunning:00000000 xAreSemaphoreTasksStillRunning
     /tmp/ccnSXzce.s:453    .bss.sLastCheckVariables.4793:00000000 .LANCHOR2
     /tmp/ccnSXzce.s:445    .bss.sCheckVariables:00000000 $d
     /tmp/ccnSXzce.s:449    .bss.sCheckVariables:00000000 sCheckVariables
     /tmp/ccnSXzce.s:452    .bss.sLastCheckVariables.4793:00000000 $d
     /tmp/ccnSXzce.s:456    .bss.sLastCheckVariables.4793:00000000 sLastCheckVariables.4793
     /tmp/ccnSXzce.s:459    .rodata.str1.4:00000000 $d
     /tmp/ccnSXzce.s:469    .bss.sNextCheckVariable:00000000 $d
     /tmp/ccnSXzce.s:473    .bss.sNextCheckVariable:00000000 sNextCheckVariable
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xQueueGenericReceive
vPortYieldFromISR
xQueueGenericSend
vTaskDelay
pvPortMalloc
xQueueGenericCreate
xTaskGenericCreate
