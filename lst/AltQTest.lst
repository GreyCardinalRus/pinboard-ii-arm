   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AltQTest.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvMediumPriorityMutexTask,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	prvMediumPriorityMutexTask:
  24              	.LFB3:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/AltQTest.c"
   1:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	
   4:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  55:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* 
  56:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * This file implements the same demo and test as GenQTest.c, but uses the 
  57:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * light weight API in place of the fully featured API.
  58:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  *
  59:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * See the comments at the top of GenQTest.c for a description.
  60:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  */
  61:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  62:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  63:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #include <stdlib.h>
  64:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  65:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* Scheduler include files. */
  66:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #include "FreeRTOS.h"
  67:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #include "task.h"
  68:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #include "queue.h"
  69:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #include "semphr.h"
  70:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  71:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* Demo program include files. */
  72:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #include "AltQTest.h"
  73:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  74:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #define genqQUEUE_LENGTH		( 5 )
  75:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #define genqNO_BLOCK			( 0 )
  76:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  77:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #define genqMUTEX_LOW_PRIORITY		( tskIDLE_PRIORITY )
  78:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #define genqMUTEX_TEST_PRIORITY		( tskIDLE_PRIORITY + 1 )
  79:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #define genqMUTEX_MEDIUM_PRIORITY	( tskIDLE_PRIORITY + 2 )
  80:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** #define genqMUTEX_HIGH_PRIORITY		( tskIDLE_PRIORITY + 3 )
  81:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  82:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
  83:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  84:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*
  85:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * Tests the behaviour of the xQueueAltSendToFront() and xQueueAltSendToBack()
  86:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * macros by using both to fill a queue, then reading from the queue to
  87:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * check the resultant queue order is as expected.  Queue data is also
  88:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * peeked.
  89:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  */
  90:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters );
  91:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
  92:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*
  93:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * The following three tasks are used to demonstrate the mutex behaviour.
  94:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * Each task is given a different priority to demonstrate the priority
  95:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * inheritance mechanism.
  96:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  *
  97:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * The low priority task obtains a mutex.  After this a high priority task
  98:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * attempts to obtain the same mutex, causing its priority to be inherited
  99:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * by the low priority task.  The task with the inherited high priority then
 100:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * resumes a medium priority task to ensure it is not blocked by the medium
 101:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * priority task while it holds the inherited high priority.  Once the mutex
 102:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * is returned the task with the inherited priority returns to its original
 103:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * low priority, and is therefore immediately preempted by first the high
 104:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  * priority task and then the medium prioroity task before it can continue.
 105:../FreeRTOS/Demo/Common/Minimal/AltQTest.c ****  */
 106:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters );
 107:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters );
 108:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters );
 109:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 110:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 111:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 112:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
 113:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** detected in any of the tasks. */
 114:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static portBASE_TYPE xErrorDetected = pdFALSE;
 115:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 116:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* Counters that are incremented on each cycle of a test.  This is used to
 117:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** detect a stalled task - a test that is no longer running. */
 118:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static volatile unsigned portLONG ulLoopCounter = 0;
 119:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static volatile unsigned portLONG ulLoopCounter2 = 0;
 120:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 121:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* The variable that is guarded by the mutex in the mutex demo tasks. */
 122:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static volatile unsigned portLONG ulGuardedVariable = 0;
 123:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 124:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* Handles used in the mutext test to suspend and resume the high and medium
 125:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** priority mutex test tasks. */
 126:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static xTaskHandle xHighPriorityMutexTask, xMediumPriorityMutexTask;
 127:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 128:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 129:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 130:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** void vStartAltGenericQueueTasks( unsigned portBASE_TYPE uxPriority )
 131:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 132:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** xQueueHandle xQueue;
 133:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** xSemaphoreHandle xMutex;
 134:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 135:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* Create the queue that we are going to use for the
 136:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	prvSendFrontAndBackTest demo. */
 137:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
 138:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 139:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 140:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 141:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 142:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 143:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 144:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	defined to be less than 1. */
 145:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Alt_Gen_Test_Queue" );
 146:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 147:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* Create the demo task and pass it the queue just created.  We are
 148:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	passing the queue handle by value so it does not matter that it is
 149:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	declared on the stack here. */
 150:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * ) "FGenQ", configMINIMAL_STACK_SIZE, ( v
 151:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 152:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* Create the mutex used by the prvMutexTest task. */
 153:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xMutex = xSemaphoreCreateMutex();
 154:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 155:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* vQueueAddToRegistry() adds the mutex to the registry, if one is
 156:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	in use.  The registry is provided as a means for kernel aware 
 157:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	debuggers to locate mutex and has no purpose if a kernel aware debugger
 158:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 159:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 160:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	defined to be less than 1. */
 161:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) xMutex, ( signed portCHAR * ) "Alt_Q_Mutex" );
 162:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 163:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* Create the mutex demo tasks and pass it the mutex just created.  We are
 164:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	passing the mutex handle by value so it does not matter that it is declared
 165:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	on the stack here. */
 166:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * ) "FMuLow", configMINIMAL_STACK_SIZE, ( 
 167:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * ) "FMuMed", configMINIMAL_STACK_SIZE,
 168:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * ) "FMuHigh", configMINIMAL_STACK_SIZE, 
 169:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 170:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 171:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 172:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters )
 173:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 174:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** unsigned portLONG ulData, ulData2;
 175:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** xQueueHandle xQueue;
 176:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 177:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	#ifdef USE_STDIO
 178:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 179:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	
 180:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		const portCHAR * const pcTaskStartMsg = "Alt queue SendToFront/SendToBack/Peek test started.\r\n"
 181:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 182:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Queue a message for printing to say the task has started. */
 183:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 184:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	#endif
 185:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 186:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xQueue = ( xQueueHandle ) pvParameters;
 187:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 188:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	for( ;; )
 189:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	{
 190:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* The queue is empty, so sending an item to the back of the queue
 191:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		should have the same efect as sending it to the front of the queue.
 192:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 193:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		First send to the front and check everything is as expected. */
 194:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 195:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 196:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 197:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 198:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 199:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 200:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 201:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 202:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 203:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 204:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 205:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 206:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 207:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		from the queue. */
 208:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulLoopCounter != ulData )
 209:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 210:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 211:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 212:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 213:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Then do the same, sending the data to the back, checking everything
 214:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		is as expected. */
 215:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 216:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 217:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 218:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 219:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 220:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 221:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 222:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 223:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 224:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 225:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 226:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 227:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 228:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 229:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 230:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 231:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 232:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 233:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 234:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 235:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 236:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 237:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 238:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		from the queue. */
 239:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulLoopCounter != ulData )
 240:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 241:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 242:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 243:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 244:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#if configUSE_PREEMPTION == 0
 245:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			taskYIELD();
 246:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#endif
 247:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 248:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 249:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 250:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
 251:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 252:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 253:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xQueueAltSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 254:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 255:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 256:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
 257:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		thing to be read out.  Now add 1 then 0 to the front of the queue. */
 258:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 259:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 260:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 261:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 262:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 1;
 263:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 264:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 0;
 265:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 266:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 267:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Now the queue should be full, and when we read the data out we
 268:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		should receive 0, 1, 2, 3, 4. */
 269:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 270:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 271:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 272:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 273:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 274:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 275:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 276:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 277:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 278:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 279:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 280:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 281:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 282:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 283:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 284:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#if configUSE_PREEMPTION == 0
 285:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			taskYIELD();
 286:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#endif
 287:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 288:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Check the data we read out is in the expected order. */
 289:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 290:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 291:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			/* Try peeking the data first. */
 292:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltPeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 293:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 294:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 295:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 296:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 297:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 298:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 299:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 300:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 301:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			
 302:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 303:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			/* Now try receiving the data for real.  The value should be the
 304:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			same.  Clobber the value first so we know we really received it. */
 305:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			ulData2 = ~ulData2;
 306:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 307:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 308:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 309:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 310:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 311:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 312:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 313:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 314:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 315:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 316:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 317:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* The queue should now be empty again. */
 318:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 319:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 320:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 321:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 322:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 323:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#if configUSE_PREEMPTION == 0
 324:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			taskYIELD();
 325:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#endif
 326:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 327:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 328:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Our queue is empty once more, add 10, 11 to the back. */
 329:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 10;
 330:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 331:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 332:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 333:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 334:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 11;
 335:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 336:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 337:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 338:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 339:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 340:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 341:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 342:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 343:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 344:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 345:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
 346:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		front. */
 347:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 348:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 349:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 350:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 351:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 352:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 353:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 354:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 355:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Now check that the queue is full, and that receiving data provides
 356:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		the expected sequence of 7, 8, 9, 10, 11. */
 357:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 358:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 359:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 360:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 361:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 362:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 363:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 364:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 365:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 366:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 367:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 368:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 369:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 370:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 371:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 372:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#if configUSE_PREEMPTION == 0
 373:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			taskYIELD();
 374:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#endif
 375:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 376:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Check the data we read out is in the expected order. */
 377:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 378:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 379:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 380:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 381:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 382:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 383:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 384:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 385:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			{
 386:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 387:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			}
 388:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 389:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 390:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 391:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 392:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 393:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 394:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 395:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulLoopCounter++;
 396:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 397:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 398:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 399:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 400:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters )
 401:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 402:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** xSemaphoreHandle xMutex = ( xSemaphoreHandle ) pvParameters;
 403:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 404:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	#ifdef USE_STDIO
 405:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 406:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	
 407:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		const portCHAR * const pcTaskStartMsg = "Fast mutex with priority inheritance test started.\r\n";
 408:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 409:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Queue a message for printing to say the task has started. */
 410:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 411:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	#endif
 412:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 413:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	( void ) pvParameters;
 414:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 415:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 416:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	for( ;; )
 417:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	{
 418:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Take the mutex.  It should be available now. */
 419:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltTake( xMutex, genqNO_BLOCK ) != pdPASS )
 420:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 421:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 422:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 423:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 424:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Set our guarded variable to a known start value. */
 425:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulGuardedVariable = 0;
 426:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 427:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Our priority should be as per that assigned when the task was
 428:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		created. */
 429:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 430:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 431:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 432:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 433:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 434:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Now unsuspend the high priority task.  This will attempt to take the
 435:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		mutex, and block when it finds it cannot obtain it. */
 436:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskResume( xHighPriorityMutexTask );
 437:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 438:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* We should now have inherited the prioritoy of the high priority task,
 439:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		as by now it will have attempted to get the mutex. */
 440:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 441:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 442:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 443:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 444:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 445:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* We can attempt to set our priority to the test priority - between the
 446:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		idle priority and the medium/high test priorities, but our actual
 447:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		prioroity should remain at the high priority. */
 448:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 449:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 450:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 451:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 452:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 453:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 454:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Now unsuspend the medium priority task.  This should not run as our
 455:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		inherited priority is above that of the medium priority task. */
 456:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskResume( xMediumPriorityMutexTask );
 457:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 458:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* If the did run then it will have incremented our guarded variable. */
 459:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulGuardedVariable != 0 )
 460:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 461:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 462:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 463:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 464:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* When we give back the semaphore our priority should be disinherited
 465:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		back to the priority to which we attempted to set ourselves.  This means
 466:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		that when the high priority task next blocks, the medium priority task
 467:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		should execute and increment the guarded variable.   When we next run
 468:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		both the high and medium priority tasks will have been suspended again. */
 469:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltGive( xMutex ) != pdPASS )
 470:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 471:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 472:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 473:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 474:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Check that the guarded variable did indeed increment... */
 475:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulGuardedVariable != 1 )
 476:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 477:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 478:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 479:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 480:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* ... and that our priority has been disinherited to
 481:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		genqMUTEX_TEST_PRIORITY. */
 482:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 483:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 484:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 485:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 486:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 487:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Set our priority back to our original priority ready for the next
 488:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		loop around this test. */
 489:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 490:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 491:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* Just to show we are still running. */
 492:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulLoopCounter2++;
 493:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 494:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#if configUSE_PREEMPTION == 0
 495:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			taskYIELD();
 496:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		#endif		
 497:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 498:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 499:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 500:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 501:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters )
 502:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
  26              		.loc 1 502 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 4, -8
  36 0002 40F20004 		movw	r4, #:lower16:.LANCHOR0
  37 0006 C0F20004 		movt	r4, #:upper16:.LANCHOR0
  38              	.LVL1:
  39              	.L2:
 503:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	( void ) pvParameters;
 504:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 505:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	for( ;; )
 506:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	{
 507:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* The medium priority task starts by suspending itself.  The low
 508:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		priority task will unsuspend this task when required. */
 509:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskSuspend( NULL );
  40              		.loc 1 509 0 discriminator 1
  41 000a 0020     		movs	r0, #0
  42 000c FFF7FEFF 		bl	vTaskSuspend
 510:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 511:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* When this task unsuspends all it does is increment the guarded
 512:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		variable, this is so the low priority task knows that it has
 513:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		executed. */
 514:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulGuardedVariable++;
  43              		.loc 1 514 0 discriminator 1
  44 0010 2068     		ldr	r0, [r4, #0]
  45 0012 431C     		adds	r3, r0, #1
  46 0014 2360     		str	r3, [r4, #0]
  47 0016 F8E7     		b	.L2
  48              		.cfi_endproc
  49              	.LFE3:
  51              		.section	.text.prvHighPriorityMutexTask,"ax",%progbits
  52              		.align	2
  53              		.thumb
  54              		.thumb_func
  56              	prvHighPriorityMutexTask:
  57              	.LFB4:
 515:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 516:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 517:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 518:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 519:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters )
 520:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
  58              		.loc 1 520 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              	.LVL2:
  63 0000 70B5     		push	{r4, r5, r6, lr}
  64              	.LCFI1:
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 14, -4
  67              		.cfi_offset 6, -8
  68              		.cfi_offset 5, -12
  69              		.cfi_offset 4, -16
  70 0002 40F20005 		movw	r5, #:lower16:.LANCHOR1
  71              		.loc 1 520 0
  72 0006 0446     		mov	r4, r0
  73              	.LVL3:
  74 0008 C0F20005 		movt	r5, #:upper16:.LANCHOR1
 521:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** xSemaphoreHandle xMutex = ( xSemaphoreHandle ) pvParameters;
 522:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 523:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	( void ) pvParameters;
 524:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 525:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	for( ;; )
 526:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	{
 527:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* The high priority task starts by suspending itself.  The low
 528:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		priority task will unsuspend this task when required. */
 529:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskSuspend( NULL );
 530:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 531:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* When this task unsuspends all it does is attempt to obtain
 532:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		the mutex.  It should find the mutex is not available so a
 533:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		block time is specified. */
 534:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltTake( xMutex, portMAX_DELAY ) != pdPASS )
 535:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 536:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
  75              		.loc 1 536 0
  76 000c 0126     		movs	r6, #1
  77              	.LVL4:
  78              	.L10:
 529:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskSuspend( NULL );
  79              		.loc 1 529 0
  80 000e 0020     		movs	r0, #0
  81 0010 FFF7FEFF 		bl	vTaskSuspend
 534:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltTake( xMutex, portMAX_DELAY ) != pdPASS )
  82              		.loc 1 534 0
  83 0014 0021     		movs	r1, #0
  84 0016 0B46     		mov	r3, r1
  85 0018 4FF0FF32 		mov	r2, #-1
  86 001c 2046     		mov	r0, r4
  87 001e FFF7FEFF 		bl	xQueueAltGenericReceive
 537:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}
 538:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 539:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		/* When we eventually obtain the mutex we just give it back then
 540:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		return to suspend ready for the next test. */
 541:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltGive( xMutex ) != pdPASS )
  88              		.loc 1 541 0
  89 0022 0021     		movs	r1, #0
  90 0024 0A46     		mov	r2, r1
 534:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltTake( xMutex, portMAX_DELAY ) != pdPASS )
  91              		.loc 1 534 0
  92 0026 0128     		cmp	r0, #1
  93              		.loc 1 541 0
  94 0028 0B46     		mov	r3, r1
  95 002a 2046     		mov	r0, r4
 536:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
  96              		.loc 1 536 0
  97 002c 18BF     		it	ne
  98 002e 2E60     		strne	r6, [r5, #0]
  99              		.loc 1 541 0
 100 0030 FFF7FEFF 		bl	xQueueAltGenericSend
 101 0034 0128     		cmp	r0, #1
 542:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		{
 543:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 102              		.loc 1 543 0
 103 0036 18BF     		it	ne
 104 0038 2E60     		strne	r6, [r5, #0]
 105 003a E8E7     		b	.L10
 106              		.cfi_endproc
 107              	.LFE4:
 109              		.section	.text.prvLowPriorityMutexTask,"ax",%progbits
 110              		.align	2
 111              		.thumb
 112              		.thumb_func
 114              	prvLowPriorityMutexTask:
 115              	.LFB2:
 401:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 116              		.loc 1 401 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL5:
 121 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 40
 124              		.cfi_offset 14, -4
 125              		.cfi_offset 11, -8
 126              		.cfi_offset 10, -12
 127              		.cfi_offset 9, -16
 128              		.cfi_offset 8, -20
 129              		.cfi_offset 7, -24
 130              		.cfi_offset 6, -28
 131              		.cfi_offset 5, -32
 132              		.cfi_offset 4, -36
 133              		.cfi_offset 3, -40
 134 0004 40F20004 		movw	r4, #:lower16:.LANCHOR1
 135 0008 40F20006 		movw	r6, #:lower16:.LANCHOR0
 136 000c 40F20009 		movw	r9, #:lower16:.LANCHOR2
 137 0010 40F2000A 		movw	sl, #:lower16:.LANCHOR3
 138 0014 40F20007 		movw	r7, #:lower16:.LANCHOR4
 401:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 139              		.loc 1 401 0
 140 0018 8046     		mov	r8, r0
 141              	.LVL6:
 142 001a C0F20004 		movt	r4, #:upper16:.LANCHOR1
 143 001e C0F20006 		movt	r6, #:upper16:.LANCHOR0
 144 0022 C0F20009 		movt	r9, #:upper16:.LANCHOR2
 145 0026 C0F2000A 		movt	sl, #:upper16:.LANCHOR3
 146 002a C0F20007 		movt	r7, #:upper16:.LANCHOR4
 419:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltTake( xMutex, genqNO_BLOCK ) != pdPASS )
 147              		.loc 1 419 0
 148 002e 4FF0000B 		mov	fp, #0
 421:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 149              		.loc 1 421 0
 150 0032 0125     		movs	r5, #1
 151              	.LVL7:
 152              	.L20:
 419:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltTake( xMutex, genqNO_BLOCK ) != pdPASS )
 153              		.loc 1 419 0
 154 0034 0021     		movs	r1, #0
 155 0036 4046     		mov	r0, r8
 156 0038 0A46     		mov	r2, r1
 157 003a 0B46     		mov	r3, r1
 158 003c FFF7FEFF 		bl	xQueueAltGenericReceive
 159 0040 0128     		cmp	r0, #1
 421:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 160              		.loc 1 421 0
 161 0042 18BF     		it	ne
 162 0044 2560     		strne	r5, [r4, #0]
 429:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 163              		.loc 1 429 0
 164 0046 0020     		movs	r0, #0
 425:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulGuardedVariable = 0;
 165              		.loc 1 425 0
 166 0048 C6F800B0 		str	fp, [r6, #0]
 429:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 167              		.loc 1 429 0
 168 004c FFF7FEFF 		bl	uxTaskPriorityGet
 169 0050 00B1     		cbz	r0, .L13
 431:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 170              		.loc 1 431 0
 171 0052 2560     		str	r5, [r4, #0]
 172              	.L13:
 436:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskResume( xHighPriorityMutexTask );
 173              		.loc 1 436 0
 174 0054 D9F80000 		ldr	r0, [r9, #0]
 175 0058 FFF7FEFF 		bl	vTaskResume
 440:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 176              		.loc 1 440 0
 177 005c 0020     		movs	r0, #0
 178 005e FFF7FEFF 		bl	uxTaskPriorityGet
 179 0062 0328     		cmp	r0, #3
 442:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 180              		.loc 1 442 0
 181 0064 18BF     		it	ne
 182 0066 2560     		strne	r5, [r4, #0]
 448:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 183              		.loc 1 448 0
 184 0068 0121     		movs	r1, #1
 185 006a 0020     		movs	r0, #0
 186 006c FFF7FEFF 		bl	vTaskPrioritySet
 449:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 187              		.loc 1 449 0
 188 0070 0020     		movs	r0, #0
 189 0072 FFF7FEFF 		bl	uxTaskPriorityGet
 190 0076 0328     		cmp	r0, #3
 456:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskResume( xMediumPriorityMutexTask );
 191              		.loc 1 456 0
 192 0078 DAF80000 		ldr	r0, [sl, #0]
 451:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 193              		.loc 1 451 0
 194 007c 18BF     		it	ne
 195 007e 2560     		strne	r5, [r4, #0]
 456:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskResume( xMediumPriorityMutexTask );
 196              		.loc 1 456 0
 197 0080 FFF7FEFF 		bl	vTaskResume
 459:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulGuardedVariable != 0 )
 198              		.loc 1 459 0
 199 0084 3368     		ldr	r3, [r6, #0]
 200 0086 03B1     		cbz	r3, .L16
 461:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 201              		.loc 1 461 0
 202 0088 2560     		str	r5, [r4, #0]
 203              	.L16:
 469:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltGive( xMutex ) != pdPASS )
 204              		.loc 1 469 0
 205 008a 0021     		movs	r1, #0
 206 008c 0A46     		mov	r2, r1
 207 008e 0B46     		mov	r3, r1
 208 0090 4046     		mov	r0, r8
 209 0092 FFF7FEFF 		bl	xQueueAltGenericSend
 475:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulGuardedVariable != 1 )
 210              		.loc 1 475 0
 211 0096 3268     		ldr	r2, [r6, #0]
 469:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xSemaphoreAltGive( xMutex ) != pdPASS )
 212              		.loc 1 469 0
 213 0098 0128     		cmp	r0, #1
 471:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 214              		.loc 1 471 0
 215 009a 18BF     		it	ne
 216 009c 2560     		strne	r5, [r4, #0]
 475:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulGuardedVariable != 1 )
 217              		.loc 1 475 0
 218 009e 012A     		cmp	r2, #1
 477:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 219              		.loc 1 477 0
 220 00a0 18BF     		it	ne
 221 00a2 2560     		strne	r5, [r4, #0]
 482:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 222              		.loc 1 482 0
 223 00a4 0020     		movs	r0, #0
 224 00a6 FFF7FEFF 		bl	uxTaskPriorityGet
 225 00aa 0128     		cmp	r0, #1
 484:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 226              		.loc 1 484 0
 227 00ac 18BF     		it	ne
 228 00ae 2560     		strne	r5, [r4, #0]
 489:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 229              		.loc 1 489 0
 230 00b0 0020     		movs	r0, #0
 231 00b2 0146     		mov	r1, r0
 232 00b4 FFF7FEFF 		bl	vTaskPrioritySet
 492:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulLoopCounter2++;
 233              		.loc 1 492 0
 234 00b8 3968     		ldr	r1, [r7, #0]
 235 00ba 481C     		adds	r0, r1, #1
 236 00bc 3860     		str	r0, [r7, #0]
 497:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 237              		.loc 1 497 0
 238 00be B9E7     		b	.L20
 239              		.cfi_endproc
 240              	.LFE2:
 242              		.section	.text.prvSendFrontAndBackTest,"ax",%progbits
 243              		.align	2
 244              		.thumb
 245              		.thumb_func
 247              	prvSendFrontAndBackTest:
 248              	.LFB1:
 173:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 249              		.loc 1 173 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 8
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL8:
 254 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 255              	.LCFI3:
 256              		.cfi_def_cfa_offset 36
 257              		.cfi_offset 14, -4
 258              		.cfi_offset 11, -8
 259              		.cfi_offset 10, -12
 260              		.cfi_offset 9, -16
 261              		.cfi_offset 8, -20
 262              		.cfi_offset 7, -24
 263              		.cfi_offset 6, -28
 264              		.cfi_offset 5, -32
 265              		.cfi_offset 4, -36
 266 0004 40F20005 		movw	r5, #:lower16:.LANCHOR1
 267 0008 40F20008 		movw	r8, #:lower16:.LANCHOR5
 268 000c 83B0     		sub	sp, sp, #12
 269              	.LCFI4:
 270              		.cfi_def_cfa_offset 48
 173:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 271              		.loc 1 173 0
 272 000e 0446     		mov	r4, r0
 273              	.LVL9:
 274 0010 C0F20005 		movt	r5, #:upper16:.LANCHOR1
 275 0014 C0F20008 		movt	r8, #:upper16:.LANCHOR5
 251:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 276              		.loc 1 251 0
 277 0018 4FF0020B 		mov	fp, #2
 329:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 10;
 278              		.loc 1 329 0
 279 001c 4FF00A09 		mov	r9, #10
 334:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 11;
 280              		.loc 1 334 0
 281 0020 4FF00B0A 		mov	sl, #11
 282              	.LVL10:
 283              	.L57:
 194:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 284              		.loc 1 194 0
 285 0024 40F20001 		movw	r1, #:lower16:.LANCHOR5
 286 0028 0022     		movs	r2, #0
 287 002a 0123     		movs	r3, #1
 288 002c C0F20001 		movt	r1, #:upper16:.LANCHOR5
 289 0030 2046     		mov	r0, r4
 290 0032 FFF7FEFF 		bl	xQueueAltGenericSend
 196:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 291              		.loc 1 196 0
 292 0036 2046     		mov	r0, r4
 293 0038 FFF7FEFF 		bl	uxQueueMessagesWaiting
 294 003c 0128     		cmp	r0, #1
 295 003e 01D0     		beq	.L22
 198:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 296              		.loc 1 198 0
 297 0040 0123     		movs	r3, #1
 298 0042 2B60     		str	r3, [r5, #0]
 299              	.L22:
 201:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 300              		.loc 1 201 0
 301 0044 0022     		movs	r2, #0
 302 0046 2046     		mov	r0, r4
 303 0048 6946     		mov	r1, sp
 304 004a 1346     		mov	r3, r2
 305 004c FFF7FEFF 		bl	xQueueAltGenericReceive
 306 0050 0128     		cmp	r0, #1
 307 0052 01D0     		beq	.L23
 203:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 308              		.loc 1 203 0
 309 0054 0120     		movs	r0, #1
 310 0056 2860     		str	r0, [r5, #0]
 311              	.L23:
 208:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulLoopCounter != ulData )
 312              		.loc 1 208 0
 313 0058 D8F80020 		ldr	r2, [r8, #0]
 314 005c 0099     		ldr	r1, [sp, #0]
 315 005e 8A42     		cmp	r2, r1
 316 0060 01D0     		beq	.L24
 210:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 317              		.loc 1 210 0
 318 0062 0126     		movs	r6, #1
 319 0064 2E60     		str	r6, [r5, #0]
 320              	.L24:
 215:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 321              		.loc 1 215 0
 322 0066 2046     		mov	r0, r4
 323 0068 FFF7FEFF 		bl	uxQueueMessagesWaiting
 324 006c 08B1     		cbz	r0, .L25
 217:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 325              		.loc 1 217 0
 326 006e 0127     		movs	r7, #1
 327 0070 2F60     		str	r7, [r5, #0]
 328              	.L25:
 220:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 329              		.loc 1 220 0
 330 0072 0022     		movs	r2, #0
 331 0074 40F20001 		movw	r1, #:lower16:.LANCHOR5
 332 0078 C0F20001 		movt	r1, #:upper16:.LANCHOR5
 333 007c 1346     		mov	r3, r2
 334 007e 2046     		mov	r0, r4
 335 0080 FFF7FEFF 		bl	xQueueAltGenericSend
 222:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 336              		.loc 1 222 0
 337 0084 2046     		mov	r0, r4
 338 0086 FFF7FEFF 		bl	uxQueueMessagesWaiting
 339 008a 0128     		cmp	r0, #1
 340 008c 01D0     		beq	.L26
 224:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 341              		.loc 1 224 0
 342 008e 0123     		movs	r3, #1
 343 0090 2B60     		str	r3, [r5, #0]
 344              	.L26:
 227:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 345              		.loc 1 227 0
 346 0092 0022     		movs	r2, #0
 347 0094 2046     		mov	r0, r4
 348 0096 6946     		mov	r1, sp
 349 0098 1346     		mov	r3, r2
 350 009a FFF7FEFF 		bl	xQueueAltGenericReceive
 351 009e 0128     		cmp	r0, #1
 352 00a0 01D0     		beq	.L27
 229:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 353              		.loc 1 229 0
 354 00a2 0120     		movs	r0, #1
 355 00a4 2860     		str	r0, [r5, #0]
 356              	.L27:
 232:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 357              		.loc 1 232 0
 358 00a6 2046     		mov	r0, r4
 359 00a8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 360 00ac 08B1     		cbz	r0, .L28
 234:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 361              		.loc 1 234 0
 362 00ae 0122     		movs	r2, #1
 363 00b0 2A60     		str	r2, [r5, #0]
 364              	.L28:
 239:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( ulLoopCounter != ulData )
 365              		.loc 1 239 0
 366 00b2 D8F80010 		ldr	r1, [r8, #0]
 367 00b6 009E     		ldr	r6, [sp, #0]
 368 00b8 B142     		cmp	r1, r6
 369 00ba 01D0     		beq	.L66
 241:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 370              		.loc 1 241 0
 371 00bc 0127     		movs	r7, #1
 372 00be 2F60     		str	r7, [r5, #0]
 373              	.L66:
 251:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 374              		.loc 1 251 0
 375 00c0 CDF800B0 		str	fp, [sp, #0]
 376              	.L61:
 253:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xQueueAltSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 377              		.loc 1 253 0 discriminator 2
 378 00c4 0022     		movs	r2, #0
 379 00c6 1346     		mov	r3, r2
 380 00c8 2046     		mov	r0, r4
 381 00ca 6946     		mov	r1, sp
 382 00cc FFF7FEFF 		bl	xQueueAltGenericSend
 251:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 383              		.loc 1 251 0 discriminator 2
 384 00d0 0098     		ldr	r0, [sp, #0]
 385 00d2 431C     		adds	r3, r0, #1
 386 00d4 042B     		cmp	r3, #4
 387 00d6 0093     		str	r3, [sp, #0]
 388 00d8 F4D9     		bls	.L61
 258:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 389              		.loc 1 258 0
 390 00da 2046     		mov	r0, r4
 391 00dc FFF7FEFF 		bl	uxQueueMessagesWaiting
 392 00e0 0328     		cmp	r0, #3
 393 00e2 01D0     		beq	.L32
 260:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 394              		.loc 1 260 0
 395 00e4 0122     		movs	r2, #1
 396 00e6 2A60     		str	r2, [r5, #0]
 397              	.L32:
 262:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 1;
 398              		.loc 1 262 0
 399 00e8 0126     		movs	r6, #1
 263:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 400              		.loc 1 263 0
 401 00ea 0022     		movs	r2, #0
 264:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 0;
 402              		.loc 1 264 0
 403 00ec 0027     		movs	r7, #0
 263:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 404              		.loc 1 263 0
 405 00ee 6946     		mov	r1, sp
 406 00f0 3346     		mov	r3, r6
 407 00f2 2046     		mov	r0, r4
 262:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 1;
 408              		.loc 1 262 0
 409 00f4 0096     		str	r6, [sp, #0]
 263:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 410              		.loc 1 263 0
 411 00f6 FFF7FEFF 		bl	xQueueAltGenericSend
 265:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 412              		.loc 1 265 0
 413 00fa 6946     		mov	r1, sp
 414 00fc 3A46     		mov	r2, r7
 415 00fe 3346     		mov	r3, r6
 416 0100 2046     		mov	r0, r4
 264:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 0;
 417              		.loc 1 264 0
 418 0102 0097     		str	r7, [sp, #0]
 265:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 419              		.loc 1 265 0
 420 0104 FFF7FEFF 		bl	xQueueAltGenericSend
 269:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 421              		.loc 1 269 0
 422 0108 2046     		mov	r0, r4
 423 010a FFF7FEFF 		bl	uxQueueMessagesWaiting
 424 010e 0528     		cmp	r0, #5
 271:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 425              		.loc 1 271 0
 426 0110 18BF     		it	ne
 427 0112 2E60     		strne	r6, [r5, #0]
 274:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 428              		.loc 1 274 0
 429 0114 2046     		mov	r0, r4
 430 0116 6946     		mov	r1, sp
 431 0118 0022     		movs	r2, #0
 432 011a 0123     		movs	r3, #1
 433 011c FFF7FEFF 		bl	xQueueAltGenericSend
 434 0120 08B1     		cbz	r0, .L34
 276:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 435              		.loc 1 276 0
 436 0122 0121     		movs	r1, #1
 437 0124 2960     		str	r1, [r5, #0]
 438              	.L34:
 279:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 439              		.loc 1 279 0
 440 0126 0022     		movs	r2, #0
 441 0128 2046     		mov	r0, r4
 442 012a 6946     		mov	r1, sp
 443 012c 1346     		mov	r3, r2
 444 012e FFF7FEFF 		bl	xQueueAltGenericSend
 445 0132 0028     		cmp	r0, #0
 446 0134 00F09B80 		beq	.L35
 281:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 447              		.loc 1 281 0
 448 0138 0120     		movs	r0, #1
 289:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 449              		.loc 1 289 0
 450 013a 0023     		movs	r3, #0
 281:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 451              		.loc 1 281 0
 452 013c 2860     		str	r0, [r5, #0]
 289:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 453              		.loc 1 289 0
 454 013e 0093     		str	r3, [sp, #0]
 455              	.L41:
 292:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltPeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 456              		.loc 1 292 0
 457 0140 0126     		movs	r6, #1
 458              	.L60:
 459 0142 0022     		movs	r2, #0
 460 0144 0123     		movs	r3, #1
 461 0146 01A9     		add	r1, sp, #4
 462 0148 2046     		mov	r0, r4
 463 014a FFF7FEFF 		bl	xQueueAltGenericReceive
 297:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 464              		.loc 1 297 0
 465 014e 019F     		ldr	r7, [sp, #4]
 466 0150 DDF800C0 		ldr	ip, [sp, #0]
 306:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 467              		.loc 1 306 0
 468 0154 0022     		movs	r2, #0
 292:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltPeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 469              		.loc 1 292 0
 470 0156 0128     		cmp	r0, #1
 305:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			ulData2 = ~ulData2;
 471              		.loc 1 305 0
 472 0158 6FEA070E 		mvn	lr, r7
 294:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 473              		.loc 1 294 0
 474 015c 18BF     		it	ne
 475 015e 2E60     		strne	r6, [r5, #0]
 306:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 476              		.loc 1 306 0
 477 0160 01A9     		add	r1, sp, #4
 297:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 478              		.loc 1 297 0
 479 0162 BC45     		cmp	ip, r7
 306:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 480              		.loc 1 306 0
 481 0164 1346     		mov	r3, r2
 482 0166 2046     		mov	r0, r4
 299:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 483              		.loc 1 299 0
 484 0168 18BF     		it	ne
 485 016a 2E60     		strne	r6, [r5, #0]
 305:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			ulData2 = ~ulData2;
 486              		.loc 1 305 0
 487 016c CDF804E0 		str	lr, [sp, #4]
 306:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 488              		.loc 1 306 0
 489 0170 FFF7FEFF 		bl	xQueueAltGenericReceive
 311:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 490              		.loc 1 311 0
 491 0174 009A     		ldr	r2, [sp, #0]
 492 0176 0199     		ldr	r1, [sp, #4]
 289:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 493              		.loc 1 289 0
 494 0178 571C     		adds	r7, r2, #1
 306:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 495              		.loc 1 306 0
 496 017a 0128     		cmp	r0, #1
 308:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 497              		.loc 1 308 0
 498 017c 18BF     		it	ne
 499 017e 2E60     		strne	r6, [r5, #0]
 311:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 500              		.loc 1 311 0
 501 0180 8A42     		cmp	r2, r1
 313:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 502              		.loc 1 313 0
 503 0182 18BF     		it	ne
 504 0184 2E60     		strne	r6, [r5, #0]
 289:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 505              		.loc 1 289 0
 506 0186 042F     		cmp	r7, #4
 507 0188 0097     		str	r7, [sp, #0]
 508 018a DAD9     		bls	.L60
 318:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 509              		.loc 1 318 0
 510 018c 2046     		mov	r0, r4
 511 018e FFF7FEFF 		bl	uxQueueMessagesWaiting
 512 0192 08B1     		cbz	r0, .L42
 320:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 513              		.loc 1 320 0
 514 0194 0126     		movs	r6, #1
 515 0196 2E60     		str	r6, [r5, #0]
 516              	.L42:
 330:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 517              		.loc 1 330 0
 518 0198 0022     		movs	r2, #0
 519 019a 2046     		mov	r0, r4
 520 019c 6946     		mov	r1, sp
 521 019e 1346     		mov	r3, r2
 329:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 10;
 522              		.loc 1 329 0
 523 01a0 CDF80090 		str	r9, [sp, #0]
 330:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 524              		.loc 1 330 0
 525 01a4 FFF7FEFF 		bl	xQueueAltGenericSend
 526 01a8 0128     		cmp	r0, #1
 527 01aa 01D0     		beq	.L43
 332:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 528              		.loc 1 332 0
 529 01ac 0123     		movs	r3, #1
 530 01ae 2B60     		str	r3, [r5, #0]
 531              	.L43:
 335:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 532              		.loc 1 335 0
 533 01b0 0022     		movs	r2, #0
 534 01b2 2046     		mov	r0, r4
 535 01b4 6946     		mov	r1, sp
 536 01b6 1346     		mov	r3, r2
 334:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulData = 11;
 537              		.loc 1 334 0
 538 01b8 CDF800A0 		str	sl, [sp, #0]
 335:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 539              		.loc 1 335 0
 540 01bc FFF7FEFF 		bl	xQueueAltGenericSend
 541 01c0 0128     		cmp	r0, #1
 542 01c2 01D0     		beq	.L44
 337:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 543              		.loc 1 337 0
 544 01c4 0120     		movs	r0, #1
 545 01c6 2860     		str	r0, [r5, #0]
 546              	.L44:
 340:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 547              		.loc 1 340 0
 548 01c8 2046     		mov	r0, r4
 549 01ca FFF7FEFF 		bl	uxQueueMessagesWaiting
 550 01ce 0228     		cmp	r0, #2
 551 01d0 01D0     		beq	.L67
 342:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 552              		.loc 1 342 0
 553 01d2 0121     		movs	r1, #1
 554 01d4 2960     		str	r1, [r5, #0]
 555              	.L67:
 347:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 556              		.loc 1 347 0
 557 01d6 0922     		movs	r2, #9
 558 01d8 0092     		str	r2, [sp, #0]
 349:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 559              		.loc 1 349 0
 560 01da 0126     		movs	r6, #1
 561              	.L59:
 562 01dc 0123     		movs	r3, #1
 563 01de 0022     		movs	r2, #0
 564 01e0 2046     		mov	r0, r4
 565 01e2 6946     		mov	r1, sp
 566 01e4 FFF7FEFF 		bl	xQueueAltGenericSend
 347:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 567              		.loc 1 347 0
 568 01e8 009B     		ldr	r3, [sp, #0]
 349:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 569              		.loc 1 349 0
 570 01ea 0128     		cmp	r0, #1
 347:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 571              		.loc 1 347 0
 572 01ec 03F1FF37 		add	r7, r3, #-1
 573              	.LVL11:
 351:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 574              		.loc 1 351 0
 575 01f0 18BF     		it	ne
 576 01f2 2E60     		strne	r6, [r5, #0]
 347:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 577              		.loc 1 347 0
 578 01f4 062F     		cmp	r7, #6
 579              	.LVL12:
 580 01f6 0097     		str	r7, [sp, #0]
 581 01f8 F0D8     		bhi	.L59
 357:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 582              		.loc 1 357 0
 583 01fa 2046     		mov	r0, r4
 584 01fc FFF7FEFF 		bl	uxQueueMessagesWaiting
 585 0200 0528     		cmp	r0, #5
 586 0202 01D0     		beq	.L49
 359:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 587              		.loc 1 359 0
 588 0204 0126     		movs	r6, #1
 589 0206 2E60     		str	r6, [r5, #0]
 590              	.L49:
 362:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 591              		.loc 1 362 0
 592 0208 2046     		mov	r0, r4
 593 020a 6946     		mov	r1, sp
 594 020c 0022     		movs	r2, #0
 595 020e 0123     		movs	r3, #1
 596 0210 FFF7FEFF 		bl	xQueueAltGenericSend
 597 0214 08B1     		cbz	r0, .L50
 364:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 598              		.loc 1 364 0
 599 0216 0120     		movs	r0, #1
 600 0218 2860     		str	r0, [r5, #0]
 601              	.L50:
 367:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( xQueueAltSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 602              		.loc 1 367 0
 603 021a 0022     		movs	r2, #0
 604 021c 2046     		mov	r0, r4
 605 021e 6946     		mov	r1, sp
 606 0220 1346     		mov	r3, r2
 607 0222 FFF7FEFF 		bl	xQueueAltGenericSend
 608 0226 08B1     		cbz	r0, .L68
 369:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 609              		.loc 1 369 0
 610 0228 0121     		movs	r1, #1
 611 022a 2960     		str	r1, [r5, #0]
 612              	.L68:
 377:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 613              		.loc 1 377 0
 614 022c 0722     		movs	r2, #7
 615 022e 0092     		str	r2, [sp, #0]
 616              	.LVL13:
 381:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 617              		.loc 1 381 0
 618 0230 0126     		movs	r6, #1
 619              	.L58:
 379:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 620              		.loc 1 379 0
 621 0232 0022     		movs	r2, #0
 622 0234 01A9     		add	r1, sp, #4
 623 0236 1346     		mov	r3, r2
 624 0238 2046     		mov	r0, r4
 625 023a FFF7FEFF 		bl	xQueueAltGenericReceive
 384:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 626              		.loc 1 384 0
 627 023e 0099     		ldr	r1, [sp, #0]
 628 0240 019B     		ldr	r3, [sp, #4]
 377:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 629              		.loc 1 377 0
 630 0242 4F1C     		adds	r7, r1, #1
 379:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( xQueueAltReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 631              		.loc 1 379 0
 632 0244 0128     		cmp	r0, #1
 381:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 633              		.loc 1 381 0
 634 0246 18BF     		it	ne
 635 0248 2E60     		strne	r6, [r5, #0]
 384:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			if( ulData != ulData2 )
 636              		.loc 1 384 0
 637 024a 9942     		cmp	r1, r3
 386:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 				xErrorDetected = pdTRUE;
 638              		.loc 1 386 0
 639 024c 18BF     		it	ne
 640 024e 2E60     		strne	r6, [r5, #0]
 377:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 641              		.loc 1 377 0
 642 0250 0B2F     		cmp	r7, #11
 643 0252 0097     		str	r7, [sp, #0]
 644 0254 EDD9     		bls	.L58
 390:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 645              		.loc 1 390 0
 646 0256 2046     		mov	r0, r4
 647 0258 FFF7FEFF 		bl	uxQueueMessagesWaiting
 648 025c 08B1     		cbz	r0, .L56
 392:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 			xErrorDetected = pdTRUE;
 649              		.loc 1 392 0
 650 025e 0126     		movs	r6, #1
 651 0260 2E60     		str	r6, [r5, #0]
 652              	.L56:
 395:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		ulLoopCounter++;
 653              		.loc 1 395 0
 654 0262 D8F80020 		ldr	r2, [r8, #0]
 655 0266 501C     		adds	r0, r2, #1
 656 0268 C8F80000 		str	r0, [r8, #0]
 396:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 657              		.loc 1 396 0
 658 026c DAE6     		b	.L57
 659              	.L35:
 289:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 660              		.loc 1 289 0
 661 026e 0090     		str	r0, [sp, #0]
 662 0270 66E7     		b	.L41
 663              		.cfi_endproc
 664              	.LFE1:
 666 0272 00BF     		.section	.text.vStartAltGenericQueueTasks,"ax",%progbits
 667              		.align	2
 668              		.global	vStartAltGenericQueueTasks
 669              		.thumb
 670              		.thumb_func
 672              	vStartAltGenericQueueTasks:
 673              	.LFB0:
 131:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 674              		.loc 1 131 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              	.LVL14:
 679 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 680              	.LCFI5:
 681              		.cfi_def_cfa_offset 20
 682              		.cfi_offset 14, -4
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 6, -12
 685              		.cfi_offset 5, -16
 686              		.cfi_offset 4, -20
 137:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
 687              		.loc 1 137 0
 688 0002 0421     		movs	r1, #4
 131:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 689              		.loc 1 131 0
 690 0004 85B0     		sub	sp, sp, #20
 691              	.LCFI6:
 692              		.cfi_def_cfa_offset 40
 131:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 693              		.loc 1 131 0
 694 0006 0746     		mov	r7, r0
 137:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
 695              		.loc 1 137 0
 696 0008 0022     		movs	r2, #0
 697 000a 0520     		movs	r0, #5
 698              	.LVL15:
 699 000c FFF7FEFF 		bl	xQueueGenericCreate
 150:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * ) "FGenQ", configMINIMAL_STACK_SIZE, ( v
 700              		.loc 1 150 0
 701 0010 40F20001 		movw	r1, #:lower16:.LC0
 137:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
 702              		.loc 1 137 0
 703 0014 0346     		mov	r3, r0
 704              	.LVL16:
 150:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * ) "FGenQ", configMINIMAL_STACK_SIZE, ( v
 705              		.loc 1 150 0
 706 0016 40F20000 		movw	r0, #:lower16:prvSendFrontAndBackTest
 707              	.LVL17:
 708 001a 0024     		movs	r4, #0
 709 001c 7822     		movs	r2, #120
 710 001e C0F20001 		movt	r1, #:upper16:.LC0
 711 0022 C0F20000 		movt	r0, #:upper16:prvSendFrontAndBackTest
 712 0026 0097     		str	r7, [sp, #0]
 713 0028 0194     		str	r4, [sp, #4]
 714 002a 0294     		str	r4, [sp, #8]
 715 002c 0394     		str	r4, [sp, #12]
 716 002e FFF7FEFF 		bl	xTaskGenericCreate
 717              	.LVL18:
 153:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xMutex = xSemaphoreCreateMutex();
 718              		.loc 1 153 0
 719 0032 0120     		movs	r0, #1
 720 0034 FFF7FEFF 		bl	xQueueCreateMutex
 166:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * ) "FMuLow", configMINIMAL_STACK_SIZE, ( 
 721              		.loc 1 166 0
 722 0038 40F20001 		movw	r1, #:lower16:.LC1
 153:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xMutex = xSemaphoreCreateMutex();
 723              		.loc 1 153 0
 724 003c 0546     		mov	r5, r0
 725              	.LVL19:
 166:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * ) "FMuLow", configMINIMAL_STACK_SIZE, ( 
 726              		.loc 1 166 0
 727 003e 40F20000 		movw	r0, #:lower16:prvLowPriorityMutexTask
 728              	.LVL20:
 729 0042 7822     		movs	r2, #120
 730 0044 2B46     		mov	r3, r5
 731 0046 C0F20001 		movt	r1, #:upper16:.LC1
 732 004a C0F20000 		movt	r0, #:upper16:prvLowPriorityMutexTask
 733 004e 0094     		str	r4, [sp, #0]
 734 0050 0194     		str	r4, [sp, #4]
 735 0052 0294     		str	r4, [sp, #8]
 736 0054 0394     		str	r4, [sp, #12]
 167:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * ) "FMuMed", configMINIMAL_STACK_SIZE,
 737              		.loc 1 167 0
 738 0056 40F20006 		movw	r6, #:lower16:.LANCHOR3
 166:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * ) "FMuLow", configMINIMAL_STACK_SIZE, ( 
 739              		.loc 1 166 0
 740 005a FFF7FEFF 		bl	xTaskGenericCreate
 167:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * ) "FMuMed", configMINIMAL_STACK_SIZE,
 741              		.loc 1 167 0
 742 005e 40F20000 		movw	r0, #:lower16:prvMediumPriorityMutexTask
 743 0062 40F20001 		movw	r1, #:lower16:.LC2
 744 0066 7822     		movs	r2, #120
 745 0068 2346     		mov	r3, r4
 746 006a C0F20006 		movt	r6, #:upper16:.LANCHOR3
 747 006e C0F20001 		movt	r1, #:upper16:.LC2
 748 0072 0227     		movs	r7, #2
 749              	.LVL21:
 750 0074 C0F20000 		movt	r0, #:upper16:prvMediumPriorityMutexTask
 751 0078 0196     		str	r6, [sp, #4]
 752 007a 0097     		str	r7, [sp, #0]
 753 007c 0294     		str	r4, [sp, #8]
 754 007e 0394     		str	r4, [sp, #12]
 168:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * ) "FMuHigh", configMINIMAL_STACK_SIZE, 
 755              		.loc 1 168 0
 756 0080 40F20006 		movw	r6, #:lower16:.LANCHOR2
 167:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * ) "FMuMed", configMINIMAL_STACK_SIZE,
 757              		.loc 1 167 0
 758 0084 FFF7FEFF 		bl	xTaskGenericCreate
 168:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * ) "FMuHigh", configMINIMAL_STACK_SIZE, 
 759              		.loc 1 168 0
 760 0088 40F20000 		movw	r0, #:lower16:prvHighPriorityMutexTask
 761 008c 40F20001 		movw	r1, #:lower16:.LC3
 762 0090 C0F20006 		movt	r6, #:upper16:.LANCHOR2
 763 0094 2B46     		mov	r3, r5
 764 0096 C0F20001 		movt	r1, #:upper16:.LC3
 765 009a 0325     		movs	r5, #3
 766              	.LVL22:
 767 009c 7822     		movs	r2, #120
 768 009e C0F20000 		movt	r0, #:upper16:prvHighPriorityMutexTask
 769 00a2 8DE86000 		stmia	sp, {r5, r6}
 770 00a6 0294     		str	r4, [sp, #8]
 771 00a8 0394     		str	r4, [sp, #12]
 772 00aa FFF7FEFF 		bl	xTaskGenericCreate
 773              	.LVL23:
 169:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 774              		.loc 1 169 0
 775 00ae 05B0     		add	sp, sp, #20
 776 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 777              		.cfi_endproc
 778              	.LFE0:
 780 00b2 00BF     		.section	.text.xAreAltGenericQueueTasksStillRunning,"ax",%progbits
 781              		.align	2
 782              		.global	xAreAltGenericQueueTasksStillRunning
 783              		.thumb
 784              		.thumb_func
 786              	xAreAltGenericQueueTasksStillRunning:
 787              	.LFB5:
 544:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		}		
 545:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 546:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 547:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /*-----------------------------------------------------------*/
 548:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 549:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** /* This is called to check that all the created tasks are still running. */
 550:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** portBASE_TYPE xAreAltGenericQueueTasksStillRunning( void )
 551:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** {
 788              		.loc 1 551 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793 0000 70B4     		push	{r4, r5, r6}
 794              	.LCFI7:
 795              		.cfi_def_cfa_offset 12
 796              		.cfi_offset 6, -4
 797              		.cfi_offset 5, -8
 798              		.cfi_offset 4, -12
 552:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** static unsigned portLONG ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;
 553:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 554:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* If the demo task is still running then we expect the loopcounters to
 555:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	have incremented since this function was last called. */
 556:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 799              		.loc 1 556 0
 800 0002 40F20002 		movw	r2, #:lower16:.LANCHOR6
 801 0006 40F20004 		movw	r4, #:lower16:.LANCHOR5
 802 000a C0F20004 		movt	r4, #:upper16:.LANCHOR5
 803 000e C0F20002 		movt	r2, #:upper16:.LANCHOR6
 804 0012 2368     		ldr	r3, [r4, #0]
 805 0014 1168     		ldr	r1, [r2, #0]
 557:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	{
 558:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xErrorDetected = pdTRUE;
 806              		.loc 1 558 0
 807 0016 40F20000 		movw	r0, #:lower16:.LANCHOR1
 556:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 808              		.loc 1 556 0
 809 001a 9942     		cmp	r1, r3
 810              		.loc 1 558 0
 811 001c C0F20000 		movt	r0, #:upper16:.LANCHOR1
 556:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 812              		.loc 1 556 0
 813 0020 1AD0     		beq	.L75
 814              	.L71:
 559:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 560:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 561:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	if( ulLastLoopCounter2 == ulLoopCounter2 )
 815              		.loc 1 561 0
 816 0022 40F20001 		movw	r1, #:lower16:.LANCHOR4
 817 0026 40F20003 		movw	r3, #:lower16:.LANCHOR7
 818 002a C0F20001 		movt	r1, #:upper16:.LANCHOR4
 819 002e C0F20003 		movt	r3, #:upper16:.LANCHOR7
 820 0032 0D68     		ldr	r5, [r1, #0]
 821 0034 1E68     		ldr	r6, [r3, #0]
 822 0036 AE42     		cmp	r6, r5
 823 0038 0AD0     		beq	.L72
 824 003a 0068     		ldr	r0, [r0, #0]
 825 003c D0F10100 		rsbs	r0, r0, #1
 826 0040 38BF     		it	cc
 827 0042 0020     		movcc	r0, #0
 828              	.L73:
 562:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	{
 563:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xErrorDetected = pdTRUE;
 564:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	}
 565:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 566:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	ulLastLoopCounter = ulLoopCounter;
 829              		.loc 1 566 0
 830 0044 2468     		ldr	r4, [r4, #0]
 567:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	ulLastLoopCounter2 = ulLoopCounter2;	
 831              		.loc 1 567 0
 832 0046 0968     		ldr	r1, [r1, #0]
 566:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	ulLastLoopCounter = ulLoopCounter;
 833              		.loc 1 566 0
 834 0048 1460     		str	r4, [r2, #0]
 835              		.loc 1 567 0
 836 004a 1960     		str	r1, [r3, #0]
 568:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 569:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 570:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	to true. */
 571:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 
 572:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 	return !xErrorDetected;
 573:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** }
 837              		.loc 1 573 0
 838 004c 70BC     		pop	{r4, r5, r6}
 839 004e 7047     		bx	lr
 840              	.L72:
 563:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xErrorDetected = pdTRUE;
 841              		.loc 1 563 0
 842 0050 0125     		movs	r5, #1
 843 0052 0560     		str	r5, [r0, #0]
 844 0054 0020     		movs	r0, #0
 845 0056 F5E7     		b	.L73
 846              	.L75:
 558:../FreeRTOS/Demo/Common/Minimal/AltQTest.c **** 		xErrorDetected = pdTRUE;
 847              		.loc 1 558 0
 848 0058 0125     		movs	r5, #1
 849 005a 0560     		str	r5, [r0, #0]
 850 005c E1E7     		b	.L71
 851              		.cfi_endproc
 852              	.LFE5:
 854 005e 00BF     		.section	.bss.ulLoopCounter2,"aw",%nobits
 855              		.align	2
 856              		.set	.LANCHOR4,. + 0
 859              	ulLoopCounter2:
 860 0000 00000000 		.space	4
 861              		.section	.bss.xHighPriorityMutexTask,"aw",%nobits
 862              		.align	2
 863              		.set	.LANCHOR2,. + 0
 866              	xHighPriorityMutexTask:
 867 0000 00000000 		.space	4
 868              		.section	.bss.ulGuardedVariable,"aw",%nobits
 869              		.align	2
 870              		.set	.LANCHOR0,. + 0
 873              	ulGuardedVariable:
 874 0000 00000000 		.space	4
 875              		.section	.bss.xMediumPriorityMutexTask,"aw",%nobits
 876              		.align	2
 877              		.set	.LANCHOR3,. + 0
 880              	xMediumPriorityMutexTask:
 881 0000 00000000 		.space	4
 882              		.section	.rodata.str1.4,"aMS",%progbits,1
 883              		.align	2
 884              	.LC0:
 885 0000 4647656E 		.ascii	"FGenQ\000"
 885      5100
 886 0006 0000     		.space	2
 887              	.LC1:
 888 0008 464D754C 		.ascii	"FMuLow\000"
 888      6F7700
 889 000f 00       		.space	1
 890              	.LC2:
 891 0010 464D754D 		.ascii	"FMuMed\000"
 891      656400
 892 0017 00       		.space	1
 893              	.LC3:
 894 0018 464D7548 		.ascii	"FMuHigh\000"
 894      69676800 
 895              		.section	.bss.ulLastLoopCounter2.4818,"aw",%nobits
 896              		.align	2
 897              		.set	.LANCHOR7,. + 0
 900              	ulLastLoopCounter2.4818:
 901 0000 00000000 		.space	4
 902              		.section	.bss.xErrorDetected,"aw",%nobits
 903              		.align	2
 904              		.set	.LANCHOR1,. + 0
 907              	xErrorDetected:
 908 0000 00000000 		.space	4
 909              		.section	.bss.ulLoopCounter,"aw",%nobits
 910              		.align	2
 911              		.set	.LANCHOR5,. + 0
 914              	ulLoopCounter:
 915 0000 00000000 		.space	4
 916              		.section	.bss.ulLastLoopCounter.4817,"aw",%nobits
 917              		.align	2
 918              		.set	.LANCHOR6,. + 0
 921              	ulLastLoopCounter.4817:
 922 0000 00000000 		.space	4
 923              		.text
 924              	.Letext0:
 925              		.file 2 "../FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 926              		.file 3 "../FreeRTOS/Source/include/task.h"
 927              		.file 4 "../FreeRTOS/Source/include/queue.h"
 928              		.file 5 "../FreeRTOS/Source/include/semphr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AltQTest.c
     /tmp/ccLtrwxf.s:19     .text.prvMediumPriorityMutexTask:00000000 $t
     /tmp/ccLtrwxf.s:23     .text.prvMediumPriorityMutexTask:00000000 prvMediumPriorityMutexTask
     /tmp/ccLtrwxf.s:870    .bss.ulGuardedVariable:00000000 .LANCHOR0
     /tmp/ccLtrwxf.s:52     .text.prvHighPriorityMutexTask:00000000 $t
     /tmp/ccLtrwxf.s:56     .text.prvHighPriorityMutexTask:00000000 prvHighPriorityMutexTask
     /tmp/ccLtrwxf.s:904    .bss.xErrorDetected:00000000 .LANCHOR1
     /tmp/ccLtrwxf.s:110    .text.prvLowPriorityMutexTask:00000000 $t
     /tmp/ccLtrwxf.s:114    .text.prvLowPriorityMutexTask:00000000 prvLowPriorityMutexTask
     /tmp/ccLtrwxf.s:863    .bss.xHighPriorityMutexTask:00000000 .LANCHOR2
     /tmp/ccLtrwxf.s:877    .bss.xMediumPriorityMutexTask:00000000 .LANCHOR3
     /tmp/ccLtrwxf.s:856    .bss.ulLoopCounter2:00000000 .LANCHOR4
     /tmp/ccLtrwxf.s:243    .text.prvSendFrontAndBackTest:00000000 $t
     /tmp/ccLtrwxf.s:247    .text.prvSendFrontAndBackTest:00000000 prvSendFrontAndBackTest
     /tmp/ccLtrwxf.s:911    .bss.ulLoopCounter:00000000 .LANCHOR5
     /tmp/ccLtrwxf.s:667    .text.vStartAltGenericQueueTasks:00000000 $t
     /tmp/ccLtrwxf.s:672    .text.vStartAltGenericQueueTasks:00000000 vStartAltGenericQueueTasks
     /tmp/ccLtrwxf.s:884    .rodata.str1.4:00000000 .LC0
     /tmp/ccLtrwxf.s:887    .rodata.str1.4:00000008 .LC1
     /tmp/ccLtrwxf.s:890    .rodata.str1.4:00000010 .LC2
     /tmp/ccLtrwxf.s:893    .rodata.str1.4:00000018 .LC3
     /tmp/ccLtrwxf.s:781    .text.xAreAltGenericQueueTasksStillRunning:00000000 $t
     /tmp/ccLtrwxf.s:786    .text.xAreAltGenericQueueTasksStillRunning:00000000 xAreAltGenericQueueTasksStillRunning
     /tmp/ccLtrwxf.s:918    .bss.ulLastLoopCounter.4817:00000000 .LANCHOR6
     /tmp/ccLtrwxf.s:897    .bss.ulLastLoopCounter2.4818:00000000 .LANCHOR7
     /tmp/ccLtrwxf.s:855    .bss.ulLoopCounter2:00000000 $d
     /tmp/ccLtrwxf.s:859    .bss.ulLoopCounter2:00000000 ulLoopCounter2
     /tmp/ccLtrwxf.s:862    .bss.xHighPriorityMutexTask:00000000 $d
     /tmp/ccLtrwxf.s:866    .bss.xHighPriorityMutexTask:00000000 xHighPriorityMutexTask
     /tmp/ccLtrwxf.s:869    .bss.ulGuardedVariable:00000000 $d
     /tmp/ccLtrwxf.s:873    .bss.ulGuardedVariable:00000000 ulGuardedVariable
     /tmp/ccLtrwxf.s:876    .bss.xMediumPriorityMutexTask:00000000 $d
     /tmp/ccLtrwxf.s:880    .bss.xMediumPriorityMutexTask:00000000 xMediumPriorityMutexTask
     /tmp/ccLtrwxf.s:883    .rodata.str1.4:00000000 $d
     /tmp/ccLtrwxf.s:896    .bss.ulLastLoopCounter2.4818:00000000 $d
     /tmp/ccLtrwxf.s:900    .bss.ulLastLoopCounter2.4818:00000000 ulLastLoopCounter2.4818
     /tmp/ccLtrwxf.s:903    .bss.xErrorDetected:00000000 $d
     /tmp/ccLtrwxf.s:907    .bss.xErrorDetected:00000000 xErrorDetected
     /tmp/ccLtrwxf.s:910    .bss.ulLoopCounter:00000000 $d
     /tmp/ccLtrwxf.s:914    .bss.ulLoopCounter:00000000 ulLoopCounter
     /tmp/ccLtrwxf.s:917    .bss.ulLastLoopCounter.4817:00000000 $d
     /tmp/ccLtrwxf.s:921    .bss.ulLastLoopCounter.4817:00000000 ulLastLoopCounter.4817
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskSuspend
xQueueAltGenericReceive
xQueueAltGenericSend
uxTaskPriorityGet
vTaskResume
vTaskPrioritySet
uxQueueMessagesWaiting
xQueueGenericCreate
xTaskGenericCreate
xQueueCreateMutex
