   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"crflash.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvFlashCoRoutine,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	prvFlashCoRoutine:
  24              	.LFB2:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/crflash.c"
   1:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	
   4:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/crflash.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/crflash.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/crflash.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*
  55:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * This demo application file demonstrates the use of queues to pass data
  56:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * between co-routines.
  57:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  *
  58:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * N represents the number of 'fixed delay' co-routines that are created and
  59:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * is set during initialisation.
  60:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  *
  61:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * N 'fixed delay' co-routines are created that just block for a fixed
  62:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * period then post the number of an LED onto a queue.  Each such co-routine
  63:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * uses a different block period.  A single 'flash' co-routine is also created
  64:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * that blocks on the same queue, waiting for the number of the next LED it
  65:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * should flash.  Upon receiving a number it simply toggle the instructed LED
  66:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * then blocks on the queue once more.  In this manner each LED from LED 0 to
  67:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * LED N-1 is caused to flash at a different rate.
  68:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  *
  69:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * The 'fixed delay' co-routines are created with co-routine priority 0.  The
  70:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * flash co-routine is created with co-routine priority 1.  This means that
  71:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * the queue should never contain more than a single item.  This is because
  72:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * posting to the queue will unblock the 'flash' co-routine, and as this has
  73:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * a priority greater than the tasks posting to the queue it is guaranteed to
  74:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * have emptied the queue and blocked once again before the queue can contain
  75:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * any more date.  An error is indicated if an attempt to post data to the
  76:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * queue fails - indicating that the queue is already full.
  77:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  *
  78:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  */
  79:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  80:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* Scheduler includes. */
  81:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #include "FreeRTOS.h"
  82:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #include "croutine.h"
  83:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #include "queue.h"
  84:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  85:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* Demo application includes. */
  86:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #include "partest.h"
  87:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #include "crflash.h"
  88:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  89:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* The queue should only need to be of length 1.  See the description at the
  90:../FreeRTOS/Demo/Common/Minimal/crflash.c **** top of the file. */
  91:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #define crfQUEUE_LENGTH		1
  92:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  93:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #define crfFIXED_DELAY_PRIORITY		0
  94:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #define crfFLASH_PRIORITY			1
  95:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  96:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* Only one flash co-routine is created so the index is not significant. */
  97:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #define crfFLASH_INDEX				0
  98:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
  99:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* Don't allow more than crfMAX_FLASH_TASKS 'fixed delay' co-routines to be
 100:../FreeRTOS/Demo/Common/Minimal/crflash.c **** created. */
 101:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #define crfMAX_FLASH_TASKS			8
 102:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 103:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* We don't want to block when posting to the queue. */
 104:../FreeRTOS/Demo/Common/Minimal/crflash.c **** #define crfPOSTING_BLOCK_TIME		0
 105:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 106:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*
 107:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * The 'fixed delay' co-routine as described at the top of the file.
 108:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  */
 109:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static void prvFixedDelayCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex );
 110:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 111:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*
 112:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * The 'flash' co-routine as described at the top of the file.
 113:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  */
 114:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static void prvFlashCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex );
 115:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 116:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* The queue used to pass data between the 'fixed delay' co-routines and the
 117:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 'flash' co-routine. */
 118:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static xQueueHandle xFlashQueue;
 119:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 120:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* This will be set to pdFALSE if we detect an error. */
 121:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static portBASE_TYPE xCoRoutineFlashStatus = pdPASS;
 122:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 123:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*-----------------------------------------------------------*/
 124:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 125:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*
 126:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  * See the header file for details.
 127:../FreeRTOS/Demo/Common/Minimal/crflash.c ****  */
 128:../FreeRTOS/Demo/Common/Minimal/crflash.c **** void vStartFlashCoRoutines( unsigned portBASE_TYPE uxNumberToCreate )
 129:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 130:../FreeRTOS/Demo/Common/Minimal/crflash.c **** unsigned portBASE_TYPE uxIndex;
 131:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 132:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	if( uxNumberToCreate > crfMAX_FLASH_TASKS )
 133:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	{
 134:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		uxNumberToCreate = crfMAX_FLASH_TASKS;
 135:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	}
 136:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 137:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	/* Create the queue used to pass data between the co-routines. */
 138:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( unsigned portBASE_TYPE ) );
 139:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 140:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	if( xFlashQueue )
 141:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	{
 142:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		/* Create uxNumberToCreate 'fixed delay' co-routines. */
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 144:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		{
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 146:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		}
 147:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 148:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		/* Create the 'flash' co-routine. */
 149:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		xCoRoutineCreate( prvFlashCoRoutine, crfFLASH_PRIORITY, crfFLASH_INDEX );
 150:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	}
 151:../FreeRTOS/Demo/Common/Minimal/crflash.c **** }
 152:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*-----------------------------------------------------------*/
 153:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 154:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static void prvFixedDelayCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
 155:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 156:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* Even though this is a co-routine the xResult variable does not need to be
 157:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static as we do not need it to maintain its state between blocks. */
 158:../FreeRTOS/Demo/Common/Minimal/crflash.c **** signed portBASE_TYPE xResult;
 159:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* The uxIndex parameter of the co-routine function is used as an index into
 160:../FreeRTOS/Demo/Common/Minimal/crflash.c **** the xFlashRates array to obtain the delay period to use. */
 161:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static const portTickType xFlashRates[ crfMAX_FLASH_TASKS ] = { 150 / portTICK_RATE_MS,
 162:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																200 / portTICK_RATE_MS,
 163:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																250 / portTICK_RATE_MS,
 164:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																300 / portTICK_RATE_MS,
 165:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																350 / portTICK_RATE_MS,
 166:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																400 / portTICK_RATE_MS,
 167:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																450 / portTICK_RATE_MS,
 168:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 																500  / portTICK_RATE_MS };
 169:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 170:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	/* Co-routines MUST start with a call to crSTART. */
 171:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crSTART( xHandle );
 172:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 173:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	for( ;; )
 174:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	{
 175:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		/* Post our uxIndex value onto the queue.  This is used as the LED to
 176:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		flash. */
 177:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
 178:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 179:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		if( xResult != pdPASS )
 180:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		{
 181:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			/* For the reasons stated at the top of the file we should always
 182:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			find that we can post to the queue.  If we could not then an error
 183:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			has occurred. */
 184:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineFlashStatus = pdFAIL;
 185:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		}
 186:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 187:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crDELAY( xHandle, xFlashRates[ uxIndex ] );
 188:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	}
 189:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 190:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	/* Co-routines MUST end with a call to crEND. */
 191:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crEND();
 192:../FreeRTOS/Demo/Common/Minimal/crflash.c **** }
 193:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*-----------------------------------------------------------*/
 194:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 195:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static void prvFlashCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
 196:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
  26              		.loc 1 196 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 4, -16
 197:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /* Even though this is a co-routine the variable do not need to be
 198:../FreeRTOS/Demo/Common/Minimal/crflash.c **** static as we do not need it to maintain their state between blocks. */
 199:../FreeRTOS/Demo/Common/Minimal/crflash.c **** signed portBASE_TYPE xResult;
 200:../FreeRTOS/Demo/Common/Minimal/crflash.c **** unsigned portBASE_TYPE uxLEDToFlash;
 201:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 202:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	/* Co-routines MUST start with a call to crSTART. */
 203:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crSTART( xHandle );
  38              		.loc 1 203 0
  39 0002 838E     		ldrh	r3, [r0, #52]
 196:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
  40              		.loc 1 196 0
  41 0004 82B0     		sub	sp, sp, #8
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 24
  44              		.loc 1 203 0
  45 0006 B3F5D17F 		cmp	r3, #418
 196:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
  46              		.loc 1 196 0
  47 000a 0546     		mov	r5, r0
  48              		.loc 1 203 0
  49 000c 2DD0     		beq	.L4
  50 000e 40F2A312 		movw	r2, #419
  51 0012 9342     		cmp	r3, r2
  52 0014 02BF     		ittt	eq
  53 0016 40F20004 		movweq	r4, #:lower16:.LANCHOR0
  54 001a C0F20004 		movteq	r4, #:upper16:.LANCHOR0
  55 001e 01AE     		addeq	r6, sp, #4
  56 0020 2ED0     		beq	.L5
  57 0022 03BB     		cbnz	r3, .L1
  58 0024 40F20004 		movw	r4, #:lower16:.LANCHOR0
  59 0028 C0F20004 		movt	r4, #:upper16:.LANCHOR0
  60 002c 01AE     		add	r6, sp, #4
  61 002e 08E0     		b	.L3
  62              	.LVL1:
  63              	.L12:
 204:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	( void ) uxIndex;
 205:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	
 206:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	for( ;; )
 207:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	{
 208:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		/* Block to wait for the number of the LED to flash. */
 209:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
 210:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 211:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		if( xResult != pdPASS )
  64              		.loc 1 211 0
  65 0030 0128     		cmp	r0, #1
  66 0032 25D0     		beq	.L5
 212:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		{
 213:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			/* We would not expect to wake unless we received something. */
 214:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineFlashStatus = pdFAIL;
  67              		.loc 1 214 0
  68 0034 40F2000C 		movw	ip, #:lower16:.LANCHOR1
  69 0038 C0F2000C 		movt	ip, #:upper16:.LANCHOR1
  70 003c 0020     		movs	r0, #0
  71              	.LVL2:
  72 003e CCF80000 		str	r0, [ip, #0]
  73              	.L3:
 209:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
  74              		.loc 1 209 0
  75 0042 4FF0FF32 		mov	r2, #-1
  76 0046 2068     		ldr	r0, [r4, #0]
  77 0048 3146     		mov	r1, r6
  78 004a FFF7FEFF 		bl	xQueueCRReceive
  79              	.LVL3:
  80 004e 021D     		adds	r2, r0, #4
  81 0050 04BF     		itt	eq
  82 0052 4FF4D173 		moveq	r3, #418	@ movhi
  83 0056 AB86     		strheq	r3, [r5, #52]	@ movhi
  84 0058 05D0     		beq	.L1
  85              	.L6:
 209:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
  86              		.loc 1 209 0 is_stmt 0 discriminator 2
  87 005a 411D     		adds	r1, r0, #5
  88 005c 04BF     		itt	eq
  89 005e 40F2A311 		movweq	r1, 419	@ movhi
  90 0062 A986     		strheq	r1, [r5, #52]	@ movhi
  91 0064 E4D1     		bne	.L12
  92              	.LVL4:
  93              	.L1:
 215:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		}
 216:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		else
 217:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		{
 218:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			/* We received the number of an LED to flash - flash it! */
 219:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			vParTestToggleLED( uxLEDToFlash );
 220:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		}
 221:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	}
 222:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 223:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	/* Co-routines MUST end with a call to crEND. */
 224:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crEND();
 225:../FreeRTOS/Demo/Common/Minimal/crflash.c **** }
  94              		.loc 1 225 0 is_stmt 1
  95 0066 02B0     		add	sp, sp, #8
  96 0068 70BD     		pop	{r4, r5, r6, pc}
  97              	.LVL5:
  98              	.L4:
 209:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
  99              		.loc 1 209 0
 100 006a 40F20004 		movw	r4, #:lower16:.LANCHOR0
 101 006e C0F20004 		movt	r4, #:upper16:.LANCHOR0
 102 0072 01AE     		add	r6, sp, #4
 103 0074 2068     		ldr	r0, [r4, #0]
 104 0076 3146     		mov	r1, r6
 105              	.LVL6:
 106 0078 0022     		movs	r2, #0
 107 007a FFF7FEFF 		bl	xQueueCRReceive
 108              	.LVL7:
 109 007e ECE7     		b	.L6
 110              	.LVL8:
 111              	.L5:
 219:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			vParTestToggleLED( uxLEDToFlash );
 112              		.loc 1 219 0
 113 0080 0198     		ldr	r0, [sp, #4]
 114 0082 FFF7FEFF 		bl	vParTestToggleLED
 115 0086 DCE7     		b	.L3
 116              		.cfi_endproc
 117              	.LFE2:
 119              		.section	.text.prvFixedDelayCoRoutine,"ax",%progbits
 120              		.align	2
 121              		.thumb
 122              		.thumb_func
 124              	prvFixedDelayCoRoutine:
 125              	.LFB1:
 155:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 126              		.loc 1 155 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              	.LVL9:
 131 0000 10B5     		push	{r4, lr}
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 14, -4
 135              		.cfi_offset 4, -8
 171:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crSTART( xHandle );
 136              		.loc 1 171 0
 137 0002 838E     		ldrh	r3, [r0, #52]
 155:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 138              		.loc 1 155 0
 139 0004 82B0     		sub	sp, sp, #8
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 16
 171:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crSTART( xHandle );
 142              		.loc 1 171 0
 143 0006 B3F5B17F 		cmp	r3, #354
 155:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 144              		.loc 1 155 0
 145 000a 0446     		mov	r4, r0
 146 000c 0191     		str	r1, [sp, #4]
 171:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crSTART( xHandle );
 147              		.loc 1 171 0
 148 000e 35D0     		beq	.L16
 149 0010 08D9     		bls	.L22
 150 0012 40F26312 		movw	r2, #355
 151 0016 9342     		cmp	r3, r2
 152 0018 24D0     		beq	.L17
 153 001a B3F5BB7F 		cmp	r3, #374
 154 001e 03D0     		beq	.L15
 155              	.LVL10:
 156              	.L13:
 192:../FreeRTOS/Demo/Common/Minimal/crflash.c **** }
 157              		.loc 1 192 0
 158 0020 02B0     		add	sp, sp, #8
 159 0022 10BD     		pop	{r4, pc}
 160              	.L22:
 171:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	crSTART( xHandle );
 161              		.loc 1 171 0
 162 0024 002B     		cmp	r3, #0
 163 0026 FBD1     		bne	.L13
 164              	.L15:
 177:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
 165              		.loc 1 177 0
 166 0028 40F20003 		movw	r3, #:lower16:.LANCHOR0
 167 002c C0F20003 		movt	r3, #:upper16:.LANCHOR0
 168 0030 1868     		ldr	r0, [r3, #0]
 169 0032 0022     		movs	r2, #0
 170 0034 01A9     		add	r1, sp, #4
 171              	.LVL11:
 172 0036 FFF7FEFF 		bl	xQueueCRSend
 173              	.LVL12:
 174 003a 031D     		adds	r3, r0, #4
 175 003c 04BF     		itt	eq
 176 003e 4FF4B173 		moveq	r3, #354	@ movhi
 177 0042 A386     		strheq	r3, [r4, #52]	@ movhi
 178 0044 ECD0     		beq	.L13
 179              	.L19:
 177:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
 180              		.loc 1 177 0 is_stmt 0 discriminator 2
 181 0046 411D     		adds	r1, r0, #5
 182 0048 04BF     		itt	eq
 183 004a 40F26313 		movweq	r3, 355	@ movhi
 184 004e A386     		strheq	r3, [r4, #52]	@ movhi
 185 0050 E6D0     		beq	.L13
 179:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		if( xResult != pdPASS )
 186              		.loc 1 179 0 is_stmt 1
 187 0052 0128     		cmp	r0, #1
 188 0054 06D0     		beq	.L17
 184:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineFlashStatus = pdFAIL;
 189              		.loc 1 184 0
 190 0056 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 191 005a C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 192 005e 0021     		movs	r1, #0
 193 0060 CCF80010 		str	r1, [ip, #0]
 194              	.LVL13:
 195              	.L17:
 187:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crDELAY( xHandle, xFlashRates[ uxIndex ] );
 196              		.loc 1 187 0
 197 0064 40F20003 		movw	r3, #:lower16:.LANCHOR2
 198 0068 019A     		ldr	r2, [sp, #4]
 199 006a C0F20003 		movt	r3, #:upper16:.LANCHOR2
 200 006e 53F82200 		ldr	r0, [r3, r2, lsl #2]
 201 0072 68B9     		cbnz	r0, .L23
 202              	.L21:
 187:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crDELAY( xHandle, xFlashRates[ uxIndex ] );
 203              		.loc 1 187 0 is_stmt 0 discriminator 2
 204 0074 4FF4BB70 		mov	r0, #374	@ movhi
 205 0078 A086     		strh	r0, [r4, #52]	@ movhi
 206 007a D1E7     		b	.L13
 207              	.L16:
 177:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
 208              		.loc 1 177 0 is_stmt 1
 209 007c 40F20000 		movw	r0, #:lower16:.LANCHOR0
 210 0080 C0F20000 		movt	r0, #:upper16:.LANCHOR0
 211 0084 01A9     		add	r1, sp, #4
 212 0086 0022     		movs	r2, #0
 213 0088 0068     		ldr	r0, [r0, #0]
 214 008a FFF7FEFF 		bl	xQueueCRSend
 215              	.LVL14:
 216 008e DAE7     		b	.L19
 217              	.LVL15:
 218              	.L23:
 187:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		crDELAY( xHandle, xFlashRates[ uxIndex ] );
 219              		.loc 1 187 0 discriminator 1
 220 0090 0021     		movs	r1, #0
 221 0092 FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 222 0096 EDE7     		b	.L21
 223              		.cfi_endproc
 224              	.LFE1:
 226              		.section	.text.vStartFlashCoRoutines,"ax",%progbits
 227              		.align	2
 228              		.global	vStartFlashCoRoutines
 229              		.thumb
 230              		.thumb_func
 232              	vStartFlashCoRoutines:
 233              	.LFB0:
 129:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 234              		.loc 1 129 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL16:
 239 0000 70B5     		push	{r4, r5, r6, lr}
 240              	.LCFI4:
 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 14, -4
 243              		.cfi_offset 6, -8
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 4, -16
 138:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( unsigned portBASE_TYPE ) );
 246              		.loc 1 138 0
 247 0002 0421     		movs	r1, #4
 129:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 248              		.loc 1 129 0
 249 0004 0546     		mov	r5, r0
 250              	.LVL17:
 138:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( unsigned portBASE_TYPE ) );
 251              		.loc 1 138 0
 252 0006 0022     		movs	r2, #0
 253 0008 0120     		movs	r0, #1
 254              	.LVL18:
 255 000a FFF7FEFF 		bl	xQueueGenericCreate
 256 000e 40F20003 		movw	r3, #:lower16:.LANCHOR0
 257 0012 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 258 0016 1860     		str	r0, [r3, #0]
 140:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	if( xFlashQueue )
 259              		.loc 1 140 0
 260 0018 0028     		cmp	r0, #0
 261 001a 3BD0     		beq	.L24
 140:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	if( xFlashQueue )
 262              		.loc 1 140 0 is_stmt 0 discriminator 1
 263 001c 082D     		cmp	r5, #8
 264 001e 28BF     		it	cs
 265 0020 0825     		movcs	r5, #8
 266              	.LVL19:
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 267              		.loc 1 143 0 is_stmt 1 discriminator 1
 268 0022 6DB3     		cbz	r5, .L26
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 269              		.loc 1 145 0
 270 0024 0021     		movs	r1, #0
 271 0026 40F20000 		movw	r0, #:lower16:prvFixedDelayCoRoutine
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 272              		.loc 1 143 0
 273 002a 0124     		movs	r4, #1
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 274              		.loc 1 145 0
 275 002c C0F20000 		movt	r0, #:upper16:prvFixedDelayCoRoutine
 276 0030 0A46     		mov	r2, r1
 277 0032 6E1E     		subs	r6, r5, #1
 278 0034 FFF7FEFF 		bl	xCoRoutineCreate
 279              	.LVL20:
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 280              		.loc 1 143 0
 281 0038 AC42     		cmp	r4, r5
 282 003a 06EA0406 		and	r6, r6, r4
 283 003e 1FD0     		beq	.L26
 284 0040 56B1     		cbz	r6, .L27
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 285              		.loc 1 145 0
 286 0042 40F20000 		movw	r0, #:lower16:prvFixedDelayCoRoutine
 287 0046 2246     		mov	r2, r4
 288 0048 0021     		movs	r1, #0
 289 004a C0F20000 		movt	r0, #:upper16:prvFixedDelayCoRoutine
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 290              		.loc 1 143 0
 291 004e 0224     		movs	r4, #2
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 292              		.loc 1 145 0
 293 0050 FFF7FEFF 		bl	xCoRoutineCreate
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 294              		.loc 1 143 0
 295 0054 AC42     		cmp	r4, r5
 296 0056 13D0     		beq	.L26
 297              	.L27:
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 298              		.loc 1 145 0 discriminator 2
 299 0058 40F20000 		movw	r0, #:lower16:prvFixedDelayCoRoutine
 300 005c 2246     		mov	r2, r4
 301 005e 0021     		movs	r1, #0
 302 0060 C0F20000 		movt	r0, #:upper16:prvFixedDelayCoRoutine
 303 0064 FFF7FEFF 		bl	xCoRoutineCreate
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 304              		.loc 1 143 0 discriminator 2
 305 0068 0134     		adds	r4, r4, #1
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 306              		.loc 1 145 0 discriminator 2
 307 006a 40F20000 		movw	r0, #:lower16:prvFixedDelayCoRoutine
 308 006e 0021     		movs	r1, #0
 309 0070 2246     		mov	r2, r4
 310 0072 C0F20000 		movt	r0, #:upper16:prvFixedDelayCoRoutine
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 311              		.loc 1 143 0 discriminator 2
 312 0076 0134     		adds	r4, r4, #1
 145:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
 313              		.loc 1 145 0 discriminator 2
 314 0078 FFF7FEFF 		bl	xCoRoutineCreate
 143:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
 315              		.loc 1 143 0 discriminator 2
 316 007c AC42     		cmp	r4, r5
 317 007e EBD1     		bne	.L27
 318              	.L26:
 149:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		xCoRoutineCreate( prvFlashCoRoutine, crfFLASH_PRIORITY, crfFLASH_INDEX );
 319              		.loc 1 149 0
 320 0080 40F20000 		movw	r0, #:lower16:prvFlashCoRoutine
 321 0084 C0F20000 		movt	r0, #:upper16:prvFlashCoRoutine
 322 0088 0121     		movs	r1, #1
 323 008a 0022     		movs	r2, #0
 151:../FreeRTOS/Demo/Common/Minimal/crflash.c **** }
 324              		.loc 1 151 0
 325 008c BDE87040 		pop	{r4, r5, r6, lr}
 149:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 		xCoRoutineCreate( prvFlashCoRoutine, crfFLASH_PRIORITY, crfFLASH_INDEX );
 326              		.loc 1 149 0
 327 0090 FFF7FEBF 		b	xCoRoutineCreate
 328              	.LVL21:
 329              	.L24:
 330 0094 70BD     		pop	{r4, r5, r6, pc}
 331              		.cfi_endproc
 332              	.LFE0:
 334 0096 00BF     		.section	.text.xAreFlashCoRoutinesStillRunning,"ax",%progbits
 335              		.align	2
 336              		.global	xAreFlashCoRoutinesStillRunning
 337              		.thumb
 338              		.thumb_func
 340              	xAreFlashCoRoutinesStillRunning:
 341              	.LFB3:
 226:../FreeRTOS/Demo/Common/Minimal/crflash.c **** /*-----------------------------------------------------------*/
 227:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 
 228:../FreeRTOS/Demo/Common/Minimal/crflash.c **** portBASE_TYPE xAreFlashCoRoutinesStillRunning( void )
 229:../FreeRTOS/Demo/Common/Minimal/crflash.c **** {
 342              		.loc 1 229 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 230:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	/* Return pdPASS or pdFAIL depending on whether an error has been detected
 231:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	or not. */
 232:../FreeRTOS/Demo/Common/Minimal/crflash.c **** 	return xCoRoutineFlashStatus;
 347              		.loc 1 232 0
 348 0000 40F20003 		movw	r3, #:lower16:.LANCHOR1
 349 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR1
 233:../FreeRTOS/Demo/Common/Minimal/crflash.c **** }
 350              		.loc 1 233 0
 351 0008 1868     		ldr	r0, [r3, #0]
 352 000a 7047     		bx	lr
 353              		.cfi_endproc
 354              	.LFE3:
 356              		.section	.bss.xFlashQueue,"aw",%nobits
 357              		.align	2
 358              		.set	.LANCHOR0,. + 0
 361              	xFlashQueue:
 362 0000 00000000 		.space	4
 363              		.section	.data.xCoRoutineFlashStatus,"aw",%progbits
 364              		.align	2
 365              		.set	.LANCHOR1,. + 0
 368              	xCoRoutineFlashStatus:
 369 0000 01000000 		.word	1
 370              		.section	.rodata.xFlashRates.4117,"a",%progbits
 371              		.align	2
 372              		.set	.LANCHOR2,. + 0
 375              	xFlashRates.4117:
 376 0000 96000000 		.word	150
 377 0004 C8000000 		.word	200
 378 0008 FA000000 		.word	250
 379 000c 2C010000 		.word	300
 380 0010 5E010000 		.word	350
 381 0014 90010000 		.word	400
 382 0018 C2010000 		.word	450
 383 001c F4010000 		.word	500
 384              		.text
 385              	.Letext0:
 386              		.file 2 "../FreeRTOS/Source/include/list.h"
 387              		.file 3 "../FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 388              		.file 4 "../FreeRTOS/Source/include/croutine.h"
 389              		.file 5 "../FreeRTOS/Source/include/queue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 crflash.c
     /tmp/ccmmPYUd.s:19     .text.prvFlashCoRoutine:00000000 $t
     /tmp/ccmmPYUd.s:23     .text.prvFlashCoRoutine:00000000 prvFlashCoRoutine
     /tmp/ccmmPYUd.s:358    .bss.xFlashQueue:00000000 .LANCHOR0
     /tmp/ccmmPYUd.s:365    .data.xCoRoutineFlashStatus:00000000 .LANCHOR1
     /tmp/ccmmPYUd.s:120    .text.prvFixedDelayCoRoutine:00000000 $t
     /tmp/ccmmPYUd.s:124    .text.prvFixedDelayCoRoutine:00000000 prvFixedDelayCoRoutine
     /tmp/ccmmPYUd.s:372    .rodata.xFlashRates.4117:00000000 .LANCHOR2
     /tmp/ccmmPYUd.s:227    .text.vStartFlashCoRoutines:00000000 $t
     /tmp/ccmmPYUd.s:232    .text.vStartFlashCoRoutines:00000000 vStartFlashCoRoutines
     /tmp/ccmmPYUd.s:335    .text.xAreFlashCoRoutinesStillRunning:00000000 $t
     /tmp/ccmmPYUd.s:340    .text.xAreFlashCoRoutinesStillRunning:00000000 xAreFlashCoRoutinesStillRunning
     /tmp/ccmmPYUd.s:357    .bss.xFlashQueue:00000000 $d
     /tmp/ccmmPYUd.s:361    .bss.xFlashQueue:00000000 xFlashQueue
     /tmp/ccmmPYUd.s:364    .data.xCoRoutineFlashStatus:00000000 $d
     /tmp/ccmmPYUd.s:368    .data.xCoRoutineFlashStatus:00000000 xCoRoutineFlashStatus
     /tmp/ccmmPYUd.s:371    .rodata.xFlashRates.4117:00000000 $d
     /tmp/ccmmPYUd.s:375    .rodata.xFlashRates.4117:00000000 xFlashRates.4117
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueCRReceive
vParTestToggleLED
xQueueCRSend
vCoRoutineAddToDelayedList
xQueueGenericCreate
xCoRoutineCreate
