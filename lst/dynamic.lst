   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"dynamic.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vQueueReceiveWhenSuspendedTask,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	vQueueReceiveWhenSuspendedTask:
  24              	.LFB5:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/dynamic.c"
   1:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	
   4:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
  55:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The first test creates three tasks - two counter tasks (one continuous count 
  56:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * and one limited count) and one controller.  A "count" variable is shared 
  57:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * between all three tasks.  The two counter tasks should never be in a "ready" 
  58:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * state at the same time.  The controller task runs at the same priority as 
  59:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * the continuous count task, and at a lower priority than the limited count 
  60:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * task.
  61:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  62:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * One counter task loops indefinitely, incrementing the shared count variable
  63:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * on each iteration.  To ensure it has exclusive access to the variable it
  64:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * raises it's priority above that of the controller task before each 
  65:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * increment, lowering it again to it's original priority before starting the
  66:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * next iteration.
  67:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  68:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The other counter task increments the shared count variable on each
  69:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * iteration of it's loop until the count has reached a limit of 0xff - at
  70:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * which point it suspends itself.  It will not start a new loop until the 
  71:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * controller task has made it "ready" again by calling vTaskResume ().  
  72:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * This second counter task operates at a higher priority than controller 
  73:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * task so does not need to worry about mutual exclusion of the counter 
  74:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * variable.
  75:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  76:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The controller task is in two sections.  The first section controls and
  77:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * monitors the continuous count task.  When this section is operational the 
  78:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * limited count task is suspended.  Likewise, the second section controls 
  79:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * and monitors the limited count task.  When this section is operational the 
  80:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * continuous count task is suspended.
  81:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  82:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * In the first section the controller task first takes a copy of the shared
  83:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * count variable.  To ensure mutual exclusion on the count variable it
  84:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * suspends the continuous count task, resuming it again when the copy has been
  85:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * taken.  The controller task then sleeps for a fixed period - during which
  86:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * the continuous count task will execute and increment the shared variable.
  87:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * When the controller task wakes it checks that the continuous count task
  88:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * has executed by comparing the copy of the shared variable with its current
  89:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * value.  This time, to ensure mutual exclusion, the scheduler itself is 
  90:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * suspended with a call to vTaskSuspendAll ().  This is for demonstration 
  91:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * purposes only and is not a recommended technique due to its inefficiency.
  92:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  93:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * After a fixed number of iterations the controller task suspends the 
  94:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * continuous count task, and moves on to its second section.
  95:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  96:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * At the start of the second section the shared variable is cleared to zero.
  97:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The limited count task is then woken from it's suspension by a call to
  98:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * vTaskResume ().  As this counter task operates at a higher priority than
  99:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * the controller task the controller task should not run again until the
 100:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * shared variable has been counted up to the limited value causing the counter
 101:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * task to suspend itself.  The next line after vTaskResume () is therefore
 102:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * a check on the shared variable to ensure everything is as expected.
 103:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 104:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 105:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The second test consists of a couple of very simple tasks that post onto a 
 106:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * queue while the scheduler is suspended.  This test was added to test parts
 107:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * of the scheduler not exercised by the first test.
 108:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 109:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 110:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 111:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include <stdlib.h>
 112:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 113:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Scheduler include files. */
 114:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "FreeRTOS.h"
 115:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "task.h"
 116:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "semphr.h"
 117:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 118:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Demo app include files. */
 119:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "dynamic.h"
 120:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 121:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Function that implements the "limited count" task as described above. */
 122:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vLimitedIncrementTask, pvParameters );
 123:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 124:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Function that implements the "continuous count" task as described above. */
 125:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vContinuousIncrementTask, pvParameters );
 126:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 127:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Function that implements the controller task as described above. */
 128:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vCounterControlTask, pvParameters );
 129:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 130:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueReceiveWhenSuspendedTask, pvParameters );
 131:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueSendWhenSuspendedTask, pvParameters );
 132:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 133:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Demo task specific constants. */
 134:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priSTACK_SIZE				( configMINIMAL_STACK_SIZE )
 135:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priSLEEP_TIME				( ( portTickType ) 128 / portTICK_RATE_MS )
 136:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priLOOPS					( 5 )
 137:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priMAX_COUNT				( ( unsigned long ) 0xff )
 138:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priNO_BLOCK					( ( portTickType ) 0 )
 139:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priSUSPENDED_QUEUE_LENGTH	( 1 )
 140:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 141:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 142:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 143:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Handles to the two counter tasks.  These could be passed in as parameters
 144:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** to the controller task to prevent them having to be file scope. */
 145:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static xTaskHandle xContinousIncrementHandle, xLimitedIncrementHandle;
 146:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 147:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* The shared counter variable.  This is passed in as a parameter to the two 
 148:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** counter variables for demonstration purposes. */
 149:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static unsigned long ulCounter;
 150:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 151:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Variables used to check that the tasks are still operating without error.
 152:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** Each complete iteration of the controller task increments this variable
 153:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** provided no errors have been found.  The variable maintaining the same value
 154:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** is therefore indication of an error. */
 155:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile unsigned short usCheckVariable = ( unsigned short ) 0;
 156:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile portBASE_TYPE xSuspendedQueueSendError = pdFALSE;
 157:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile portBASE_TYPE xSuspendedQueueReceiveError = pdFALSE;
 158:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 159:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Queue used by the second test. */
 160:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** xQueueHandle xSuspendedTestQueue;
 161:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 162:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 163:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 164:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Start the three tasks as described at the top of the file.
 165:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Note that the limited count task is given a higher priority.
 166:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 167:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** void vStartDynamicPriorityTasks( void )
 168:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 169:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
 170:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 171:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 172:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 173:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 174:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 175:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 176:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	defined to be less than 1. */
 177:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );
 178:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 179:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulC
 180:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCoun
 181:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vCounterControlTask, ( signed char * ) "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORIT
 182:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueSendWhenSuspendedTask, ( signed char * ) "SUSP_TX", priSTACK_SIZE, NULL, tskIDL
 183:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueReceiveWhenSuspendedTask, ( signed char * ) "SUSP_RX", priSTACK_SIZE, NULL, tsk
 184:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 185:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 186:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 187:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 188:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Just loops around incrementing the shared variable until the limit has been
 189:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * reached.  Once the limit has been reached it suspends itself. 
 190:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 191:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
 192:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 193:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** unsigned long *pulCounter;
 194:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 195:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 196:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	the task. */
 197:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	pulCounter = ( unsigned long * ) pvParameters;
 198:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 199:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* This will run before the control task, so the first thing it does is
 200:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	suspend - the control task will resume it when ready. */
 201:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 202:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 203:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 204:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 205:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Just count up to a value then suspend. */
 206:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		( *pulCounter )++;	
 207:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		
 208:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 209:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 210:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 211:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		} 	
 212:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 213:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 214:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 215:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 216:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 217:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Just keep counting the shared variable up.  The control task will suspend
 218:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * this task when it wants.
 219:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 220:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
 221:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 222:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** unsigned long *pulCounter;
 223:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** unsigned portBASE_TYPE uxOurPriority;
 224:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 225:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 226:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	the task. */
 227:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	pulCounter = ( unsigned long * ) pvParameters;
 228:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 229:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Query our priority so we can raise it when exclusive access to the 
 230:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	shared variable is required. */
 231:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 232:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 233:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 234:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 235:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Raise our priority above the controller task to ensure a context
 236:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		switch does not occur while we are accessing this variable. */
 237:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 238:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			( *pulCounter )++;		
 239:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 240:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 241:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 242:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 243:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 244:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 245:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Controller task as described above.
 246:../FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 247:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vCounterControlTask, pvParameters )
 248:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 249:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** unsigned long ulLastCounter;
 250:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** short sLoops;
 251:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** short sError = pdFALSE;
 252:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 253:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 254:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 255:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 256:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 257:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 258:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Start with the counter at zero. */
 259:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 260:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 261:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* First section : */
 262:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 263:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Check the continuous count task is running. */
 264:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 265:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 266:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Suspend the continuous count task so we can take a mirror of the
 267:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			shared variable without risk of corruption. */
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 269:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 271:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			
 272:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Now delay to ensure the other task has processor time. */
 273:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 274:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 275:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Check the shared variable again.  This time to ensure mutual 
 276:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			exclusion the whole scheduler will be locked.  This is just for
 277:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			demo purposes! */
 278:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 279:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 280:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 281:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 282:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					/* The shared variable has not changed.  There is a problem
 283:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					with the continuous count task so flag an error. */
 284:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 285:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 286:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 287:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 288:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 289:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 290:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 291:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Second section: */
 292:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 293:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Suspend the continuous counter task so it stops accessing the shared variable. */
 294:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskSuspend( xContinousIncrementHandle );
 295:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 296:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Reset the variable. */
 297:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 298:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 299:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Resume the limited count task which has a higher priority than us.
 300:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		We should therefore not return from this call until the limited count
 301:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		task has suspended itself with a known value in the counter variable. */
 302:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 303:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 304:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Does the counter variable have the expected value? */
 305:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 306:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 307:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			sError = pdTRUE;
 308:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 309:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 310:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( sError == pdFALSE )
 311:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 312:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* If no errors have occurred then increment the check variable. */
 313:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			portENTER_CRITICAL();
 314:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				usCheckVariable++;
 315:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 316:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 317:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 318:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Resume the continuous count task and do it all again. */
 319:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xContinousIncrementHandle );
 320:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 321:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 322:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 323:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 324:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
 325:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 326:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static unsigned long ulValueToSend = ( unsigned long ) 0;
 327:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 328:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 329:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 330:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 331:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 332:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 333:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskSuspendAll();
 334:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 335:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* We must not block while the scheduler is suspended! */
 336:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 337:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 338:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 339:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 340:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 341:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xTaskResumeAll();
 342:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 343:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 344:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 345:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		++ulValueToSend;
 346:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 347:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 348:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 349:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 350:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
 351:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
  26              		.loc 1 351 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 9, -8
  36              		.cfi_offset 8, -12
  37              		.cfi_offset 7, -16
  38              		.cfi_offset 6, -20
  39              		.cfi_offset 5, -24
  40              		.cfi_offset 4, -28
  41              		.cfi_offset 3, -32
  42 0004 40F20004 		movw	r4, #:lower16:xSuspendedTestQueue
  43 0008 40F20005 		movw	r5, #:lower16:.LANCHOR1
  44 000c 40F20007 		movw	r7, #:lower16:.LANCHOR2
  45 0010 40F20008 		movw	r8, #:lower16:.LANCHOR0
  46 0014 C0F20004 		movt	r4, #:upper16:xSuspendedTestQueue
  47 0018 C0F20005 		movt	r5, #:upper16:.LANCHOR1
  48 001c C0F20007 		movt	r7, #:upper16:.LANCHOR2
  49 0020 C0F20008 		movt	r8, #:upper16:.LANCHOR0
 352:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static unsigned long ulExpectedValue = ( unsigned long ) 0, ulReceivedValue;
 353:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** portBASE_TYPE xGotValue;
 354:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 355:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 356:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 357:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 358:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 359:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 360:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		do
 361:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 362:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Suspending the scheduler here is fairly pointless and 
 363:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			undesirable for a normal application.  It is done here purely
 364:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			to test the scheduler.  The inner xTaskResumeAll() should
 365:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			never return pdTRUE as the scheduler is still locked by the
 366:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			outer call. */
 367:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 368:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 369:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				vTaskSuspendAll();
 370:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 371:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 372:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 373:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( xTaskResumeAll() )
 374:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 375:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
  50              		.loc 1 375 0
  51 0024 0126     		movs	r6, #1
  52              	.LVL1:
  53              	.L8:
 367:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
  54              		.loc 1 367 0
  55 0026 FFF7FEFF 		bl	vTaskSuspendAll
 369:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				vTaskSuspendAll();
  56              		.loc 1 369 0
  57 002a FFF7FEFF 		bl	vTaskSuspendAll
 371:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
  58              		.loc 1 371 0
  59 002e 0022     		movs	r2, #0
  60 0030 40F20001 		movw	r1, #:lower16:.LANCHOR0
  61 0034 C0F20001 		movt	r1, #:upper16:.LANCHOR0
  62 0038 1346     		mov	r3, r2
  63 003a 2068     		ldr	r0, [r4, #0]
  64 003c FFF7FEFF 		bl	xQueueGenericReceive
  65 0040 8146     		mov	r9, r0
  66              	.LVL2:
 373:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( xTaskResumeAll() )
  67              		.loc 1 373 0
  68 0042 FFF7FEFF 		bl	xTaskResumeAll
  69              	.LVL3:
  70 0046 00B1     		cbz	r0, .L2
  71              		.loc 1 375 0
  72 0048 2E60     		str	r6, [r5, #0]
  73              	.L2:
 376:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 377:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 378:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
  74              		.loc 1 378 0
  75 004a FFF7FEFF 		bl	xTaskResumeAll
 379:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 380:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#if configUSE_PREEMPTION == 0
 381:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 382:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				taskYIELD();
 383:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 384:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#endif
 385:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 386:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
  76              		.loc 1 386 0
  77 004e B9F1000F 		cmp	r9, #0
  78 0052 E8D0     		beq	.L8
 387:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 388:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
  79              		.loc 1 388 0
  80 0054 3B68     		ldr	r3, [r7, #0]
  81 0056 D8F80010 		ldr	r1, [r8, #0]
 389:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 390:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 391:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 392:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 393:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		++ulExpectedValue;
  82              		.loc 1 393 0
  83 005a 5A1C     		adds	r2, r3, #1
 388:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
  84              		.loc 1 388 0
  85 005c 9942     		cmp	r1, r3
 390:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
  86              		.loc 1 390 0
  87 005e 18BF     		it	ne
  88 0060 2E60     		strne	r6, [r5, #0]
  89              		.loc 1 393 0
  90 0062 3A60     		str	r2, [r7, #0]
 394:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
  91              		.loc 1 394 0
  92 0064 DFE7     		b	.L8
  93              		.cfi_endproc
  94              	.LFE5:
  96 0066 00BF     		.section	.text.vQueueSendWhenSuspendedTask,"ax",%progbits
  97              		.align	2
  98              		.thumb
  99              		.thumb_func
 101              	vQueueSendWhenSuspendedTask:
 102              	.LFB4:
 325:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 103              		.loc 1 325 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              	.LVL4:
 108 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 109              	.LCFI1:
 110              		.cfi_def_cfa_offset 24
 111              		.cfi_offset 14, -4
 112              		.cfi_offset 7, -8
 113              		.cfi_offset 6, -12
 114              		.cfi_offset 5, -16
 115              		.cfi_offset 4, -20
 116              		.cfi_offset 3, -24
 117 0002 40F20005 		movw	r5, #:lower16:xSuspendedTestQueue
 118 0006 40F20006 		movw	r6, #:lower16:.LANCHOR4
 119 000a 40F20004 		movw	r4, #:lower16:.LANCHOR3
 120 000e C0F20005 		movt	r5, #:upper16:xSuspendedTestQueue
 121 0012 C0F20006 		movt	r6, #:upper16:.LANCHOR4
 122 0016 C0F20004 		movt	r4, #:upper16:.LANCHOR3
 338:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 123              		.loc 1 338 0
 124 001a 0127     		movs	r7, #1
 125              	.LVL5:
 126              	.L12:
 333:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskSuspendAll();
 127              		.loc 1 333 0
 128 001c FFF7FEFF 		bl	vTaskSuspendAll
 336:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 129              		.loc 1 336 0
 130 0020 0022     		movs	r2, #0
 131 0022 40F20001 		movw	r1, #:lower16:.LANCHOR3
 132 0026 1346     		mov	r3, r2
 133 0028 C0F20001 		movt	r1, #:upper16:.LANCHOR3
 134 002c 2868     		ldr	r0, [r5, #0]
 135 002e FFF7FEFF 		bl	xQueueGenericSend
 136 0032 0128     		cmp	r0, #1
 338:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 137              		.loc 1 338 0
 138 0034 18BF     		it	ne
 139 0036 3760     		strne	r7, [r6, #0]
 341:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xTaskResumeAll();
 140              		.loc 1 341 0
 141 0038 FFF7FEFF 		bl	xTaskResumeAll
 343:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 142              		.loc 1 343 0
 143 003c 8020     		movs	r0, #128
 144 003e FFF7FEFF 		bl	vTaskDelay
 345:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		++ulValueToSend;
 145              		.loc 1 345 0
 146 0042 2068     		ldr	r0, [r4, #0]
 147 0044 431C     		adds	r3, r0, #1
 148 0046 2360     		str	r3, [r4, #0]
 346:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 149              		.loc 1 346 0
 150 0048 E8E7     		b	.L12
 151              		.cfi_endproc
 152              	.LFE4:
 154 004a 00BF     		.section	.text.vLimitedIncrementTask,"ax",%progbits
 155              		.align	2
 156              		.thumb
 157              		.thumb_func
 159              	vLimitedIncrementTask:
 160              	.LFB1:
 192:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 161              		.loc 1 192 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL6:
 166 0000 10B5     		push	{r4, lr}
 167              	.LCFI2:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 14, -4
 170              		.cfi_offset 4, -8
 192:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 171              		.loc 1 192 0
 172 0002 0446     		mov	r4, r0
 173              	.LVL7:
 201:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 174              		.loc 1 201 0
 175 0004 0020     		movs	r0, #0
 176              	.LVL8:
 177 0006 FFF7FEFF 		bl	vTaskSuspend
 178              	.LVL9:
 179              	.L15:
 180 000a 2268     		ldr	r2, [r4, #0]
 206:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		( *pulCounter )++;	
 181              		.loc 1 206 0
 182 000c 531C     		adds	r3, r2, #1
 208:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 183              		.loc 1 208 0
 184 000e FE2B     		cmp	r3, #254
 185 0010 02F00102 		and	r2, r2, #1
 186 0014 06D8     		bhi	.L22
 187 0016 12B1     		cbz	r2, .L14
 206:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		( *pulCounter )++;	
 188              		.loc 1 206 0
 189 0018 0133     		adds	r3, r3, #1
 208:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 190              		.loc 1 208 0
 191 001a FE2B     		cmp	r3, #254
 192 001c 02D8     		bhi	.L22
 193              	.L14:
 206:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		( *pulCounter )++;	
 194              		.loc 1 206 0
 195 001e 0233     		adds	r3, r3, #2
 208:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 196              		.loc 1 208 0
 197 0020 FE2B     		cmp	r3, #254
 198 0022 FCD9     		bls	.L14
 199              	.L22:
 200 0024 2360     		str	r3, [r4, #0]
 210:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 201              		.loc 1 210 0
 202 0026 0020     		movs	r0, #0
 203 0028 FFF7FEFF 		bl	vTaskSuspend
 204 002c EDE7     		b	.L15
 205              		.cfi_endproc
 206              	.LFE1:
 208 002e 00BF     		.section	.text.vCounterControlTask,"ax",%progbits
 209              		.align	2
 210              		.thumb
 211              		.thumb_func
 213              	vCounterControlTask:
 214              	.LFB3:
 248:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 215              		.loc 1 248 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL10:
 220 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 221              	.LCFI3:
 222              		.cfi_def_cfa_offset 40
 223              		.cfi_offset 14, -4
 224              		.cfi_offset 11, -8
 225              		.cfi_offset 10, -12
 226              		.cfi_offset 9, -16
 227              		.cfi_offset 8, -20
 228              		.cfi_offset 7, -24
 229              		.cfi_offset 6, -28
 230              		.cfi_offset 5, -32
 231              		.cfi_offset 4, -36
 232              		.cfi_offset 3, -40
 251:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** short sError = pdFALSE;
 233              		.loc 1 251 0
 234 0004 0026     		movs	r6, #0
 235 0006 40F20004 		movw	r4, #:lower16:.LANCHOR5
 236 000a 40F20005 		movw	r5, #:lower16:.LANCHOR6
 237 000e 40F2000A 		movw	sl, #:lower16:.LANCHOR7
 238 0012 40F2000B 		movw	fp, #:lower16:.LANCHOR8
 239 0016 C0F20004 		movt	r4, #:upper16:.LANCHOR5
 240 001a C0F20005 		movt	r5, #:upper16:.LANCHOR6
 241 001e C0F2000A 		movt	sl, #:upper16:.LANCHOR7
 242 0022 C0F2000B 		movt	fp, #:upper16:.LANCHOR8
 259:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 243              		.loc 1 259 0
 244 0026 3746     		mov	r7, r6
 245              	.LVL11:
 246              	.L30:
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 247              		.loc 1 268 0
 248 0028 2868     		ldr	r0, [r5, #0]
 259:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 249              		.loc 1 259 0
 250 002a 2760     		str	r7, [r4, #0]
 251              	.LVL12:
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 252              		.loc 1 268 0
 253 002c FFF7FEFF 		bl	vTaskSuspend
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 254              		.loc 1 270 0
 255 0030 2868     		ldr	r0, [r5, #0]
 269:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 256              		.loc 1 269 0
 257 0032 D4F80080 		ldr	r8, [r4, #0]
 258              	.LVL13:
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 259              		.loc 1 270 0
 260 0036 FFF7FEFF 		bl	vTaskResume
 261              	.LVL14:
 273:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 262              		.loc 1 273 0
 263 003a 8020     		movs	r0, #128
 264 003c FFF7FEFF 		bl	vTaskDelay
 278:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 265              		.loc 1 278 0
 266 0040 FFF7FEFF 		bl	vTaskSuspendAll
 280:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 267              		.loc 1 280 0
 268 0044 2068     		ldr	r0, [r4, #0]
 284:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 269              		.loc 1 284 0
 270 0046 8045     		cmp	r8, r0
 271 0048 08BF     		it	eq
 272 004a 0126     		moveq	r6, #1
 273              	.LVL15:
 287:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 274              		.loc 1 287 0
 275 004c FFF7FEFF 		bl	xTaskResumeAll
 276              	.LVL16:
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 277              		.loc 1 268 0
 278 0050 2868     		ldr	r0, [r5, #0]
 279 0052 FFF7FEFF 		bl	vTaskSuspend
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 280              		.loc 1 270 0
 281 0056 2868     		ldr	r0, [r5, #0]
 269:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 282              		.loc 1 269 0
 283 0058 D4F80090 		ldr	r9, [r4, #0]
 284              	.LVL17:
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 285              		.loc 1 270 0
 286 005c FFF7FEFF 		bl	vTaskResume
 287              	.LVL18:
 273:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 288              		.loc 1 273 0
 289 0060 8020     		movs	r0, #128
 290 0062 FFF7FEFF 		bl	vTaskDelay
 278:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 291              		.loc 1 278 0
 292 0066 FFF7FEFF 		bl	vTaskSuspendAll
 280:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 293              		.loc 1 280 0
 294 006a 2368     		ldr	r3, [r4, #0]
 284:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 295              		.loc 1 284 0
 296 006c 9945     		cmp	r9, r3
 297 006e 08BF     		it	eq
 298 0070 0126     		moveq	r6, #1
 287:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 299              		.loc 1 287 0
 300 0072 FFF7FEFF 		bl	xTaskResumeAll
 301              	.LVL19:
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 302              		.loc 1 268 0
 303 0076 2868     		ldr	r0, [r5, #0]
 304 0078 FFF7FEFF 		bl	vTaskSuspend
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 305              		.loc 1 270 0
 306 007c 2868     		ldr	r0, [r5, #0]
 269:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 307              		.loc 1 269 0
 308 007e D4F80080 		ldr	r8, [r4, #0]
 309              	.LVL20:
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 310              		.loc 1 270 0
 311 0082 FFF7FEFF 		bl	vTaskResume
 312              	.LVL21:
 273:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 313              		.loc 1 273 0
 314 0086 8020     		movs	r0, #128
 315 0088 FFF7FEFF 		bl	vTaskDelay
 278:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 316              		.loc 1 278 0
 317 008c FFF7FEFF 		bl	vTaskSuspendAll
 280:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 318              		.loc 1 280 0
 319 0090 2268     		ldr	r2, [r4, #0]
 284:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 320              		.loc 1 284 0
 321 0092 9045     		cmp	r8, r2
 322 0094 14BF     		ite	ne
 323 0096 B146     		movne	r9, r6
 324 0098 4FF00109 		moveq	r9, #1
 287:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 325              		.loc 1 287 0
 326 009c FFF7FEFF 		bl	xTaskResumeAll
 327              	.LVL22:
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 328              		.loc 1 268 0
 329 00a0 2868     		ldr	r0, [r5, #0]
 330 00a2 FFF7FEFF 		bl	vTaskSuspend
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 331              		.loc 1 270 0
 332 00a6 2868     		ldr	r0, [r5, #0]
 269:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 333              		.loc 1 269 0
 334 00a8 2668     		ldr	r6, [r4, #0]
 335              	.LVL23:
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 336              		.loc 1 270 0
 337 00aa FFF7FEFF 		bl	vTaskResume
 338              	.LVL24:
 273:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 339              		.loc 1 273 0
 340 00ae 8020     		movs	r0, #128
 341 00b0 FFF7FEFF 		bl	vTaskDelay
 278:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 342              		.loc 1 278 0
 343 00b4 FFF7FEFF 		bl	vTaskSuspendAll
 280:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 344              		.loc 1 280 0
 345 00b8 2168     		ldr	r1, [r4, #0]
 284:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 346              		.loc 1 284 0
 347 00ba 8E42     		cmp	r6, r1
 348 00bc 14BF     		ite	ne
 349 00be C846     		movne	r8, r9
 350 00c0 4FF00108 		moveq	r8, #1
 287:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 351              		.loc 1 287 0
 352 00c4 FFF7FEFF 		bl	xTaskResumeAll
 353              	.LVL25:
 268:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinousIncrementHandle );
 354              		.loc 1 268 0
 355 00c8 2868     		ldr	r0, [r5, #0]
 356 00ca FFF7FEFF 		bl	vTaskSuspend
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 357              		.loc 1 270 0
 358 00ce 2868     		ldr	r0, [r5, #0]
 269:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 359              		.loc 1 269 0
 360 00d0 2668     		ldr	r6, [r4, #0]
 361              	.LVL26:
 270:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinousIncrementHandle );
 362              		.loc 1 270 0
 363 00d2 FFF7FEFF 		bl	vTaskResume
 364              	.LVL27:
 273:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 365              		.loc 1 273 0
 366 00d6 8020     		movs	r0, #128
 367 00d8 FFF7FEFF 		bl	vTaskDelay
 278:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 368              		.loc 1 278 0
 369 00dc FFF7FEFF 		bl	vTaskSuspendAll
 280:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 370              		.loc 1 280 0
 371 00e0 2068     		ldr	r0, [r4, #0]
 284:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 372              		.loc 1 284 0
 373 00e2 8642     		cmp	r6, r0
 374 00e4 14BF     		ite	ne
 375 00e6 4646     		movne	r6, r8
 376 00e8 0126     		moveq	r6, #1
 377              	.LVL28:
 287:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 378              		.loc 1 287 0
 379 00ea FFF7FEFF 		bl	xTaskResumeAll
 380              	.LVL29:
 294:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskSuspend( xContinousIncrementHandle );
 381              		.loc 1 294 0
 382 00ee 2868     		ldr	r0, [r5, #0]
 383 00f0 FFF7FEFF 		bl	vTaskSuspend
 302:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 384              		.loc 1 302 0
 385 00f4 DAF80000 		ldr	r0, [sl, #0]
 297:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 386              		.loc 1 297 0
 387 00f8 2760     		str	r7, [r4, #0]
 302:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 388              		.loc 1 302 0
 389 00fa FFF7FEFF 		bl	vTaskResume
 305:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 390              		.loc 1 305 0
 391 00fe 2368     		ldr	r3, [r4, #0]
 392 0100 FF2B     		cmp	r3, #255
 393 0102 04D0     		beq	.L38
 394              	.LVL30:
 395              	.L37:
 310:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( sError == pdFALSE )
 396              		.loc 1 310 0
 397 0104 0126     		movs	r6, #1
 398              	.L29:
 319:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xContinousIncrementHandle );
 399              		.loc 1 319 0
 400 0106 2868     		ldr	r0, [r5, #0]
 401 0108 FFF7FEFF 		bl	vTaskResume
 320:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 402              		.loc 1 320 0
 403 010c 8CE7     		b	.L30
 404              	.LVL31:
 405              	.L38:
 310:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( sError == pdFALSE )
 406              		.loc 1 310 0
 407 010e 002E     		cmp	r6, #0
 408 0110 F8D1     		bne	.L37
 313:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			portENTER_CRITICAL();
 409              		.loc 1 313 0
 410 0112 FFF7FEFF 		bl	vPortEnterCritical
 314:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				usCheckVariable++;
 411              		.loc 1 314 0
 412 0116 BBF80020 		ldrh	r2, [fp, #0]
 413 011a 511C     		adds	r1, r2, #1
 414 011c ABF80010 		strh	r1, [fp, #0]	@ movhi
 315:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 415              		.loc 1 315 0
 416 0120 FFF7FEFF 		bl	vPortExitCritical
 417 0124 EFE7     		b	.L29
 418              		.cfi_endproc
 419              	.LFE3:
 421 0126 00BF     		.section	.text.vContinuousIncrementTask,"ax",%progbits
 422              		.align	2
 423              		.thumb
 424              		.thumb_func
 426              	vContinuousIncrementTask:
 427              	.LFB2:
 221:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 428              		.loc 1 221 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              	.LVL32:
 433 0000 70B5     		push	{r4, r5, r6, lr}
 434              	.LCFI4:
 435              		.cfi_def_cfa_offset 16
 436              		.cfi_offset 14, -4
 437              		.cfi_offset 6, -8
 438              		.cfi_offset 5, -12
 439              		.cfi_offset 4, -16
 221:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 440              		.loc 1 221 0
 441 0002 0446     		mov	r4, r0
 442              	.LVL33:
 231:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 443              		.loc 1 231 0
 444 0004 0020     		movs	r0, #0
 445              	.LVL34:
 446 0006 FFF7FEFF 		bl	uxTaskPriorityGet
 447 000a 0546     		mov	r5, r0
 448              	.LVL35:
 449 000c 461C     		adds	r6, r0, #1
 450              	.LVL36:
 451              	.L40:
 237:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 452              		.loc 1 237 0 discriminator 1
 453 000e 3146     		mov	r1, r6
 454 0010 0020     		movs	r0, #0
 455 0012 FFF7FEFF 		bl	vTaskPrioritySet
 238:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			( *pulCounter )++;		
 456              		.loc 1 238 0 discriminator 1
 457 0016 2168     		ldr	r1, [r4, #0]
 239:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 458              		.loc 1 239 0 discriminator 1
 459 0018 0020     		movs	r0, #0
 238:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			( *pulCounter )++;		
 460              		.loc 1 238 0 discriminator 1
 461 001a 4B1C     		adds	r3, r1, #1
 462 001c 2360     		str	r3, [r4, #0]
 239:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 463              		.loc 1 239 0 discriminator 1
 464 001e 2946     		mov	r1, r5
 465 0020 FFF7FEFF 		bl	vTaskPrioritySet
 466 0024 F3E7     		b	.L40
 467              		.cfi_endproc
 468              	.LFE2:
 470 0026 00BF     		.section	.text.vStartDynamicPriorityTasks,"ax",%progbits
 471              		.align	2
 472              		.global	vStartDynamicPriorityTasks
 473              		.thumb
 474              		.thumb_func
 476              	vStartDynamicPriorityTasks:
 477              	.LFB0:
 168:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 478              		.loc 1 168 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482 0000 70B5     		push	{r4, r5, r6, lr}
 483              	.LCFI5:
 484              		.cfi_def_cfa_offset 16
 485              		.cfi_offset 14, -4
 486              		.cfi_offset 6, -8
 487              		.cfi_offset 5, -12
 488              		.cfi_offset 4, -16
 169:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
 489              		.loc 1 169 0
 490 0002 0421     		movs	r1, #4
 168:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 491              		.loc 1 168 0
 492 0004 84B0     		sub	sp, sp, #16
 493              	.LCFI6:
 494              		.cfi_def_cfa_offset 32
 169:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
 495              		.loc 1 169 0
 496 0006 0022     		movs	r2, #0
 497 0008 0120     		movs	r0, #1
 498 000a FFF7FEFF 		bl	xQueueGenericCreate
 499 000e 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 500 0012 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 179:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulC
 501              		.loc 1 179 0
 502 0016 40F20005 		movw	r5, #:lower16:.LANCHOR5
 169:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
 503              		.loc 1 169 0
 504 001a 1860     		str	r0, [r3, #0]
 179:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulC
 505              		.loc 1 179 0
 506 001c C0F20005 		movt	r5, #:upper16:.LANCHOR5
 507 0020 40F20006 		movw	r6, #:lower16:.LANCHOR6
 508 0024 40F20000 		movw	r0, #:lower16:vContinuousIncrementTask
 509 0028 40F20001 		movw	r1, #:lower16:.LC0
 510 002c 0024     		movs	r4, #0
 511 002e 7822     		movs	r2, #120
 512 0030 2B46     		mov	r3, r5
 513 0032 C0F20006 		movt	r6, #:upper16:.LANCHOR6
 514 0036 C0F20001 		movt	r1, #:upper16:.LC0
 515 003a C0F20000 		movt	r0, #:upper16:vContinuousIncrementTask
 516 003e 8DE85000 		stmia	sp, {r4, r6}
 517 0042 0294     		str	r4, [sp, #8]
 518 0044 0394     		str	r4, [sp, #12]
 180:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCoun
 519              		.loc 1 180 0
 520 0046 40F20006 		movw	r6, #:lower16:.LANCHOR7
 179:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulC
 521              		.loc 1 179 0
 522 004a FFF7FEFF 		bl	xTaskGenericCreate
 180:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCoun
 523              		.loc 1 180 0
 524 004e 40F20000 		movw	r0, #:lower16:vLimitedIncrementTask
 525 0052 40F20001 		movw	r1, #:lower16:.LC1
 526 0056 7822     		movs	r2, #120
 527 0058 2B46     		mov	r3, r5
 528 005a C0F20006 		movt	r6, #:upper16:.LANCHOR7
 529 005e C0F20001 		movt	r1, #:upper16:.LC1
 530 0062 0125     		movs	r5, #1
 531 0064 C0F20000 		movt	r0, #:upper16:vLimitedIncrementTask
 532 0068 8DE86000 		stmia	sp, {r5, r6}
 533 006c 0294     		str	r4, [sp, #8]
 534 006e 0394     		str	r4, [sp, #12]
 535 0070 FFF7FEFF 		bl	xTaskGenericCreate
 181:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vCounterControlTask, ( signed char * ) "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORIT
 536              		.loc 1 181 0
 537 0074 40F20000 		movw	r0, #:lower16:vCounterControlTask
 538 0078 40F20001 		movw	r1, #:lower16:.LC2
 539 007c 7822     		movs	r2, #120
 540 007e 2346     		mov	r3, r4
 541 0080 C0F20001 		movt	r1, #:upper16:.LC2
 542 0084 C0F20000 		movt	r0, #:upper16:vCounterControlTask
 543 0088 0094     		str	r4, [sp, #0]
 544 008a 0194     		str	r4, [sp, #4]
 545 008c 0294     		str	r4, [sp, #8]
 546 008e 0394     		str	r4, [sp, #12]
 547 0090 FFF7FEFF 		bl	xTaskGenericCreate
 182:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueSendWhenSuspendedTask, ( signed char * ) "SUSP_TX", priSTACK_SIZE, NULL, tskIDL
 548              		.loc 1 182 0
 549 0094 40F20000 		movw	r0, #:lower16:vQueueSendWhenSuspendedTask
 550 0098 40F20001 		movw	r1, #:lower16:.LC3
 551 009c 7822     		movs	r2, #120
 552 009e 2346     		mov	r3, r4
 553 00a0 C0F20001 		movt	r1, #:upper16:.LC3
 554 00a4 C0F20000 		movt	r0, #:upper16:vQueueSendWhenSuspendedTask
 555 00a8 0094     		str	r4, [sp, #0]
 556 00aa 0194     		str	r4, [sp, #4]
 557 00ac 0294     		str	r4, [sp, #8]
 558 00ae 0394     		str	r4, [sp, #12]
 559 00b0 FFF7FEFF 		bl	xTaskGenericCreate
 183:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueReceiveWhenSuspendedTask, ( signed char * ) "SUSP_RX", priSTACK_SIZE, NULL, tsk
 560              		.loc 1 183 0
 561 00b4 40F20000 		movw	r0, #:lower16:vQueueReceiveWhenSuspendedTask
 562 00b8 40F20001 		movw	r1, #:lower16:.LC4
 563 00bc C0F20001 		movt	r1, #:upper16:.LC4
 564 00c0 7822     		movs	r2, #120
 565 00c2 2346     		mov	r3, r4
 566 00c4 C0F20000 		movt	r0, #:upper16:vQueueReceiveWhenSuspendedTask
 567 00c8 0094     		str	r4, [sp, #0]
 568 00ca 0194     		str	r4, [sp, #4]
 569 00cc 0294     		str	r4, [sp, #8]
 570 00ce 0394     		str	r4, [sp, #12]
 571 00d0 FFF7FEFF 		bl	xTaskGenericCreate
 184:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 572              		.loc 1 184 0
 573 00d4 04B0     		add	sp, sp, #16
 574 00d6 70BD     		pop	{r4, r5, r6, pc}
 575              		.cfi_endproc
 576              	.LFE0:
 578              		.section	.text.xAreDynamicPriorityTasksStillRunning,"ax",%progbits
 579              		.align	2
 580              		.global	xAreDynamicPriorityTasksStillRunning
 581              		.thumb
 582              		.thumb_func
 584              	xAreDynamicPriorityTasksStillRunning:
 585              	.LFB6:
 395:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 396:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 397:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 398:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Called to check that all the created tasks are still running without error. */
 399:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
 400:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 586              		.loc 1 400 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              		@ link register save eliminated.
 591              	.LVL37:
 592 0000 10B4     		push	{r4}
 593              	.LCFI7:
 594              		.cfi_def_cfa_offset 4
 595              		.cfi_offset 4, -4
 401:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Keep a history of the check variables so we know if it has been incremented 
 402:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** since the last call. */
 403:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** static unsigned short usLastTaskCheck = ( unsigned short ) 0;
 404:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** portBASE_TYPE xReturn = pdTRUE;
 405:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 406:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Check the tasks are still running by ensuring the check variable
 407:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	is still incrementing. */
 408:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 409:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 596              		.loc 1 409 0
 597 0002 40F20002 		movw	r2, #:lower16:.LANCHOR8
 410:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 411:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* The check has not incremented so an error exists. */
 412:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 413:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 414:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 415:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( xSuspendedQueueSendError == pdTRUE )
 598              		.loc 1 415 0
 599 0006 40F20004 		movw	r4, #:lower16:.LANCHOR4
 600 000a C0F20004 		movt	r4, #:upper16:.LANCHOR4
 409:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 601              		.loc 1 409 0
 602 000e C0F20002 		movt	r2, #:upper16:.LANCHOR8
 603 0012 1088     		ldrh	r0, [r2, #0]
 604              		.loc 1 415 0
 605 0014 2168     		ldr	r1, [r4, #0]
 409:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 606              		.loc 1 409 0
 607 0016 40F20003 		movw	r3, #:lower16:.LANCHOR9
 608 001a C0F20003 		movt	r3, #:upper16:.LANCHOR9
 609              		.loc 1 415 0
 610 001e 0129     		cmp	r1, #1
 409:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 611              		.loc 1 409 0
 612 0020 80B2     		uxth	r0, r0
 613 0022 1C88     		ldrh	r4, [r3, #0]
 614              	.LVL38:
 615              		.loc 1 415 0
 616 0024 0FD0     		beq	.L45
 404:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** portBASE_TYPE xReturn = pdTRUE;
 617              		.loc 1 404 0
 618 0026 001B     		subs	r0, r0, r4
 619              	.LVL39:
 620 0028 18BF     		it	ne
 621 002a 0120     		movne	r0, #1
 622              	.L43:
 623              	.LVL40:
 416:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 417:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 418:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 419:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 420:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( xSuspendedQueueReceiveError == pdTRUE )
 624              		.loc 1 420 0
 625 002c 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 626 0030 C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 627 0034 DCF80010 		ldr	r1, [ip, #0]
 421:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 422:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 423:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 424:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 425:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 628              		.loc 1 425 0
 629 0038 1288     		ldrh	r2, [r2, #0]
 426:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	return xReturn;
 427:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 630              		.loc 1 427 0
 631 003a 0129     		cmp	r1, #1
 632 003c 08BF     		it	eq
 633 003e 0020     		moveq	r0, #0
 634              	.LVL41:
 425:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 635              		.loc 1 425 0
 636 0040 1A80     		strh	r2, [r3, #0]	@ movhi
 637              		.loc 1 427 0
 638 0042 10BC     		pop	{r4}
 639 0044 7047     		bx	lr
 640              	.LVL42:
 641              	.L45:
 417:../FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 642              		.loc 1 417 0
 643 0046 0020     		movs	r0, #0
 644              	.LVL43:
 645 0048 F0E7     		b	.L43
 646              		.cfi_endproc
 647              	.LFE6:
 649              		.comm	xSuspendedTestQueue,4,4
 650 004a 00BF     		.section	.bss.usCheckVariable,"aw",%nobits
 651              		.align	1
 652              		.set	.LANCHOR8,. + 0
 655              	usCheckVariable:
 656 0000 0000     		.space	2
 657              		.section	.bss.xLimitedIncrementHandle,"aw",%nobits
 658              		.align	2
 659              		.set	.LANCHOR7,. + 0
 662              	xLimitedIncrementHandle:
 663 0000 00000000 		.space	4
 664              		.section	.bss.xSuspendedQueueSendError,"aw",%nobits
 665              		.align	2
 666              		.set	.LANCHOR4,. + 0
 669              	xSuspendedQueueSendError:
 670 0000 00000000 		.space	4
 671              		.section	.bss.ulValueToSend.4806,"aw",%nobits
 672              		.align	2
 673              		.set	.LANCHOR3,. + 0
 676              	ulValueToSend.4806:
 677 0000 00000000 		.space	4
 678              		.section	.bss.ulReceivedValue.4812,"aw",%nobits
 679              		.align	2
 680              		.set	.LANCHOR0,. + 0
 683              	ulReceivedValue.4812:
 684 0000 00000000 		.space	4
 685              		.section	.bss.ulExpectedValue.4811,"aw",%nobits
 686              		.align	2
 687              		.set	.LANCHOR2,. + 0
 690              	ulExpectedValue.4811:
 691 0000 00000000 		.space	4
 692              		.section	.bss.usLastTaskCheck.4820,"aw",%nobits
 693              		.align	1
 694              		.set	.LANCHOR9,. + 0
 697              	usLastTaskCheck.4820:
 698 0000 0000     		.space	2
 699              		.section	.rodata.str1.4,"aMS",%progbits,1
 700              		.align	2
 701              	.LC0:
 702 0000 434E545F 		.ascii	"CNT_INC\000"
 702      494E4300 
 703              	.LC1:
 704 0008 4C494D5F 		.ascii	"LIM_INC\000"
 704      494E4300 
 705              	.LC2:
 706 0010 435F4354 		.ascii	"C_CTRL\000"
 706      524C00
 707 0017 00       		.space	1
 708              	.LC3:
 709 0018 53555350 		.ascii	"SUSP_TX\000"
 709      5F545800 
 710              	.LC4:
 711 0020 53555350 		.ascii	"SUSP_RX\000"
 711      5F525800 
 712              		.section	.bss.xSuspendedQueueReceiveError,"aw",%nobits
 713              		.align	2
 714              		.set	.LANCHOR1,. + 0
 717              	xSuspendedQueueReceiveError:
 718 0000 00000000 		.space	4
 719              		.section	.bss.ulCounter,"aw",%nobits
 720              		.align	2
 721              		.set	.LANCHOR5,. + 0
 724              	ulCounter:
 725 0000 00000000 		.space	4
 726              		.section	.bss.xContinousIncrementHandle,"aw",%nobits
 727              		.align	2
 728              		.set	.LANCHOR6,. + 0
 731              	xContinousIncrementHandle:
 732 0000 00000000 		.space	4
 733              		.text
 734              	.Letext0:
 735              		.file 2 "../FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 736              		.file 3 "../FreeRTOS/Source/include/task.h"
 737              		.file 4 "../FreeRTOS/Source/include/queue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dynamic.c
     /tmp/ccCtviRh.s:19     .text.vQueueReceiveWhenSuspendedTask:00000000 $t
     /tmp/ccCtviRh.s:23     .text.vQueueReceiveWhenSuspendedTask:00000000 vQueueReceiveWhenSuspendedTask
                            *COM*:00000004 xSuspendedTestQueue
     /tmp/ccCtviRh.s:714    .bss.xSuspendedQueueReceiveError:00000000 .LANCHOR1
     /tmp/ccCtviRh.s:687    .bss.ulExpectedValue.4811:00000000 .LANCHOR2
     /tmp/ccCtviRh.s:680    .bss.ulReceivedValue.4812:00000000 .LANCHOR0
     /tmp/ccCtviRh.s:97     .text.vQueueSendWhenSuspendedTask:00000000 $t
     /tmp/ccCtviRh.s:101    .text.vQueueSendWhenSuspendedTask:00000000 vQueueSendWhenSuspendedTask
     /tmp/ccCtviRh.s:666    .bss.xSuspendedQueueSendError:00000000 .LANCHOR4
     /tmp/ccCtviRh.s:673    .bss.ulValueToSend.4806:00000000 .LANCHOR3
     /tmp/ccCtviRh.s:155    .text.vLimitedIncrementTask:00000000 $t
     /tmp/ccCtviRh.s:159    .text.vLimitedIncrementTask:00000000 vLimitedIncrementTask
     /tmp/ccCtviRh.s:209    .text.vCounterControlTask:00000000 $t
     /tmp/ccCtviRh.s:213    .text.vCounterControlTask:00000000 vCounterControlTask
     /tmp/ccCtviRh.s:721    .bss.ulCounter:00000000 .LANCHOR5
     /tmp/ccCtviRh.s:728    .bss.xContinousIncrementHandle:00000000 .LANCHOR6
     /tmp/ccCtviRh.s:659    .bss.xLimitedIncrementHandle:00000000 .LANCHOR7
     /tmp/ccCtviRh.s:652    .bss.usCheckVariable:00000000 .LANCHOR8
     /tmp/ccCtviRh.s:422    .text.vContinuousIncrementTask:00000000 $t
     /tmp/ccCtviRh.s:426    .text.vContinuousIncrementTask:00000000 vContinuousIncrementTask
     /tmp/ccCtviRh.s:471    .text.vStartDynamicPriorityTasks:00000000 $t
     /tmp/ccCtviRh.s:476    .text.vStartDynamicPriorityTasks:00000000 vStartDynamicPriorityTasks
     /tmp/ccCtviRh.s:701    .rodata.str1.4:00000000 .LC0
     /tmp/ccCtviRh.s:703    .rodata.str1.4:00000008 .LC1
     /tmp/ccCtviRh.s:705    .rodata.str1.4:00000010 .LC2
     /tmp/ccCtviRh.s:708    .rodata.str1.4:00000018 .LC3
     /tmp/ccCtviRh.s:710    .rodata.str1.4:00000020 .LC4
     /tmp/ccCtviRh.s:579    .text.xAreDynamicPriorityTasksStillRunning:00000000 $t
     /tmp/ccCtviRh.s:584    .text.xAreDynamicPriorityTasksStillRunning:00000000 xAreDynamicPriorityTasksStillRunning
     /tmp/ccCtviRh.s:694    .bss.usLastTaskCheck.4820:00000000 .LANCHOR9
     /tmp/ccCtviRh.s:651    .bss.usCheckVariable:00000000 $d
     /tmp/ccCtviRh.s:655    .bss.usCheckVariable:00000000 usCheckVariable
     /tmp/ccCtviRh.s:658    .bss.xLimitedIncrementHandle:00000000 $d
     /tmp/ccCtviRh.s:662    .bss.xLimitedIncrementHandle:00000000 xLimitedIncrementHandle
     /tmp/ccCtviRh.s:665    .bss.xSuspendedQueueSendError:00000000 $d
     /tmp/ccCtviRh.s:669    .bss.xSuspendedQueueSendError:00000000 xSuspendedQueueSendError
     /tmp/ccCtviRh.s:672    .bss.ulValueToSend.4806:00000000 $d
     /tmp/ccCtviRh.s:676    .bss.ulValueToSend.4806:00000000 ulValueToSend.4806
     /tmp/ccCtviRh.s:679    .bss.ulReceivedValue.4812:00000000 $d
     /tmp/ccCtviRh.s:683    .bss.ulReceivedValue.4812:00000000 ulReceivedValue.4812
     /tmp/ccCtviRh.s:686    .bss.ulExpectedValue.4811:00000000 $d
     /tmp/ccCtviRh.s:690    .bss.ulExpectedValue.4811:00000000 ulExpectedValue.4811
     /tmp/ccCtviRh.s:693    .bss.usLastTaskCheck.4820:00000000 $d
     /tmp/ccCtviRh.s:697    .bss.usLastTaskCheck.4820:00000000 usLastTaskCheck.4820
     /tmp/ccCtviRh.s:700    .rodata.str1.4:00000000 $d
     /tmp/ccCtviRh.s:713    .bss.xSuspendedQueueReceiveError:00000000 $d
     /tmp/ccCtviRh.s:717    .bss.xSuspendedQueueReceiveError:00000000 xSuspendedQueueReceiveError
     /tmp/ccCtviRh.s:720    .bss.ulCounter:00000000 $d
     /tmp/ccCtviRh.s:724    .bss.ulCounter:00000000 ulCounter
     /tmp/ccCtviRh.s:727    .bss.xContinousIncrementHandle:00000000 $d
     /tmp/ccCtviRh.s:731    .bss.xContinousIncrementHandle:00000000 xContinousIncrementHandle
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xQueueGenericReceive
xTaskResumeAll
xQueueGenericSend
vTaskDelay
vTaskSuspend
vTaskResume
vPortEnterCritical
vPortExitCritical
uxTaskPriorityGet
vTaskPrioritySet
xQueueGenericCreate
xTaskGenericCreate
