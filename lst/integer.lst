   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"integer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vCompeteingIntMathTask,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	vCompeteingIntMathTask:
  24              	.LFB1:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/integer.c"
   1:../FreeRTOS/Demo/Common/Minimal/integer.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/integer.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	
   4:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/integer.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/integer.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/integer.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/integer.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/integer.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/integer.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/integer.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/integer.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/integer.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/integer.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/integer.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/integer.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/integer.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/integer.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/integer.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/integer.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/integer.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/integer.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/integer.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/integer.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/integer.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/integer.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/integer.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/integer.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/integer.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/integer.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/integer.c **** /*
  55:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * This version of integer. c is for use on systems that have limited stack
  56:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * space and no display facilities.  The complete version can be found in
  57:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * the Demo/Common/Full directory.
  58:../FreeRTOS/Demo/Common/Minimal/integer.c ****  *
  59:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * As with the full version, the tasks created in this file are a good test 
  60:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * of the scheduler context switch mechanism.  The processor has to access 
  61:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * 32bit variables in two or four chunks (depending on the processor).  The low 
  62:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * priority of these tasks means there is a high probability that a context 
  63:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * switch will occur mid calculation.  See flop. c documentation for 
  64:../FreeRTOS/Demo/Common/Minimal/integer.c ****  * more information.
  65:../FreeRTOS/Demo/Common/Minimal/integer.c ****  *
  66:../FreeRTOS/Demo/Common/Minimal/integer.c ****  */
  67:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  68:../FreeRTOS/Demo/Common/Minimal/integer.c **** /*
  69:../FreeRTOS/Demo/Common/Minimal/integer.c **** Changes from V1.2.1
  70:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  71:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	+ The constants used in the calculations are larger to ensure the
  72:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	  optimiser does not truncate them to 16 bits.
  73:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  74:../FreeRTOS/Demo/Common/Minimal/integer.c **** Changes from V1.2.3
  75:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  76:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	+ uxTaskCheck is now just used as a boolean.  Instead of incrementing
  77:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	  the variable each cycle of the task, the variable is simply set to
  78:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	  true.  sAreIntegerMathsTaskStillRunning() sets it back to false and
  79:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	  expects it to have been set back to true by the time it is called
  80:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	  again.
  81:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	+ A division has been included in the calculation.
  82:../FreeRTOS/Demo/Common/Minimal/integer.c **** */
  83:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  84:../FreeRTOS/Demo/Common/Minimal/integer.c **** #include <stdlib.h>
  85:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  86:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* Scheduler include files. */
  87:../FreeRTOS/Demo/Common/Minimal/integer.c **** #include "FreeRTOS.h"
  88:../FreeRTOS/Demo/Common/Minimal/integer.c **** #include "task.h"
  89:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  90:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* Demo program include files. */
  91:../FreeRTOS/Demo/Common/Minimal/integer.c **** #include "integer.h"
  92:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
  93:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* The constants used in the calculation. */
  94:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgCONST1				( ( long ) 123 )
  95:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgCONST2				( ( long ) 234567 )
  96:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgCONST3				( ( long ) -3 )
  97:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgCONST4				( ( long ) 7 )
  98:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
  99:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 100:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
 101:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 102:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* As this is the minimal version, we will only create one task. */
 103:../FreeRTOS/Demo/Common/Minimal/integer.c **** #define intgNUMBER_OF_TASKS		( 1 )
 104:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 105:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* The task function.  Repeatedly performs a 32 bit calculation, checking the
 106:../FreeRTOS/Demo/Common/Minimal/integer.c **** result against the expected result.  If the result is incorrect then the
 107:../FreeRTOS/Demo/Common/Minimal/integer.c **** context switch must have caused some corruption. */
 108:../FreeRTOS/Demo/Common/Minimal/integer.c **** static portTASK_FUNCTION_PROTO( vCompeteingIntMathTask, pvParameters );
 109:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 110:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* Variables that are set to true within the calculation task to indicate
 111:../FreeRTOS/Demo/Common/Minimal/integer.c **** that the task is still executing.  The check task sets the variable back to
 112:../FreeRTOS/Demo/Common/Minimal/integer.c **** false, flagging an error if the variable is still false the next time it
 113:../FreeRTOS/Demo/Common/Minimal/integer.c **** is called. */
 114:../FreeRTOS/Demo/Common/Minimal/integer.c **** static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE )
 115:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 116:../FreeRTOS/Demo/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 117:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 118:../FreeRTOS/Demo/Common/Minimal/integer.c **** void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
 119:../FreeRTOS/Demo/Common/Minimal/integer.c **** {
 120:../FreeRTOS/Demo/Common/Minimal/integer.c **** short sTask;
 121:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 122:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 123:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	{
 124:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( x
 125:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	}
 126:../FreeRTOS/Demo/Common/Minimal/integer.c **** }
 127:../FreeRTOS/Demo/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 128:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 129:../FreeRTOS/Demo/Common/Minimal/integer.c **** static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
 130:../FreeRTOS/Demo/Common/Minimal/integer.c **** {
  26              		.loc 1 130 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 8, -8
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 6, -16
  38              		.cfi_offset 5, -20
  39              		.cfi_offset 4, -24
 131:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* These variables are all effectively set to constants so they are volatile to
 132:../FreeRTOS/Demo/Common/Minimal/integer.c **** ensure the compiler does not just get rid of them. */
 133:../FreeRTOS/Demo/Common/Minimal/integer.c **** volatile long lValue;
 134:../FreeRTOS/Demo/Common/Minimal/integer.c **** short sError = pdFALSE;
 135:../FreeRTOS/Demo/Common/Minimal/integer.c **** volatile signed portBASE_TYPE *pxTaskHasExecuted;
 136:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 137:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	/* Set a pointer to the variable we are going to set to true each
 138:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	iteration.  This is also a good test of the parameter passing mechanism
 139:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	within each port. */
 140:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	pxTaskHasExecuted = ( volatile signed portBASE_TYPE * ) pvParameters;
 141:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 142:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 143:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	for( ;; )
 144:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	{
 145:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		/* Perform the calculation.  This will store partial value in
 146:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		registers, resulting in a good test of the context switch mechanism. */
 147:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue = intgCONST1;
 148:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue += intgCONST2;
 149:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 150:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 151:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 152:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		{
 153:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			taskYIELD();
 154:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		}
 155:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		#endif
 156:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 157:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		/* Finish off the calculation. */
 158:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue *= intgCONST3;
 159:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue /= intgCONST4;
  40              		.loc 1 159 0
  41 0004 42F29345 		movw	r5, #9363
 160:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 161:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		/* If the calculation is found to be incorrect we stop setting the 
 162:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		TaskHasExecuted variable so the check task can see an error has 
 163:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		occurred. */
 164:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
  42              		.loc 1 164 0
  43 0008 47F21B74 		movw	r4, #30491
 130:../FreeRTOS/Demo/Common/Minimal/integer.c **** {
  44              		.loc 1 130 0
  45 000c 82B0     		sub	sp, sp, #8
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 32
 130:../FreeRTOS/Demo/Common/Minimal/integer.c **** {
  48              		.loc 1 130 0
  49 000e 8046     		mov	r8, r0
  50              	.LVL1:
 134:../FreeRTOS/Demo/Common/Minimal/integer.c **** short sError = pdFALSE;
  51              		.loc 1 134 0
  52 0010 0026     		movs	r6, #0
 147:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue = intgCONST1;
  53              		.loc 1 147 0
  54 0012 7B27     		movs	r7, #123
 159:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue /= intgCONST4;
  55              		.loc 1 159 0
  56 0014 C9F24925 		movt	r5, 37449
  57              		.loc 1 164 0
  58 0018 CFF6FE74 		movt	r4, 65534
  59              	.LVL2:
  60              	.L6:
 147:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue = intgCONST1;
  61              		.loc 1 147 0
  62 001c 0197     		str	r7, [sp, #4]
 148:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue += intgCONST2;
  63              		.loc 1 148 0
  64 001e 019B     		ldr	r3, [sp, #4]
  65 0020 49F2474E 		movw	lr, #37959
  66              	.LVL3:
  67 0024 C0F2030E 		movt	lr, 3
  68              	.LVL4:
  69 0028 03EB0E02 		add	r2, r3, lr
  70              	.LVL5:
  71 002c 0192     		str	r2, [sp, #4]
  72              	.LVL6:
 158:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue *= intgCONST3;
  73              		.loc 1 158 0
  74 002e 0199     		ldr	r1, [sp, #4]
  75 0030 A1EB8100 		sub	r0, r1, r1, lsl #2
  76 0034 0190     		str	r0, [sp, #4]
  77              	.LVL7:
 159:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		lValue /= intgCONST4;
  78              		.loc 1 159 0
  79 0036 019B     		ldr	r3, [sp, #4]
  80 0038 85FB032C 		smull	r2, ip, r5, r3
  81 003c DA17     		asrs	r2, r3, #31
  82 003e 0CEB0301 		add	r1, ip, r3
  83 0042 C2EBA100 		rsb	r0, r2, r1, asr #2
  84              	.LVL8:
  85 0046 0190     		str	r0, [sp, #4]
  86              	.LVL9:
  87              		.loc 1 164 0
  88 0048 019B     		ldr	r3, [sp, #4]
  89 004a A342     		cmp	r3, r4
  90 004c 01D0     		beq	.L8
  91              	.LVL10:
  92              	.L5:
 165:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		{
 166:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			sError = pdTRUE;
 167:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		}
 168:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 169:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		if( sError == pdFALSE )
  93              		.loc 1 169 0
  94 004e 0126     		movs	r6, #1
  95 0050 E4E7     		b	.L6
  96              	.LVL11:
  97              	.L8:
  98 0052 002E     		cmp	r6, #0
  99 0054 FBD1     		bne	.L5
 170:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		{
 171:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			/* We have not encountered any errors, so set the flag that show
 172:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			we are still executing.  This will be periodically cleared by
 173:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			the check task. */
 174:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			portENTER_CRITICAL();
 100              		.loc 1 174 0
 101 0056 FFF7FEFF 		bl	vPortEnterCritical
 102              	.LVL12:
 175:../FreeRTOS/Demo/Common/Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 103              		.loc 1 175 0
 104 005a 0120     		movs	r0, #1
 105 005c C8F80000 		str	r0, [r8, #0]
 176:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			portEXIT_CRITICAL();
 106              		.loc 1 176 0
 107 0060 FFF7FEFF 		bl	vPortExitCritical
 108 0064 DAE7     		b	.L6
 109              		.cfi_endproc
 110              	.LFE1:
 112 0066 00BF     		.section	.text.vStartIntegerMathTasks,"ax",%progbits
 113              		.align	2
 114              		.global	vStartIntegerMathTasks
 115              		.thumb
 116              		.thumb_func
 118              	vStartIntegerMathTasks:
 119              	.LFB0:
 119:../FreeRTOS/Demo/Common/Minimal/integer.c **** {
 120              		.loc 1 119 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL13:
 125 0000 10B5     		push	{r4, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 14, -4
 129              		.cfi_offset 4, -8
 130 0002 84B0     		sub	sp, sp, #16
 131              	.LCFI3:
 132              		.cfi_def_cfa_offset 24
 124:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( x
 133              		.loc 1 124 0
 134 0004 0090     		str	r0, [sp, #0]
 135 0006 40F20001 		movw	r1, #:lower16:.LC0
 136 000a 40F20000 		movw	r0, #:lower16:vCompeteingIntMathTask
 137              	.LVL14:
 138 000e 40F20003 		movw	r3, #:lower16:.LANCHOR0
 139 0012 0024     		movs	r4, #0
 140 0014 C0F20001 		movt	r1, #:upper16:.LC0
 141 0018 7822     		movs	r2, #120
 142 001a C0F20003 		movt	r3, #:upper16:.LANCHOR0
 143 001e C0F20000 		movt	r0, #:upper16:vCompeteingIntMathTask
 144 0022 0194     		str	r4, [sp, #4]
 145 0024 0294     		str	r4, [sp, #8]
 146 0026 0394     		str	r4, [sp, #12]
 147 0028 FFF7FEFF 		bl	xTaskGenericCreate
 148              	.LVL15:
 126:../FreeRTOS/Demo/Common/Minimal/integer.c **** }
 149              		.loc 1 126 0
 150 002c 04B0     		add	sp, sp, #16
 151 002e 10BD     		pop	{r4, pc}
 152              		.cfi_endproc
 153              	.LFE0:
 155              		.section	.text.xAreIntegerMathsTaskStillRunning,"ax",%progbits
 156              		.align	2
 157              		.global	xAreIntegerMathsTaskStillRunning
 158              		.thumb
 159              		.thumb_func
 161              	xAreIntegerMathsTaskStillRunning:
 162              	.LFB2:
 177:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		}
 178:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 179:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 180:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 181:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		{
 182:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			taskYIELD();
 183:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		}
 184:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		#endif
 185:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	}
 186:../FreeRTOS/Demo/Common/Minimal/integer.c **** }
 187:../FreeRTOS/Demo/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 188:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 189:../FreeRTOS/Demo/Common/Minimal/integer.c **** /* This is called to check that all the created tasks are still running. */
 190:../FreeRTOS/Demo/Common/Minimal/integer.c **** portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
 191:../FreeRTOS/Demo/Common/Minimal/integer.c **** {
 163              		.loc 1 191 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              	.LVL16:
 192:../FreeRTOS/Demo/Common/Minimal/integer.c **** portBASE_TYPE xReturn = pdTRUE;
 193:../FreeRTOS/Demo/Common/Minimal/integer.c **** short sTask;
 194:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 195:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	/* Check the maths tasks are still running by ensuring their check variables 
 196:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	are still being set to true. */
 197:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 198:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	{
 199:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		if( xTaskCheck[ sTask ] == pdFALSE )
 169              		.loc 1 199 0
 170 0000 40F20003 		movw	r3, #:lower16:.LANCHOR0
 171 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 172 0008 1868     		ldr	r0, [r3, #0]
 173              	.LVL17:
 200:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		{
 201:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			/* The check has not incremented so an error exists. */
 202:../FreeRTOS/Demo/Common/Minimal/integer.c **** 			xReturn = pdFALSE;
 203:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		}
 204:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 205:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		/* Reset the check variable so we can tell if it has been set by
 206:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		the next time around. */
 207:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
 174              		.loc 1 207 0
 175 000a 0022     		movs	r2, #0
 208:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	}
 209:../FreeRTOS/Demo/Common/Minimal/integer.c **** 
 210:../FreeRTOS/Demo/Common/Minimal/integer.c **** 	return xReturn;
 211:../FreeRTOS/Demo/Common/Minimal/integer.c **** }
 176              		.loc 1 211 0
 177 000c 801A     		subs	r0, r0, r2
 207:../FreeRTOS/Demo/Common/Minimal/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
 178              		.loc 1 207 0
 179 000e 1A60     		str	r2, [r3, #0]
 180              	.LVL18:
 181              		.loc 1 211 0
 182 0010 18BF     		it	ne
 183 0012 0120     		movne	r0, #1
 184 0014 7047     		bx	lr
 185              		.cfi_endproc
 186              	.LFE2:
 188 0016 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 189              		.align	2
 190              	.LC0:
 191 0000 496E744D 		.ascii	"IntMath\000"
 191      61746800 
 192              		.section	.bss.xTaskCheck,"aw",%nobits
 193              		.align	2
 194              		.set	.LANCHOR0,. + 0
 197              	xTaskCheck:
 198 0000 00000000 		.space	4
 199              		.text
 200              	.Letext0:
 201              		.file 2 "../FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 integer.c
     /tmp/ccJCsGpk.s:19     .text.vCompeteingIntMathTask:00000000 $t
     /tmp/ccJCsGpk.s:23     .text.vCompeteingIntMathTask:00000000 vCompeteingIntMathTask
     /tmp/ccJCsGpk.s:113    .text.vStartIntegerMathTasks:00000000 $t
     /tmp/ccJCsGpk.s:118    .text.vStartIntegerMathTasks:00000000 vStartIntegerMathTasks
     /tmp/ccJCsGpk.s:190    .rodata.str1.4:00000000 .LC0
     /tmp/ccJCsGpk.s:194    .bss.xTaskCheck:00000000 .LANCHOR0
     /tmp/ccJCsGpk.s:156    .text.xAreIntegerMathsTaskStillRunning:00000000 $t
     /tmp/ccJCsGpk.s:161    .text.xAreIntegerMathsTaskStillRunning:00000000 xAreIntegerMathsTaskStillRunning
     /tmp/ccJCsGpk.s:189    .rodata.str1.4:00000000 $d
     /tmp/ccJCsGpk.s:193    .bss.xTaskCheck:00000000 $d
     /tmp/ccJCsGpk.s:197    .bss.xTaskCheck:00000000 xTaskCheck
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskGenericCreate
