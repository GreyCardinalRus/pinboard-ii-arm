   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"IntQueue.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvLowerPriorityNormallyEmptyTask,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	prvLowerPriorityNormallyEmptyTask:
  24              	.LFB5:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c"
   1:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
   4:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*
  55:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * This file defines one of the more complex set of demo/test tasks.  They are
  56:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * designed to stress test the queue implementation though pseudo simultaneous
  57:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * multiple reads and multiple writes from both tasks of varying priority and
  58:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * interrupts.  The interrupts are prioritised such to ensure that nesting
  59:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * occurs (for those ports that support it).
  60:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  *
  61:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * The test ensures that, while being accessed from three tasks and two
  62:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * interrupts, all the data sent to the queues is also received from
  63:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * the same queue, and that no duplicate items are either sent or received.
  64:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * The tests also ensure that a low priority task is never able to successfully
  65:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * read from or write to a queue when a task of higher priority is attempting
  66:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  * the same operation.
  67:../FreeRTOS/Demo/Common/Minimal/IntQueue.c ****  */
  68:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  69:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Standard includes. */
  70:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #include <string.h>
  71:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  72:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* SafeRTOS includes. */
  73:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #include "FreeRTOS.h"
  74:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #include "queue.h"
  75:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #include "task.h"
  76:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  77:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Demo app includes. */
  78:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #include "IntQueue.h"
  79:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #include "IntQueueTimer.h"
  80:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  81:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Priorities used by test tasks. */
  82:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #ifndef intqHIGHER_PRIORITY
  83:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	#define intqHIGHER_PRIORITY		( configMAX_PRIORITIES - 2 )
  84:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #endif
  85:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqLOWER_PRIORITY		( tskIDLE_PRIORITY )
  86:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  87:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* The number of values to send/receive before checking that all values were
  88:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** processed as expected. */
  89:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqNUM_VALUES_TO_LOG	( 200 )
  90:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqSHORT_DELAY			( 75 )
  91:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  92:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* The value by which the value being sent to or received from a queue should
  93:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** increment past intqNUM_VALUES_TO_LOG before we check that all values have been
  94:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** sent/received correctly.  This is done to ensure that all tasks and interrupts
  95:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** accessing the queue have completed their accesses with the
  96:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** intqNUM_VALUES_TO_LOG range. */
  97:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqVALUE_OVERRUN		( 50 )
  98:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
  99:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* The delay used by the polling task.  A short delay is used for code
 100:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** coverage. */
 101:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqONE_TICK_DELAY		( 1 )
 102:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 103:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Each task and interrupt is given a unique identifier.  This value is used to
 104:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** identify which task sent or received each value.  The identifier is also used
 105:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** to distinguish between two tasks that are running the same task function. */
 106:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqHIGH_PRIORITY_TASK1	( ( unsigned portBASE_TYPE ) 1 )
 107:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqHIGH_PRIORITY_TASK2	( ( unsigned portBASE_TYPE ) 2 )
 108:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqLOW_PRIORITY_TASK	( ( unsigned portBASE_TYPE ) 3 )
 109:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqFIRST_INTERRUPT		( ( unsigned portBASE_TYPE ) 4 )
 110:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqSECOND_INTERRUPT	( ( unsigned portBASE_TYPE ) 5 )
 111:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqQUEUE_LENGTH		( ( unsigned portBASE_TYPE ) 10 )
 112:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 113:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* At least intqMIN_ACCEPTABLE_TASK_COUNT values should be sent to/received
 114:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** from each queue by each task, otherwise an error is detected. */
 115:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define intqMIN_ACCEPTABLE_TASK_COUNT		( 5 )
 116:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 117:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Send the next value to the queue that is normally empty.  This is called
 118:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** from within the interrupts. */
 119:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define timerNORMALLY_EMPTY_TX()																							\
 120:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( xQueueIsQueueFullFromISR( xNormallyEmptyQueue ) != pdTRUE )															\
 121:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{																														\
 122:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;																			\
 123:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();															\
 124:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{																													\
 125:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyEmptyQueue++;																					\
 126:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			xQueueSendFromISR( xNormallyEmptyQueue, ( void * ) &uxValueForNormallyEmptyQueue, &xHigherPriori
 127:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}																													\
 128:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );														\
 129:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}																														\
 130:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 131:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Send the next value to the queue that is normally full.  This is called
 132:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** from within the interrupts. */
 133:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define timerNORMALLY_FULL_TX()																								\
 134:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( xQueueIsQueueFullFromISR( xNormallyFullQueue ) != pdTRUE )															\
 135:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{																														\
 136:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;																			\
 137:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();															\
 138:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{																													\
 139:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;																					\
 140:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			xQueueSendFromISR( xNormallyFullQueue, ( void * ) &uxValueForNormallyFullQueue, &xHigherPriority
 141:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}																													\
 142:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );														\
 143:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}																														\
 144:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 145:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Receive a value from the normally empty queue.  This is called from within
 146:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** an interrupt. */
 147:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define timerNORMALLY_EMPTY_RX()																			\
 148:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( xQueueReceiveFromISR( xNormallyEmptyQueue, &uxRxedValue, &xHigherPriorityTaskWoken ) != pdPASS
 149:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{																										\
 150:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvQueueAccessLogError( __LINE__ );																	\
 151:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}																										\
 152:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	else																									\
 153:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{																										\
 154:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvRecordValue_NormallyEmpty( uxRxedValue, intqSECOND_INTERRUPT );									\
 155:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 156:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 157:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Receive a value from the normally full queue.  This is called from within
 158:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** an interrupt. */
 159:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** #define timerNORMALLY_FULL_RX()																				\
 160:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( xQueueReceiveFromISR( xNormallyFullQueue, &uxRxedValue, &xHigherPriorityTaskWoken ) == pdPASS 
 161:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{																										\
 162:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvRecordValue_NormallyFull( uxRxedValue, intqSECOND_INTERRUPT );									\
 163:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}																										\
 164:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 165:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 166:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 167:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 168:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* The two queues used by the test. */
 169:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static xQueueHandle xNormallyEmptyQueue, xNormallyFullQueue;
 170:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 171:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Variables used to detect a stall in one of the tasks. */
 172:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static unsigned portBASE_TYPE uxHighPriorityLoops1 = 0, uxHighPriorityLoops2 = 0, uxLowPriorityLoop
 173:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 174:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Any unexpected behaviour sets xErrorStatus to fail and log the line that
 175:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** caused the error in xErrorLine. */
 176:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static portBASE_TYPE xErrorStatus = pdPASS;
 177:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static volatile unsigned portBASE_TYPE xErrorLine = ( unsigned portBASE_TYPE ) 0;
 178:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 179:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Used for sequencing between tasks. */
 180:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static portBASE_TYPE xWasSuspended = pdFALSE;
 181:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 182:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* The values that are sent to the queues.  An incremented value is sent each
 183:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** time to each queue. */
 184:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** volatile unsigned portBASE_TYPE uxValueForNormallyEmptyQueue = 0, uxValueForNormallyFullQueue = 0;
 185:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 186:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* A handle to some of the tasks is required so they can be suspended/resumed. */
 187:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** xTaskHandle xHighPriorityNormallyEmptyTask1, xHighPriorityNormallyEmptyTask2, xHighPriorityNormally
 188:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 189:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* When a value is received in a queue the value is ticked off in the array
 190:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** the array position of the value is set to a the identifier of the task or
 191:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** interrupt that accessed the queue.  This way missing or duplicate values can be
 192:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** detected. */
 193:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static unsigned portCHAR ucNormallyEmptyReceivedValues[ intqNUM_VALUES_TO_LOG ] = { 0 };
 194:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static unsigned portCHAR ucNormallyFullReceivedValues[ intqNUM_VALUES_TO_LOG ] = { 0 };
 195:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 196:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* The test tasks themselves. */
 197:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvLowerPriorityNormallyEmptyTask( void *pvParameters );
 198:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvLowerPriorityNormallyFullTask( void *pvParameters );
 199:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvHigherPriorityNormallyEmptyTask( void *pvParameters );
 200:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prv1stHigherPriorityNormallyFullTask( void *pvParameters );
 201:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prv2ndHigherPriorityNormallyFullTask( void *pvParameters );
 202:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 203:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Used to mark the positions within the ucNormallyEmptyReceivedValues and
 204:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** ucNormallyFullReceivedValues arrays, while checking for duplicates. */
 205:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvRecordValue_NormallyEmpty( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE ux
 206:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvRecordValue_NormallyFull( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE uxS
 207:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 208:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /* Logs the line on which an error occurred. */
 209:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvQueueAccessLogError( unsigned portBASE_TYPE uxLine );
 210:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 211:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 212:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 213:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** void vStartInterruptQueueTasks( void )
 214:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 215:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Start the test tasks. */
 216:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H1QRx", configMINIMAL_STAC
 217:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H2QRx", configMINIMAL_STAC
 218:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvLowerPriorityNormallyEmptyTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_
 219:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv1stHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H1QTx", configMINIMAL_ST
 220:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv2ndHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H2QTx", configMINIMAL_ST
 221:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvLowerPriorityNormallyFullTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_S
 222:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 223:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Create the queues that are accessed by multiple tasks and multiple
 224:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	interrupts. */
 225:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xNormallyFullQueue = xQueueCreate( intqQUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( unsigned p
 226:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xNormallyEmptyQueue = xQueueCreate( intqQUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( unsigned 
 227:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 228:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 229:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	in use.  The queue registry is provided as a means for kernel aware
 230:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 231:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 232:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 233:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	defined to be less than 1. */
 234:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	vQueueAddToRegistry( xNormallyFullQueue, ( signed portCHAR * ) "NormallyFull" );
 235:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	vQueueAddToRegistry( xNormallyEmptyQueue, ( signed portCHAR * ) "NormallyEmpty" );
 236:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 237:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 238:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 239:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvRecordValue_NormallyFull( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE uxS
 240:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 241:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 242:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 243:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* We don't expect to receive the same value twice, so if the value
 244:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		has already been marked as received an error has occurred. */
 245:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyFullReceivedValues[ uxValue ] != 0x00 )
 246:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 247:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvQueueAccessLogError( __LINE__ );
 248:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 249:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 250:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* Log that this value has been received. */
 251:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyFullReceivedValues[ uxValue ] = uxSource;
 252:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 253:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 254:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 255:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 256:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvRecordValue_NormallyEmpty( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE ux
 257:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 258:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 259:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 260:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* We don't expect to receive the same value twice, so if the value
 261:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		has already been marked as received an error has occurred. */
 262:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
 263:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 264:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvQueueAccessLogError( __LINE__ );
 265:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 266:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 267:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* Log that this value has been received. */
 268:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyEmptyReceivedValues[ uxValue ] = uxSource;
 269:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 270:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 271:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 272:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 273:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvQueueAccessLogError( unsigned portBASE_TYPE uxLine )
 274:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 275:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Latch the line number that caused the error. */
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 278:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 279:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 280:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 281:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvHigherPriorityNormallyEmptyTask( void *pvParameters )
 282:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 283:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** unsigned portBASE_TYPE uxRxed, ux, uxTask1, uxTask2, uxInterrupts, uxErrorCount1 = 0, uxErrorCount2
 284:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 285:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* The timer should not be started until after the scheduler has started.
 286:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	More than one task is running this code so we check the parameter value
 287:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	to determine which task should start the timer. */
 288:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
 289:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 290:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		vInitialiseTimerForIntQueueTest();
 291:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 292:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 293:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ;; )
 294:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 295:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* Block waiting to receive a value from the normally empty queue.
 296:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		Interrupts will write to the queue so we should receive a value. */
 297:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueReceive( xNormallyEmptyQueue, &uxRxed, intqSHORT_DELAY ) != pdPASS )
 298:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 299:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvQueueAccessLogError( __LINE__ );
 300:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 301:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		else
 302:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 303:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Note which value was received so we can check all expected
 304:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			values are received and no values are duplicated. */
 305:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvRecordValue_NormallyEmpty( uxRxed, ( unsigned portBASE_TYPE ) pvParameters );
 306:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 307:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 308:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* Ensure the other task running this code gets a chance to execute. */
 309:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		taskYIELD();
 310:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 311:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
 312:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 313:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Have we received all the expected values? */
 314:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( uxValueForNormallyEmptyQueue > ( intqNUM_VALUES_TO_LOG + intqVALUE_OVERRUN ) )
 315:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 316:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskSuspend( xHighPriorityNormallyEmptyTask2 );
 317:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 318:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxTask1 = 0;
 319:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxTask2 = 0;
 320:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxInterrupts = 0;
 321:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 322:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				/* Loop through the array, checking that both tasks have
 323:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				placed values into the array, and that no values are missing.
 324:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				Start at 1 as we expect position 0 to be unused. */
 325:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 326:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 328:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					{
 329:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						/* A value is missing. */
 330:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						prvQueueAccessLogError( __LINE__ );
 331:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					}
 332:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					else
 333:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					{
 334:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
 335:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						{
 336:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							/* Value was placed into the array by task 1. */
 337:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask1++;
 338:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						}
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 340:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						{
 341:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							/* Value was placed into the array by task 2. */
 342:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask2++;
 343:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						}
 344:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 345:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						{
 346:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxInterrupts++;
 347:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						}
 348:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					}
 349:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 350:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 351:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxTask1 < intqMIN_ACCEPTABLE_TASK_COUNT )
 352:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 353:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					/* Only task 2 seemed to log any values. */
 354:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount1++;
 355:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( uxErrorCount1 > 2 )
 356:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					{
 357:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						prvQueueAccessLogError( __LINE__ );
 358:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					}
 359:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 360:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				else
 361:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 362:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount1 = 0;
 363:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 364:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 365:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxTask2 < intqMIN_ACCEPTABLE_TASK_COUNT  )
 366:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 367:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					/* Only task 1 seemed to log any values. */
 368:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount2++;
 369:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( uxErrorCount2 > 2 )
 370:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					{
 371:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						prvQueueAccessLogError( __LINE__ );
 372:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					}
 373:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 374:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				else
 375:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 376:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount2 = 0;
 377:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 378:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 379:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxInterrupts == 0 )
 380:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 381:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					prvQueueAccessLogError( __LINE__ );
 382:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 383:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 384:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				/* Clear the array again, ready to start a new cycle. */
 385:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				memset( ucNormallyEmptyReceivedValues, 0x00, sizeof( ucNormallyEmptyReceivedValues ) );
 386:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 387:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxHighPriorityLoops1++;
 388:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxValueForNormallyEmptyQueue = 0;
 389:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 390:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				/* Suspend ourselves, allowing the lower priority task to
 391:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				actually receive something from the queue.  Until now it
 392:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				will have been prevented from doing so by the higher
 393:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				priority tasks.  The lower priority task will resume us
 394:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if it receives something.  We will then resume the other
 395:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				higher priority task. */
 396:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskSuspend( NULL );
 397:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskResume( xHighPriorityNormallyEmptyTask2 );
 398:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 399:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 400:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 401:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 402:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 403:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 404:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvLowerPriorityNormallyEmptyTask( void *pvParameters )
 405:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
  26              		.loc 1 405 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 36
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 11, -8
  36              		.cfi_offset 10, -12
  37              		.cfi_offset 9, -16
  38              		.cfi_offset 8, -20
  39              		.cfi_offset 7, -24
  40              		.cfi_offset 6, -28
  41              		.cfi_offset 5, -32
  42              		.cfi_offset 4, -36
  43 0004 40F20001 		movw	r1, #:lower16:.LANCHOR3
  44 0008 40F20006 		movw	r6, #:lower16:.LANCHOR0
  45 000c 85B0     		sub	sp, sp, #20
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 56
  48 000e C0F20006 		movt	r6, #:upper16:.LANCHOR0
  49 0012 40F2000B 		movw	fp, #:lower16:xHighPriorityNormallyEmptyTask1
  50 0016 40F20008 		movw	r8, #:lower16:.LANCHOR1
  51 001a 40F20009 		movw	r9, #:lower16:.LANCHOR2
  52 001e 40F20007 		movw	r7, #:lower16:.LANCHOR4
  53 0022 40F20005 		movw	r5, #:lower16:.LANCHOR5
  54 0026 C0F20001 		movt	r1, #:upper16:.LANCHOR3
  55 002a C0F2000B 		movt	fp, #:upper16:xHighPriorityNormallyEmptyTask1
  56 002e C0F20008 		movt	r8, #:upper16:.LANCHOR1
  57 0032 C0F20009 		movt	r9, #:upper16:.LANCHOR2
  58 0036 0191     		str	r1, [sp, #4]
  59 0038 C0F20007 		movt	r7, #:upper16:.LANCHOR4
  60 003c C0F20005 		movt	r5, #:upper16:.LANCHOR5
 406:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** unsigned portBASE_TYPE uxValue, uxRxed;
 407:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 408:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* The parameters are not being used so avoid compiler warnings. */
 409:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	( void ) pvParameters;
 410:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 411:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ;; )
 412:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 413:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueReceive( xNormallyEmptyQueue, &uxRxed, intqONE_TICK_DELAY ) != errQUEUE_EMPTY )
  61              		.loc 1 413 0
  62 0040 B246     		mov	sl, r6
  63              	.LVL1:
  64              	.L9:
  65 0042 3068     		ldr	r0, [r6, #0]
  66 0044 03A9     		add	r1, sp, #12
  67 0046 0122     		movs	r2, #1
  68 0048 0023     		movs	r3, #0
  69 004a FFF7FEFF 		bl	xQueueGenericReceive
  70 004e 0446     		mov	r4, r0
  71 0050 40BB     		cbnz	r0, .L11
  72              	.L3:
 414:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 415:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* We should only obtain a value when the high priority task is
 416:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			suspended. */
 417:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xTaskIsTaskSuspended( xHighPriorityNormallyEmptyTask1 ) == pdFALSE )
 418:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 419:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 420:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 421:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 422:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvRecordValue_NormallyEmpty( uxRxed, intqLOW_PRIORITY_TASK );
 423:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 424:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Wake the higher priority task again. */
 425:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskResume( xHighPriorityNormallyEmptyTask1 );
 426:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxLowPriorityLoops1++;
 427:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 428:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		else
 429:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 430:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Raise our priority while we send so we can preempt the higher
 431:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			priority task, and ensure we get the Tx value into the queue. */
 432:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskPrioritySet( NULL, intqHIGHER_PRIORITY + 1 );
  73              		.loc 1 432 0
  74 0052 0421     		movs	r1, #4
  75 0054 FFF7FEFF 		bl	vTaskPrioritySet
 433:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 434:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			portENTER_CRITICAL();
  76              		.loc 1 434 0
  77 0058 FFF7FEFF 		bl	vPortEnterCritical
 435:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 436:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxValueForNormallyEmptyQueue++;
  78              		.loc 1 436 0
  79 005c 2B68     		ldr	r3, [r5, #0]
  80 005e 5A1C     		adds	r2, r3, #1
  81 0060 2A60     		str	r2, [r5, #0]
 437:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxValue = uxValueForNormallyEmptyQueue;
  82              		.loc 1 437 0
  83 0062 2868     		ldr	r0, [r5, #0]
  84              	.LVL2:
  85 0064 0290     		str	r0, [sp, #8]
 438:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 439:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			portEXIT_CRITICAL();
  86              		.loc 1 439 0
  87 0066 FFF7FEFF 		bl	vPortExitCritical
  88              	.LVL3:
 440:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 441:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xQueueSend( xNormallyEmptyQueue, &uxValue, portMAX_DELAY ) != pdPASS )
  89              		.loc 1 441 0
  90 006a 02A9     		add	r1, sp, #8
  91 006c 2346     		mov	r3, r4
  92 006e 4FF0FF32 		mov	r2, #-1
  93 0072 DAF80000 		ldr	r0, [sl, #0]
  94 0076 FFF7FEFF 		bl	xQueueGenericSend
  95 007a 0128     		cmp	r0, #1
  96              	.LVL4:
  97              	.LBB112:
  98              	.LBB113:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
  99              		.loc 1 276 0
 100 007c 1EBF     		ittt	ne
 101 007e 40F2BB11 		movwne	r1, #443
 102 0082 C8F80010 		strne	r1, [r8, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 103              		.loc 1 277 0
 104 0086 C9F80040 		strne	r4, [r9, #0]
 105              	.LBE113:
 106              	.LBE112:
 442:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 443:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 444:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 445:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 446:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskPrioritySet( NULL, intqLOWER_PRIORITY );
 107              		.loc 1 446 0
 108 008a 0020     		movs	r0, #0
 109 008c 0146     		mov	r1, r0
 110 008e FFF7FEFF 		bl	vTaskPrioritySet
 413:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueReceive( xNormallyEmptyQueue, &uxRxed, intqONE_TICK_DELAY ) != errQUEUE_EMPTY )
 111              		.loc 1 413 0
 112 0092 3068     		ldr	r0, [r6, #0]
 113 0094 03A9     		add	r1, sp, #12
 114 0096 0122     		movs	r2, #1
 115 0098 0023     		movs	r3, #0
 116 009a FFF7FEFF 		bl	xQueueGenericReceive
 117 009e 0446     		mov	r4, r0
 118 00a0 0028     		cmp	r0, #0
 119 00a2 D6D0     		beq	.L3
 120              	.LVL5:
 121              	.L11:
 417:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xTaskIsTaskSuspended( xHighPriorityNormallyEmptyTask1 ) == pdFALSE )
 122              		.loc 1 417 0
 123 00a4 DBF80000 		ldr	r0, [fp, #0]
 124 00a8 FFF7FEFF 		bl	xTaskIsTaskSuspended
 125 00ac 28B9     		cbnz	r0, .L4
 126              	.LVL6:
 127              	.LBB114:
 128              	.LBB115:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 129              		.loc 1 276 0
 130 00ae 40F2A313 		movw	r3, #419
 131 00b2 C8F80030 		str	r3, [r8, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 132              		.loc 1 277 0
 133 00b6 C9F80000 		str	r0, [r9, #0]
 134              	.LVL7:
 135              	.L4:
 136              	.LBE115:
 137              	.LBE114:
 422:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvRecordValue_NormallyEmpty( uxRxed, intqLOW_PRIORITY_TASK );
 138              		.loc 1 422 0
 139 00ba 039B     		ldr	r3, [sp, #12]
 140              	.LVL8:
 141              	.LBB116:
 142              	.LBB117:
 258:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 143              		.loc 1 258 0
 144 00bc C72B     		cmp	r3, #199
 145 00be 0CD8     		bhi	.L5
 146              	.LVL9:
 147              	.LBB118:
 148              	.LBB119:
 262:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
 149              		.loc 1 262 0
 150 00c0 0198     		ldr	r0, [sp, #4]
 151 00c2 C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 152 00c4 32B1     		cbz	r2, .L6
 153              	.LVL10:
 154              	.LBB120:
 155              	.LBB121:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 156              		.loc 1 276 0
 157 00c6 4FF48471 		mov	r1, #264
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 158              		.loc 1 277 0
 159 00ca 0024     		movs	r4, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 160              		.loc 1 276 0
 161 00cc C8F80010 		str	r1, [r8, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 162              		.loc 1 277 0
 163 00d0 C9F80040 		str	r4, [r9, #0]
 164              	.LVL11:
 165              	.L6:
 166              	.LBE121:
 167              	.LBE120:
 268:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyEmptyReceivedValues[ uxValue ] = uxSource;
 168              		.loc 1 268 0
 169 00d4 019A     		ldr	r2, [sp, #4]
 170 00d6 0320     		movs	r0, #3
 171 00d8 D054     		strb	r0, [r2, r3]
 172              	.LVL12:
 173              	.L5:
 174              	.LBE119:
 175              	.LBE118:
 176              	.LBE117:
 177              	.LBE116:
 425:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskResume( xHighPriorityNormallyEmptyTask1 );
 178              		.loc 1 425 0
 179 00da DBF80000 		ldr	r0, [fp, #0]
 180 00de FFF7FEFF 		bl	vTaskResume
 181              	.LVL13:
 426:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxLowPriorityLoops1++;
 182              		.loc 1 426 0
 183 00e2 3C68     		ldr	r4, [r7, #0]
 184 00e4 631C     		adds	r3, r4, #1
 185 00e6 3B60     		str	r3, [r7, #0]
 186 00e8 ABE7     		b	.L9
 187              		.cfi_endproc
 188              	.LFE5:
 190 00ea 00BF     		.section	.text.prv2ndHigherPriorityNormallyFullTask,"ax",%progbits
 191              		.align	2
 192              		.thumb
 193              		.thumb_func
 195              	prv2ndHigherPriorityNormallyFullTask:
 196              	.LFB7:
 447:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 448:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 449:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 450:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 451:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 452:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prv1stHigherPriorityNormallyFullTask( void *pvParameters )
 453:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 454:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** unsigned portBASE_TYPE uxValueToTx, ux, uxInterrupts;
 455:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 456:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* The parameters are not being used so avoid compiler warnings. */
 457:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	( void ) pvParameters;
 458:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 459:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Make sure the queue starts full or near full.  >> 1 as there are two
 460:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	high priority tasks. */
 461:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ux = 0; ux < ( intqQUEUE_LENGTH >> 1 ); ux++ )
 462:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 463:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 464:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 465:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 466:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 467:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 468:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 469:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 470:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
 471:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 472:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 473:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ;; )
 474:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 475:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 476:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 477:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 478:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 479:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 480:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 481:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 482:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY ) != pdPASS )
 483:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 484:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* intqHIGH_PRIORITY_TASK2 is never suspended so we would not
 485:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			expect it to ever time out. */
 486:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvQueueAccessLogError( __LINE__ );
 487:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 488:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 489:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* Allow the other task running this code to run. */
 490:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		taskYIELD();
 491:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 492:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* Have all the expected values been sent to the queue? */
 493:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( uxValueToTx > ( intqNUM_VALUES_TO_LOG + intqVALUE_OVERRUN ) )
 494:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 495:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Make sure the other high priority task completes its send of
 496:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			any values below intqNUM_VALUE_TO_LOG. */
 497:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskDelay( intqSHORT_DELAY );
 498:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 499:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskSuspend( xHighPriorityNormallyFullTask2 );
 500:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 501:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xWasSuspended == pdTRUE )
 502:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 503:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				/* We would have expected the other high priority task to have
 504:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				set this back to false by now. */
 505:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 506:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 507:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 508:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Set the suspended flag so an error is not logged if the other
 509:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			task recognises a time out when it is unsuspended. */
 510:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			xWasSuspended = pdTRUE;
 511:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 512:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Check interrupts are also sending. */
 513:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxInterrupts = 0U;
 514:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 515:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Start at 1 as we expect position 0 to be unused. */
 516:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 517:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 519:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 520:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					/* A value was missing. */
 521:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					prvQueueAccessLogError( __LINE__ );
 522:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 523:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				else if( ucNormallyFullReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 524:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				{
 525:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxInterrupts++;
 526:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				}
 527:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 528:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 529:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( uxInterrupts == 0 )
 530:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 531:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				/* No writes from interrupts were found.  Are interrupts
 532:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				actually running? */
 533:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 534:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 535:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 536:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Reset the array ready for the next cycle. */
 537:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			memset( ucNormallyFullReceivedValues, 0x00, sizeof( ucNormallyFullReceivedValues ) );
 538:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 539:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxHighPriorityLoops2++;
 540:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue = 0;
 541:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 542:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Suspend ourselves, allowing the lower priority task to
 543:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			actually receive something from the queue.  Until now it
 544:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			will have been prevented from doing so by the higher
 545:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			priority tasks.  The lower priority task will resume us
 546:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if it receives something.  We will then resume the other
 547:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			higher priority task. */
 548:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskSuspend( NULL );
 549:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskResume( xHighPriorityNormallyFullTask2 );
 550:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 551:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 552:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 553:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 554:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 555:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prv2ndHigherPriorityNormallyFullTask( void *pvParameters )
 556:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 197              		.loc 1 556 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              	.LVL14:
 202 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 203              	.LCFI2:
 204              		.cfi_def_cfa_offset 36
 205              		.cfi_offset 14, -4
 206              		.cfi_offset 11, -8
 207              		.cfi_offset 10, -12
 208              		.cfi_offset 9, -16
 209              		.cfi_offset 8, -20
 210              		.cfi_offset 7, -24
 211              		.cfi_offset 6, -28
 212              		.cfi_offset 5, -32
 213              		.cfi_offset 4, -36
 557:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** unsigned portBASE_TYPE uxValueToTx, ux;
 558:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 559:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* The parameters are not being used so avoid compiler warnings. */
 560:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	( void ) pvParameters;
 561:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 562:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Make sure the queue starts full or near full.  >> 1 as there are two
 563:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	high priority tasks. */
 564:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ux = 0; ux < ( intqQUEUE_LENGTH >> 1 ); ux++ )
 565:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 566:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 567:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 568:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 214              		.loc 1 568 0
 215 0004 40F20004 		movw	r4, #:lower16:.LANCHOR6
 556:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 216              		.loc 1 556 0
 217 0008 83B0     		sub	sp, sp, #12
 218              	.LCFI3:
 219              		.cfi_def_cfa_offset 48
 220              		.loc 1 568 0
 221 000a C0F20004 		movt	r4, #:upper16:.LANCHOR6
 566:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 222              		.loc 1 566 0
 223 000e FFF7FEFF 		bl	vPortEnterCritical
 224              	.LVL15:
 225              		.loc 1 568 0
 226 0012 2168     		ldr	r1, [r4, #0]
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 227              		.loc 1 569 0
 228 0014 0DF10808 		add	r8, sp, #8
 568:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 229              		.loc 1 568 0
 230 0018 4F1C     		adds	r7, r1, #1
 231 001a 2760     		str	r7, [r4, #0]
 232              		.loc 1 569 0
 233 001c 2568     		ldr	r5, [r4, #0]
 570:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 571:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 572:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 573:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
 234              		.loc 1 573 0
 235 001e 40F20007 		movw	r7, #:lower16:.LANCHOR7
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 236              		.loc 1 569 0
 237 0022 48F8045D 		str	r5, [r8, #-4]!
 238              	.LVL16:
 239              		.loc 1 573 0
 240 0026 C0F20007 		movt	r7, #:upper16:.LANCHOR7
 571:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 241              		.loc 1 571 0
 242 002a FFF7FEFF 		bl	vPortExitCritical
 243              		.loc 1 573 0
 244 002e 4146     		mov	r1, r8
 245 0030 4B22     		movs	r2, #75
 246 0032 0023     		movs	r3, #0
 247 0034 3868     		ldr	r0, [r7, #0]
 248 0036 FFF7FEFF 		bl	xQueueGenericSend
 249              	.LVL17:
 566:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 250              		.loc 1 566 0
 251 003a FFF7FEFF 		bl	vPortEnterCritical
 568:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 252              		.loc 1 568 0
 253 003e 2068     		ldr	r0, [r4, #0]
 254 0040 40F20005 		movw	r5, #:lower16:.LANCHOR8
 255 0044 431C     		adds	r3, r0, #1
 256 0046 2360     		str	r3, [r4, #0]
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 257              		.loc 1 569 0
 258 0048 2668     		ldr	r6, [r4, #0]
 259              	.LVL18:
 260 004a 40F20009 		movw	r9, #:lower16:.LANCHOR1
 261 004e 0196     		str	r6, [sp, #4]
 262              	.LVL19:
 571:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 263              		.loc 1 571 0
 264 0050 FFF7FEFF 		bl	vPortExitCritical
 265              		.loc 1 573 0
 266 0054 0023     		movs	r3, #0
 267 0056 4146     		mov	r1, r8
 268 0058 4B22     		movs	r2, #75
 269 005a 3868     		ldr	r0, [r7, #0]
 270 005c FFF7FEFF 		bl	xQueueGenericSend
 271              	.LVL20:
 566:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 272              		.loc 1 566 0
 273 0060 FFF7FEFF 		bl	vPortEnterCritical
 568:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 274              		.loc 1 568 0
 275 0064 2268     		ldr	r2, [r4, #0]
 276 0066 40F2000A 		movw	sl, #:lower16:.LANCHOR2
 277 006a 511C     		adds	r1, r2, #1
 278 006c 2160     		str	r1, [r4, #0]
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 279              		.loc 1 569 0
 280 006e 2068     		ldr	r0, [r4, #0]
 281              	.LVL21:
 282 0070 C0F20005 		movt	r5, #:upper16:.LANCHOR8
 283 0074 0190     		str	r0, [sp, #4]
 284              	.LVL22:
 571:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 285              		.loc 1 571 0
 286 0076 FFF7FEFF 		bl	vPortExitCritical
 287              		.loc 1 573 0
 288 007a 4146     		mov	r1, r8
 289 007c 4B22     		movs	r2, #75
 290 007e 0023     		movs	r3, #0
 291 0080 3868     		ldr	r0, [r7, #0]
 292 0082 FFF7FEFF 		bl	xQueueGenericSend
 293              	.LVL23:
 566:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 294              		.loc 1 566 0
 295 0086 FFF7FEFF 		bl	vPortEnterCritical
 568:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 296              		.loc 1 568 0
 297 008a 2368     		ldr	r3, [r4, #0]
 298 008c C0F20009 		movt	r9, #:upper16:.LANCHOR1
 299 0090 5E1C     		adds	r6, r3, #1
 300 0092 2660     		str	r6, [r4, #0]
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 301              		.loc 1 569 0
 302 0094 2268     		ldr	r2, [r4, #0]
 303              	.LVL24:
 574:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 575:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 576:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ;; )
 577:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 578:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 579:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 580:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 581:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 582:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 583:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 584:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 585:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY ) != pdPASS )
 304              		.loc 1 585 0
 305 0096 0026     		movs	r6, #0
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 306              		.loc 1 569 0
 307 0098 0192     		str	r2, [sp, #4]
 308              	.LVL25:
 571:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 309              		.loc 1 571 0
 310 009a FFF7FEFF 		bl	vPortExitCritical
 573:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
 311              		.loc 1 573 0
 312 009e 4B22     		movs	r2, #75
 313 00a0 4146     		mov	r1, r8
 314 00a2 0023     		movs	r3, #0
 315 00a4 3868     		ldr	r0, [r7, #0]
 316 00a6 FFF7FEFF 		bl	xQueueGenericSend
 317              	.LVL26:
 566:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 318              		.loc 1 566 0
 319 00aa FFF7FEFF 		bl	vPortEnterCritical
 568:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 320              		.loc 1 568 0
 321 00ae 2168     		ldr	r1, [r4, #0]
 322 00b0 C0F2000A 		movt	sl, #:upper16:.LANCHOR2
 323 00b4 481C     		adds	r0, r1, #1
 324 00b6 2060     		str	r0, [r4, #0]
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 325              		.loc 1 569 0
 326 00b8 2368     		ldr	r3, [r4, #0]
 327              	.LVL27:
 328              	.LBB122:
 329              	.LBB123:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 330              		.loc 1 276 0
 331 00ba 40F24E2B 		movw	fp, #590
 332              	.LBE123:
 333              	.LBE122:
 569:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 334              		.loc 1 569 0
 335 00be 0193     		str	r3, [sp, #4]
 336              	.LVL28:
 571:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 337              		.loc 1 571 0
 338 00c0 FFF7FEFF 		bl	vPortExitCritical
 573:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
 339              		.loc 1 573 0
 340 00c4 3868     		ldr	r0, [r7, #0]
 341 00c6 4146     		mov	r1, r8
 342 00c8 4B22     		movs	r2, #75
 343 00ca 3346     		mov	r3, r6
 344 00cc FFF7FEFF 		bl	xQueueGenericSend
 345              	.LVL29:
 346              	.L14:
 578:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 347              		.loc 1 578 0
 348 00d0 FFF7FEFF 		bl	vPortEnterCritical
 580:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 349              		.loc 1 580 0
 350 00d4 2068     		ldr	r0, [r4, #0]
 351 00d6 431C     		adds	r3, r0, #1
 352 00d8 2360     		str	r3, [r4, #0]
 581:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 353              		.loc 1 581 0
 354 00da 2268     		ldr	r2, [r4, #0]
 355              	.LVL30:
 356 00dc 0192     		str	r2, [sp, #4]
 583:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 357              		.loc 1 583 0
 358 00de FFF7FEFF 		bl	vPortExitCritical
 359              	.LVL31:
 360              		.loc 1 585 0
 361 00e2 4B22     		movs	r2, #75
 362 00e4 0023     		movs	r3, #0
 363 00e6 4146     		mov	r1, r8
 364 00e8 3868     		ldr	r0, [r7, #0]
 365 00ea FFF7FEFF 		bl	xQueueGenericSend
 366 00ee 0128     		cmp	r0, #1
 367 00f0 06D0     		beq	.L13
 586:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 587:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xWasSuspended != pdTRUE )
 368              		.loc 1 587 0
 369 00f2 2968     		ldr	r1, [r5, #0]
 370 00f4 0129     		cmp	r1, #1
 371              	.LVL32:
 372              	.LBB125:
 373              	.LBB124:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 374              		.loc 1 276 0
 375 00f6 1CBF     		itt	ne
 376 00f8 C9F800B0 		strne	fp, [r9, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 377              		.loc 1 277 0
 378 00fc CAF80060 		strne	r6, [sl, #0]
 379              	.LVL33:
 380              	.L13:
 381              	.LBE124:
 382              	.LBE125:
 588:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 589:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				/* It is ok to time out if the task has been suspended. */
 590:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 591:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 592:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 593:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 594:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		xWasSuspended = pdFALSE;
 383              		.loc 1 594 0
 384 0100 2E60     		str	r6, [r5, #0]
 595:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 596:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		taskYIELD();
 385              		.loc 1 596 0
 386 0102 FFF7FEFF 		bl	vPortYieldFromISR
 597:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 387              		.loc 1 597 0
 388 0106 E3E7     		b	.L14
 389              		.cfi_endproc
 390              	.LFE7:
 392              		.section	.text.prv1stHigherPriorityNormallyFullTask,"ax",%progbits
 393              		.align	2
 394              		.thumb
 395              		.thumb_func
 397              	prv1stHigherPriorityNormallyFullTask:
 398              	.LFB6:
 453:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 399              		.loc 1 453 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 24
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              	.LVL34:
 404 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 405              	.LCFI4:
 406              		.cfi_def_cfa_offset 36
 407              		.cfi_offset 14, -4
 408              		.cfi_offset 11, -8
 409              		.cfi_offset 10, -12
 410              		.cfi_offset 9, -16
 411              		.cfi_offset 8, -20
 412              		.cfi_offset 7, -24
 413              		.cfi_offset 6, -28
 414              		.cfi_offset 5, -32
 415              		.cfi_offset 4, -36
 416 0004 40F20006 		movw	r6, #:lower16:.LANCHOR6
 417 0008 40F20008 		movw	r8, #:lower16:.LANCHOR7
 418 000c 87B0     		sub	sp, sp, #28
 419              	.LCFI5:
 420              		.cfi_def_cfa_offset 64
 453:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 421              		.loc 1 453 0
 422 000e 0524     		movs	r4, #5
 423 0010 C0F20006 		movt	r6, #:upper16:.LANCHOR6
 424 0014 C0F20008 		movt	r8, #:upper16:.LANCHOR7
 425              	.LVL35:
 426              	.L16:
 463:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 427              		.loc 1 463 0 discriminator 2
 428 0018 FFF7FEFF 		bl	vPortEnterCritical
 465:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 429              		.loc 1 465 0 discriminator 2
 430 001c 3168     		ldr	r1, [r6, #0]
 431 001e 481C     		adds	r0, r1, #1
 432 0020 3060     		str	r0, [r6, #0]
 466:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 433              		.loc 1 466 0 discriminator 2
 434 0022 3368     		ldr	r3, [r6, #0]
 435              	.LVL36:
 436 0024 0593     		str	r3, [sp, #20]
 468:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 437              		.loc 1 468 0 discriminator 2
 438 0026 FFF7FEFF 		bl	vPortExitCritical
 439              	.LVL37:
 470:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
 440              		.loc 1 470 0 discriminator 2
 441 002a 4B22     		movs	r2, #75
 442 002c 0023     		movs	r3, #0
 443 002e D8F80000 		ldr	r0, [r8, #0]
 444 0032 05A9     		add	r1, sp, #20
 445 0034 FFF7FEFF 		bl	xQueueGenericSend
 461:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ux = 0; ux < ( intqQUEUE_LENGTH >> 1 ); ux++ )
 446              		.loc 1 461 0 discriminator 2
 447 0038 013C     		subs	r4, r4, #1
 448 003a EDD1     		bne	.L16
 510:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			xWasSuspended = pdTRUE;
 449              		.loc 1 510 0
 450 003c 40F2000B 		movw	fp, #:lower16:.LANCHOR9
 451 0040 40F20002 		movw	r2, #:lower16:xHighPriorityNormallyFullTask2
 452 0044 40F20007 		movw	r7, #:lower16:.LANCHOR2
 453 0048 40F20004 		movw	r4, #:lower16:.LANCHOR1
 454 004c 40F20009 		movw	r9, #:lower16:.LANCHOR8
 455 0050 40F2000A 		movw	sl, #:lower16:.LANCHOR10
 456 0054 C0F2000B 		movt	fp, #:upper16:.LANCHOR9
 457 0058 C0F20002 		movt	r2, #:upper16:xHighPriorityNormallyFullTask2
 458 005c C0F20007 		movt	r7, #:upper16:.LANCHOR2
 459 0060 C0F20004 		movt	r4, #:upper16:.LANCHOR1
 460 0064 0292     		str	r2, [sp, #8]
 461 0066 C0F20009 		movt	r9, #:upper16:.LANCHOR8
 462 006a C0F2000A 		movt	sl, #:upper16:.LANCHOR10
 452:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prv1stHigherPriorityNormallyFullTask( void *pvParameters )
 463              		.loc 1 452 0
 464 006e 0BF1C705 		add	r5, fp, #199
 465              	.L40:
 475:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portENTER_CRITICAL();
 466              		.loc 1 475 0
 467 0072 FFF7FEFF 		bl	vPortEnterCritical
 477:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue++;
 468              		.loc 1 477 0
 469 0076 3168     		ldr	r1, [r6, #0]
 470 0078 481C     		adds	r0, r1, #1
 471 007a 3060     		str	r0, [r6, #0]
 478:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueToTx = uxValueForNormallyFullQueue;
 472              		.loc 1 478 0
 473 007c 3368     		ldr	r3, [r6, #0]
 474              	.LVL38:
 475 007e 0593     		str	r3, [sp, #20]
 480:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		portEXIT_CRITICAL();
 476              		.loc 1 480 0
 477 0080 FFF7FEFF 		bl	vPortExitCritical
 478              	.LVL39:
 482:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY ) != pdPASS )
 479              		.loc 1 482 0
 480 0084 4B22     		movs	r2, #75
 481 0086 0023     		movs	r3, #0
 482 0088 D8F80000 		ldr	r0, [r8, #0]
 483 008c 05A9     		add	r1, sp, #20
 484 008e FFF7FEFF 		bl	xQueueGenericSend
 485 0092 0128     		cmp	r0, #1
 486 0094 04D0     		beq	.L17
 487              	.LVL40:
 488              	.LBB126:
 489              	.LBB127:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 490              		.loc 1 276 0
 491 0096 4FF4F373 		mov	r3, #486
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 492              		.loc 1 277 0
 493 009a 0022     		movs	r2, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 494              		.loc 1 276 0
 495 009c 2360     		str	r3, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 496              		.loc 1 277 0
 497 009e 3A60     		str	r2, [r7, #0]
 498              	.LVL41:
 499              	.L17:
 500              	.LBE127:
 501              	.LBE126:
 490:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		taskYIELD();
 502              		.loc 1 490 0
 503 00a0 FFF7FEFF 		bl	vPortYieldFromISR
 493:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( uxValueToTx > ( intqNUM_VALUES_TO_LOG + intqVALUE_OVERRUN ) )
 504              		.loc 1 493 0
 505 00a4 0598     		ldr	r0, [sp, #20]
 506 00a6 FA28     		cmp	r0, #250
 507 00a8 E3D9     		bls	.L40
 497:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskDelay( intqSHORT_DELAY );
 508              		.loc 1 497 0
 509 00aa 4B20     		movs	r0, #75
 510 00ac FFF7FEFF 		bl	vTaskDelay
 499:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskSuspend( xHighPriorityNormallyFullTask2 );
 511              		.loc 1 499 0
 512 00b0 029A     		ldr	r2, [sp, #8]
 513 00b2 1068     		ldr	r0, [r2, #0]
 514 00b4 FFF7FEFF 		bl	vTaskSuspend
 501:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xWasSuspended == pdTRUE )
 515              		.loc 1 501 0
 516 00b8 D9F80010 		ldr	r1, [r9, #0]
 517 00bc 0129     		cmp	r1, #1
 518 00be 72D0     		beq	.L47
 519              	.L19:
 520 00c0 6FEA0B00 		mvn	r0, fp
 521 00c4 2B18     		adds	r3, r5, r0
 510:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			xWasSuspended = pdTRUE;
 522              		.loc 1 510 0
 523 00c6 4FF0010E 		mov	lr, #1
 524 00ca 3968     		ldr	r1, [r7, #0]
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 525              		.loc 1 518 0
 526 00cc 9BF801C0 		ldrb	ip, [fp, #1]	@ zero_extendqisi2
 527 00d0 03EA0E02 		and	r2, r3, lr
 510:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			xWasSuspended = pdTRUE;
 528              		.loc 1 510 0
 529 00d4 0191     		str	r1, [sp, #4]
 530 00d6 C9F800E0 		str	lr, [r9, #0]
 531              	.LVL42:
 513:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxInterrupts = 0U;
 532              		.loc 1 513 0
 533 00da 0020     		movs	r0, #0
 534              	.LBB128:
 535              	.LBB129:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 536              		.loc 1 276 0
 537 00dc 40F20921 		movw	r1, #521
 538 00e0 0392     		str	r2, [sp, #12]
 539              	.LBE129:
 540              	.LBE128:
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 541              		.loc 1 518 0
 542 00e2 354B     		ldr	r3, .L52
 543 00e4 BCF1000F 		cmp	ip, #0
 544 00e8 54D1     		bne	.L28
 545              	.LVL43:
 546              	.LBB135:
 547              	.LBB130:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 548              		.loc 1 276 0
 549 00ea 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 550              		.loc 1 277 0
 551 00ec 0190     		str	r0, [sp, #4]
 552              	.LVL44:
 553              	.L29:
 554              	.LBE130:
 555              	.LBE135:
 516:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 556              		.loc 1 516 0
 557 00ee AB42     		cmp	r3, r5
 558 00f0 2DD0     		beq	.L43
 559 00f2 039A     		ldr	r2, [sp, #12]
 560 00f4 4AB1     		cbz	r2, .L46
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 561              		.loc 1 518 0
 562 00f6 13F801EF 		ldrb	lr, [r3, #1]!	@ zero_extendqisi2
 563 00fa BEF1000F 		cmp	lr, #0
 564 00fe 4ED0     		beq	.L44
 523:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				else if( ucNormallyFullReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 565              		.loc 1 523 0
 566 0100 BEF1050F 		cmp	lr, #5
 567 0104 55D0     		beq	.L48
 568              	.L32:
 516:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 569              		.loc 1 516 0
 570 0106 AB42     		cmp	r3, r5
 571 0108 21D0     		beq	.L43
 572              	.L46:
 573 010a 019A     		ldr	r2, [sp, #4]
 574 010c 0AE0     		b	.L22
 575              	.L50:
 576              	.LVL45:
 577              	.LBB136:
 578              	.LBB131:
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 579              		.loc 1 277 0
 580 010e 7246     		mov	r2, lr
 581              	.LBE131:
 582              	.LBE136:
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 583              		.loc 1 518 0
 584 0110 13F801EF 		ldrb	lr, [r3, #1]!	@ zero_extendqisi2
 585              	.LBB137:
 586              	.LBB132:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 587              		.loc 1 276 0
 588 0114 2160     		str	r1, [r4, #0]
 589              	.LBE132:
 590              	.LBE137:
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 591              		.loc 1 518 0
 592 0116 BEF1000F 		cmp	lr, #0
 593 011a 11D1     		bne	.L35
 594              	.LVL46:
 595              	.L51:
 596              	.LBB138:
 597              	.LBB133:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 598              		.loc 1 276 0
 599 011c 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 600              		.loc 1 277 0
 601 011e 7246     		mov	r2, lr
 602              	.LVL47:
 603              	.L36:
 604              	.LBE133:
 605              	.LBE138:
 516:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 606              		.loc 1 516 0
 607 0120 AB42     		cmp	r3, r5
 608 0122 13D0     		beq	.L49
 609              	.L22:
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 610              		.loc 1 518 0
 611 0124 13F801EF 		ldrb	lr, [r3, #1]!	@ zero_extendqisi2
 612 0128 BEF1000F 		cmp	lr, #0
 613 012c EFD0     		beq	.L50
 523:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				else if( ucNormallyFullReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 614              		.loc 1 523 0
 615 012e BEF1050F 		cmp	lr, #5
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 616              		.loc 1 518 0
 617 0132 13F801EF 		ldrb	lr, [r3, #1]!	@ zero_extendqisi2
 525:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxInterrupts++;
 618              		.loc 1 525 0
 619 0136 08BF     		it	eq
 620 0138 0130     		addeq	r0, r0, #1
 621              	.LVL48:
 518:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( ucNormallyFullReceivedValues[ ux ] == 0 )
 622              		.loc 1 518 0
 623 013a BEF1000F 		cmp	lr, #0
 624 013e EDD0     		beq	.L51
 625              	.L35:
 523:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				else if( ucNormallyFullReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 626              		.loc 1 523 0
 627 0140 BEF1050F 		cmp	lr, #5
 628 0144 ECD1     		bne	.L36
 525:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxInterrupts++;
 629              		.loc 1 525 0
 630 0146 0130     		adds	r0, r0, #1
 631              	.LVL49:
 516:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 632              		.loc 1 516 0
 633 0148 AB42     		cmp	r3, r5
 634 014a EBD1     		bne	.L22
 635              	.L49:
 636 014c 0192     		str	r2, [sp, #4]
 637              	.L43:
 638 014e 019A     		ldr	r2, [sp, #4]
 639 0150 3A60     		str	r2, [r7, #0]
 529:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( uxInterrupts == 0 )
 640              		.loc 1 529 0
 641 0152 40B9     		cbnz	r0, .L23
 642              	.LVL50:
 643              	.LBB139:
 644              	.LBB140:
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 645              		.loc 1 277 0
 646 0154 40F2000C 		movw	ip, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 647              		.loc 1 276 0
 648 0158 40F21523 		movw	r3, #533
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 649              		.loc 1 277 0
 650 015c C0F2000C 		movt	ip, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 651              		.loc 1 276 0
 652 0160 2360     		str	r3, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 653              		.loc 1 277 0
 654 0162 CCF80000 		str	r0, [ip, #0]
 655              	.LVL51:
 656              	.L23:
 657              	.LBE140:
 658              	.LBE139:
 537:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			memset( ucNormallyFullReceivedValues, 0x00, sizeof( ucNormallyFullReceivedValues ) );
 659              		.loc 1 537 0
 660 0166 40F20000 		movw	r0, #:lower16:.LANCHOR9
 661              	.LVL52:
 662 016a 0021     		movs	r1, #0
 663 016c C822     		movs	r2, #200
 664 016e C0F20000 		movt	r0, #:upper16:.LANCHOR9
 665 0172 FFF7FEFF 		bl	memset
 539:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxHighPriorityLoops2++;
 666              		.loc 1 539 0
 667 0176 DAF80000 		ldr	r0, [sl, #0]
 540:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue = 0;
 668              		.loc 1 540 0
 669 017a 0023     		movs	r3, #0
 539:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxHighPriorityLoops2++;
 670              		.loc 1 539 0
 671 017c 421C     		adds	r2, r0, #1
 548:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskSuspend( NULL );
 672              		.loc 1 548 0
 673 017e 1846     		mov	r0, r3
 539:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxHighPriorityLoops2++;
 674              		.loc 1 539 0
 675 0180 CAF80020 		str	r2, [sl, #0]
 540:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxValueForNormallyFullQueue = 0;
 676              		.loc 1 540 0
 677 0184 3360     		str	r3, [r6, #0]
 548:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskSuspend( NULL );
 678              		.loc 1 548 0
 679 0186 FFF7FEFF 		bl	vTaskSuspend
 549:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskResume( xHighPriorityNormallyFullTask2 );
 680              		.loc 1 549 0
 681 018a 0299     		ldr	r1, [sp, #8]
 682 018c 0868     		ldr	r0, [r1, #0]
 683 018e FFF7FEFF 		bl	vTaskResume
 684 0192 6EE7     		b	.L40
 685              	.LVL53:
 686              	.L28:
 525:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxInterrupts++;
 687              		.loc 1 525 0
 688 0194 BCF1050F 		cmp	ip, #5
 689 0198 08BF     		it	eq
 690 019a 7046     		moveq	r0, lr
 691 019c A7E7     		b	.L29
 692              	.LVL54:
 693              	.L44:
 694              	.LBB141:
 695              	.LBB134:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 696              		.loc 1 276 0
 697 019e 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 698              		.loc 1 277 0
 699 01a0 CDF804E0 		str	lr, [sp, #4]
 700 01a4 AFE7     		b	.L32
 701              	.LVL55:
 702              	.L47:
 703              	.LBE134:
 704              	.LBE141:
 705              	.LBB142:
 706              	.LBB143:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 707              		.loc 1 276 0
 708 01a6 40F2F910 		movw	r0, #505
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 709              		.loc 1 277 0
 710 01aa 0023     		movs	r3, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 711              		.loc 1 276 0
 712 01ac 2060     		str	r0, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 713              		.loc 1 277 0
 714 01ae 3B60     		str	r3, [r7, #0]
 715 01b0 86E7     		b	.L19
 716              	.LVL56:
 717              	.L48:
 718              	.LBE143:
 719              	.LBE142:
 525:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxInterrupts++;
 720              		.loc 1 525 0
 721 01b2 0130     		adds	r0, r0, #1
 722              	.LVL57:
 723 01b4 A7E7     		b	.L32
 724              	.L53:
 725 01b6 00BF     		.align	2
 726              	.L52:
 727 01b8 01000000 		.word	.LANCHOR9+1
 728              		.cfi_endproc
 729              	.LFE6:
 731              		.section	.text.prvHigherPriorityNormallyEmptyTask,"ax",%progbits
 732              		.align	2
 733              		.thumb
 734              		.thumb_func
 736              	prvHigherPriorityNormallyEmptyTask:
 737              	.LFB4:
 282:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 738              		.loc 1 282 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 32
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LVL58:
 743 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 744              	.LCFI6:
 745              		.cfi_def_cfa_offset 36
 746              		.cfi_offset 14, -4
 747              		.cfi_offset 11, -8
 748              		.cfi_offset 10, -12
 749              		.cfi_offset 9, -16
 750              		.cfi_offset 8, -20
 751              		.cfi_offset 7, -24
 752              		.cfi_offset 6, -28
 753              		.cfi_offset 5, -32
 754              		.cfi_offset 4, -36
 288:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
 755              		.loc 1 288 0
 756 0004 0128     		cmp	r0, #1
 282:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 757              		.loc 1 282 0
 758 0006 89B0     		sub	sp, sp, #36
 759              	.LCFI7:
 760              		.cfi_def_cfa_offset 72
 282:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 761              		.loc 1 282 0
 762 0008 0646     		mov	r6, r0
 288:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
 763              		.loc 1 288 0
 764 000a 01D1     		bne	.L55
 290:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		vInitialiseTimerForIntQueueTest();
 765              		.loc 1 290 0
 766 000c FFF7FEFF 		bl	vInitialiseTimerForIntQueueTest
 767              	.LVL59:
 768              	.L55:
 769 0010 40F20009 		movw	r9, #:lower16:.LANCHOR3
 770 0014 40F20001 		movw	r1, #:lower16:xHighPriorityNormallyEmptyTask2
 771 0018 40F20002 		movw	r2, #:lower16:.LANCHOR11
 282:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 772              		.loc 1 282 0
 773 001c 0020     		movs	r0, #0
 774 001e 40F20008 		movw	r8, #:lower16:.LANCHOR2
 775 0022 C0F20009 		movt	r9, #:upper16:.LANCHOR3
 776 0026 40F20007 		movw	r7, #:lower16:.LANCHOR0
 777 002a 40F20004 		movw	r4, #:lower16:.LANCHOR1
 778 002e 40F2000A 		movw	sl, #:lower16:.LANCHOR5
 779 0032 C0F20001 		movt	r1, #:upper16:xHighPriorityNormallyEmptyTask2
 780 0036 C0F20002 		movt	r2, #:upper16:.LANCHOR11
 781 003a 0390     		str	r0, [sp, #12]
 782 003c C0F20008 		movt	r8, #:upper16:.LANCHOR2
 783 0040 0490     		str	r0, [sp, #16]
 784 0042 C0F20007 		movt	r7, #:upper16:.LANCHOR0
 785 0046 C0F20004 		movt	r4, #:upper16:.LANCHOR1
 786 004a C0F2000A 		movt	sl, #:upper16:.LANCHOR5
 787 004e 0191     		str	r1, [sp, #4]
 788 0050 0292     		str	r2, [sp, #8]
 281:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvHigherPriorityNormallyEmptyTask( void *pvParameters )
 789              		.loc 1 281 0
 790 0052 09F1C705 		add	r5, r9, #199
 791 0056 09E0     		b	.L91
 792              	.LVL60:
 793              	.L105:
 794              	.LBB144:
 795              	.LBB145:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 796              		.loc 1 276 0
 797 0058 40F22B12 		movw	r2, #299
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 798              		.loc 1 277 0
 799 005c 0023     		movs	r3, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 800              		.loc 1 276 0
 801 005e 2260     		str	r2, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 802              		.loc 1 277 0
 803 0060 C8F80030 		str	r3, [r8, #0]
 804              	.LVL61:
 805              	.L58:
 806              	.LBE145:
 807              	.LBE144:
 309:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		taskYIELD();
 808              		.loc 1 309 0
 809 0064 FFF7FEFF 		bl	vPortYieldFromISR
 311:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
 810              		.loc 1 311 0
 811 0068 012E     		cmp	r6, #1
 812 006a 19D0     		beq	.L104
 813              	.LVL62:
 814              	.L91:
 297:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueReceive( xNormallyEmptyQueue, &uxRxed, intqSHORT_DELAY ) != pdPASS )
 815              		.loc 1 297 0
 816 006c 4B22     		movs	r2, #75
 817 006e 0023     		movs	r3, #0
 818 0070 3868     		ldr	r0, [r7, #0]
 819 0072 07A9     		add	r1, sp, #28
 820 0074 FFF7FEFF 		bl	xQueueGenericReceive
 821 0078 0128     		cmp	r0, #1
 822 007a EDD1     		bne	.L105
 305:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			prvRecordValue_NormallyEmpty( uxRxed, ( unsigned portBASE_TYPE ) pvParameters );
 823              		.loc 1 305 0
 824 007c 079B     		ldr	r3, [sp, #28]
 825              	.LVL63:
 826              	.LBB146:
 827              	.LBB147:
 258:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 828              		.loc 1 258 0
 829 007e C72B     		cmp	r3, #199
 830 0080 F0D8     		bhi	.L58
 831              	.LVL64:
 832              	.LBB148:
 833              	.LBB149:
 262:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
 834              		.loc 1 262 0
 835 0082 19F80310 		ldrb	r1, [r9, r3]	@ zero_extendqisi2
 836 0086 29B1     		cbz	r1, .L59
 837              	.LVL65:
 838              	.LBB150:
 839              	.LBB151:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 840              		.loc 1 276 0
 841 0088 4FF48472 		mov	r2, #264
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 842              		.loc 1 277 0
 843 008c 0020     		movs	r0, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 844              		.loc 1 276 0
 845 008e 2260     		str	r2, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 846              		.loc 1 277 0
 847 0090 C8F80000 		str	r0, [r8, #0]
 848              	.LVL66:
 849              	.L59:
 850              	.LBE151:
 851              	.LBE150:
 268:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyEmptyReceivedValues[ uxValue ] = uxSource;
 852              		.loc 1 268 0
 853 0094 09F80360 		strb	r6, [r9, r3]
 854              	.LBE149:
 855              	.LBE148:
 856              	.LBE147:
 857              	.LBE146:
 309:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		taskYIELD();
 858              		.loc 1 309 0
 859 0098 FFF7FEFF 		bl	vPortYieldFromISR
 860              	.LVL67:
 311:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
 861              		.loc 1 311 0
 862 009c 012E     		cmp	r6, #1
 863 009e E5D1     		bne	.L91
 864              	.LVL68:
 865              	.L104:
 314:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( uxValueForNormallyEmptyQueue > ( intqNUM_VALUES_TO_LOG + intqVALUE_OVERRUN ) )
 866              		.loc 1 314 0
 867 00a0 DAF80030 		ldr	r3, [sl, #0]
 868 00a4 FA2B     		cmp	r3, #250
 869 00a6 E1D9     		bls	.L91
 316:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskSuspend( xHighPriorityNormallyEmptyTask2 );
 870              		.loc 1 316 0
 871 00a8 019A     		ldr	r2, [sp, #4]
 872 00aa 1068     		ldr	r0, [r2, #0]
 873 00ac FFF7FEFF 		bl	vTaskSuspend
 874              	.LVL69:
 875 00b0 40F20000 		movw	r0, #:lower16:.LANCHOR3
 876 00b4 C0F20000 		movt	r0, #:upper16:.LANCHOR3
 877 00b8 C143     		mvns	r1, r0
 878 00ba 6B18     		adds	r3, r5, r1
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 879              		.loc 1 327 0
 880 00bc 90F801B0 		ldrb	fp, [r0, #1]	@ zero_extendqisi2
 320:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxInterrupts = 0;
 881              		.loc 1 320 0
 882 00c0 4FF0000C 		mov	ip, #0
 883 00c4 03F00103 		and	r3, r3, #1
 884 00c8 0593     		str	r3, [sp, #20]
 316:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskSuspend( xHighPriorityNormallyEmptyTask2 );
 885              		.loc 1 316 0
 886 00ca D8F80020 		ldr	r2, [r8, #0]
 319:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxTask2 = 0;
 887              		.loc 1 319 0
 888 00ce E646     		mov	lr, ip
 318:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxTask1 = 0;
 889              		.loc 1 318 0
 890 00d0 CDF800C0 		str	ip, [sp, #0]
 891              	.LBB152:
 892              	.LBB153:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 893              		.loc 1 276 0
 894 00d4 4FF4A571 		mov	r1, #330
 895              	.LBE153:
 896              	.LBE152:
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 897              		.loc 1 327 0
 898 00d8 431C     		adds	r3, r0, #1
 899 00da BBF1000F 		cmp	fp, #0
 900 00de 40F09F80 		bne	.L73
 901              	.LVL70:
 902              	.LBB158:
 903              	.LBB154:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 904              		.loc 1 276 0
 905 00e2 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 906              		.loc 1 277 0
 907 00e4 6246     		mov	r2, ip
 908              	.LVL71:
 909              	.L76:
 910              	.LBE154:
 911              	.LBE158:
 325:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 912              		.loc 1 325 0
 913 00e6 AB42     		cmp	r3, r5
 914 00e8 4ED0     		beq	.L96
 915 00ea 0598     		ldr	r0, [sp, #20]
 916 00ec B0B1     		cbz	r0, .L103
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 917              		.loc 1 327 0
 918 00ee 13F801BF 		ldrb	fp, [r3, #1]!	@ zero_extendqisi2
 919 00f2 BBF1000F 		cmp	fp, #0
 920 00f6 00F0A480 		beq	.L97
 334:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
 921              		.loc 1 334 0
 922 00fa BBF1010F 		cmp	fp, #1
 923 00fe 00F0A380 		beq	.L98
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 924              		.loc 1 339 0
 925 0102 BBF1020F 		cmp	fp, #2
 342:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask2++;
 926              		.loc 1 342 0
 927 0106 08BF     		it	eq
 928 0108 0EF1010E 		addeq	lr, lr, #1
 929              	.LVL72:
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 930              		.loc 1 339 0
 931 010c 04D0     		beq	.L81
 344:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 932              		.loc 1 344 0
 933 010e BBF1050F 		cmp	fp, #5
 346:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxInterrupts++;
 934              		.loc 1 346 0
 935 0112 08BF     		it	eq
 936 0114 0CF1010C 		addeq	ip, ip, #1
 937              	.LVL73:
 938              	.L81:
 325:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 939              		.loc 1 325 0
 940 0118 AB42     		cmp	r3, r5
 941 011a 35D0     		beq	.L96
 942              	.L103:
 943 011c 0098     		ldr	r0, [sp, #0]
 944 011e 0AE0     		b	.L65
 945              	.LVL74:
 946              	.L107:
 947              	.LBB159:
 948              	.LBB155:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 949              		.loc 1 276 0
 950 0120 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 951              		.loc 1 277 0
 952 0122 5A46     		mov	r2, fp
 953              	.LVL75:
 954              	.L62:
 955              	.LBE155:
 956              	.LBE159:
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 957              		.loc 1 327 0
 958 0124 13F801BF 		ldrb	fp, [r3, #1]!	@ zero_extendqisi2
 959 0128 BBF1000F 		cmp	fp, #0
 960 012c 1BD1     		bne	.L84
 961              	.L109:
 962              	.LVL76:
 963              	.LBB160:
 964              	.LBB156:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 965              		.loc 1 276 0
 966 012e 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 967              		.loc 1 277 0
 968 0130 5A46     		mov	r2, fp
 969              	.LVL77:
 970              	.L87:
 971              	.LBE156:
 972              	.LBE160:
 325:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 973              		.loc 1 325 0
 974 0132 AB42     		cmp	r3, r5
 975 0134 27D0     		beq	.L106
 976              	.LVL78:
 977              	.L65:
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 978              		.loc 1 327 0
 979 0136 13F801BF 		ldrb	fp, [r3, #1]!	@ zero_extendqisi2
 980 013a BBF1000F 		cmp	fp, #0
 981 013e EFD0     		beq	.L107
 334:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
 982              		.loc 1 334 0
 983 0140 BBF1010F 		cmp	fp, #1
 984 0144 62D0     		beq	.L108
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 985              		.loc 1 339 0
 986 0146 BBF1020F 		cmp	fp, #2
 342:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask2++;
 987              		.loc 1 342 0
 988 014a 08BF     		it	eq
 989 014c 0EF1010E 		addeq	lr, lr, #1
 990              	.LVL79:
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 991              		.loc 1 339 0
 992 0150 E8D0     		beq	.L62
 344:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 993              		.loc 1 344 0
 994 0152 BBF1050F 		cmp	fp, #5
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 995              		.loc 1 327 0
 996 0156 13F801BF 		ldrb	fp, [r3, #1]!	@ zero_extendqisi2
 346:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxInterrupts++;
 997              		.loc 1 346 0
 998 015a 08BF     		it	eq
 999 015c 0CF1010C 		addeq	ip, ip, #1
 1000              	.LVL80:
 327:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
 1001              		.loc 1 327 0
 1002 0160 BBF1000F 		cmp	fp, #0
 1003 0164 E3D0     		beq	.L109
 1004              	.L84:
 334:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
 1005              		.loc 1 334 0
 1006 0166 BBF1010F 		cmp	fp, #1
 1007 016a 51D0     		beq	.L100
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 1008              		.loc 1 339 0
 1009 016c BBF1020F 		cmp	fp, #2
 342:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask2++;
 1010              		.loc 1 342 0
 1011 0170 08BF     		it	eq
 1012 0172 0EF1010E 		addeq	lr, lr, #1
 1013              	.LVL81:
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 1014              		.loc 1 339 0
 1015 0176 DCD0     		beq	.L87
 344:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqSECOND_INTERRUPT )
 1016              		.loc 1 344 0
 1017 0178 BBF1050F 		cmp	fp, #5
 346:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxInterrupts++;
 1018              		.loc 1 346 0
 1019 017c 08BF     		it	eq
 1020 017e 0CF1010C 		addeq	ip, ip, #1
 1021              	.LVL82:
 325:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 1022              		.loc 1 325 0
 1023 0182 AB42     		cmp	r3, r5
 1024 0184 D7D1     		bne	.L65
 1025              	.L106:
 1026 0186 0090     		str	r0, [sp, #0]
 1027              	.LVL83:
 1028              	.L96:
 351:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxTask1 < intqMIN_ACCEPTABLE_TASK_COUNT )
 1029              		.loc 1 351 0
 1030 0188 0098     		ldr	r0, [sp, #0]
 325:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
 1031              		.loc 1 325 0
 1032 018a C8F80020 		str	r2, [r8, #0]
 351:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxTask1 < intqMIN_ACCEPTABLE_TASK_COUNT )
 1033              		.loc 1 351 0
 1034 018e 0428     		cmp	r0, #4
 1035 0190 43D8     		bhi	.L69
 354:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount1++;
 1036              		.loc 1 354 0
 1037 0192 0499     		ldr	r1, [sp, #16]
 1038 0194 4B1C     		adds	r3, r1, #1
 355:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( uxErrorCount1 > 2 )
 1039              		.loc 1 355 0
 1040 0196 022B     		cmp	r3, #2
 354:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount1++;
 1041              		.loc 1 354 0
 1042 0198 0493     		str	r3, [sp, #16]
 1043              	.LVL84:
 355:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( uxErrorCount1 > 2 )
 1044              		.loc 1 355 0
 1045 019a 09D9     		bls	.L66
 1046              	.LVL85:
 1047              	.LBB161:
 1048              	.LBB162:
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1049              		.loc 1 277 0
 1050 019c 40F2000B 		movw	fp, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1051              		.loc 1 276 0
 1052 01a0 40F26510 		movw	r0, #357
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1053              		.loc 1 277 0
 1054 01a4 0022     		movs	r2, #0
 1055 01a6 C0F2000B 		movt	fp, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1056              		.loc 1 276 0
 1057 01aa 2060     		str	r0, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1058              		.loc 1 277 0
 1059 01ac CBF80020 		str	r2, [fp, #0]
 1060              	.LVL86:
 1061              	.L66:
 1062              	.LBE162:
 1063              	.LBE161:
 365:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxTask2 < intqMIN_ACCEPTABLE_TASK_COUNT  )
 1064              		.loc 1 365 0
 1065 01b0 BEF1040F 		cmp	lr, #4
 1066 01b4 2ED8     		bhi	.L70
 368:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount2++;
 1067              		.loc 1 368 0
 1068 01b6 039A     		ldr	r2, [sp, #12]
 1069 01b8 511C     		adds	r1, r2, #1
 369:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( uxErrorCount2 > 2 )
 1070              		.loc 1 369 0
 1071 01ba 0229     		cmp	r1, #2
 368:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount2++;
 1072              		.loc 1 368 0
 1073 01bc 0391     		str	r1, [sp, #12]
 1074              	.LVL87:
 369:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					if( uxErrorCount2 > 2 )
 1075              		.loc 1 369 0
 1076 01be 05D9     		bls	.L67
 1077              	.LVL88:
 1078              	.LBB163:
 1079              	.LBB164:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1080              		.loc 1 276 0
 1081 01c0 40F27313 		movw	r3, #371
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1082              		.loc 1 277 0
 1083 01c4 0020     		movs	r0, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1084              		.loc 1 276 0
 1085 01c6 2360     		str	r3, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1086              		.loc 1 277 0
 1087 01c8 C8F80000 		str	r0, [r8, #0]
 1088              	.LVL89:
 1089              	.L67:
 1090              	.LBE164:
 1091              	.LBE163:
 379:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				if( uxInterrupts == 0 )
 1092              		.loc 1 379 0
 1093 01cc BCF1000F 		cmp	ip, #0
 1094 01d0 04D1     		bne	.L68
 1095              	.LVL90:
 1096              	.LBB165:
 1097              	.LBB166:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1098              		.loc 1 276 0
 1099 01d2 40F27D12 		movw	r2, #381
 1100 01d6 2260     		str	r2, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1101              		.loc 1 277 0
 1102 01d8 C8F800C0 		str	ip, [r8, #0]
 1103              	.LVL91:
 1104              	.L68:
 1105              	.LBE166:
 1106              	.LBE165:
 385:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				memset( ucNormallyEmptyReceivedValues, 0x00, sizeof( ucNormallyEmptyReceivedValues ) );
 1107              		.loc 1 385 0
 1108 01dc 40F20000 		movw	r0, #:lower16:.LANCHOR3
 1109 01e0 0021     		movs	r1, #0
 1110 01e2 C822     		movs	r2, #200
 1111 01e4 C0F20000 		movt	r0, #:upper16:.LANCHOR3
 1112 01e8 FFF7FEFF 		bl	memset
 1113              	.LVL92:
 387:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxHighPriorityLoops1++;
 1114              		.loc 1 387 0
 1115 01ec 029B     		ldr	r3, [sp, #8]
 1116 01ee 0299     		ldr	r1, [sp, #8]
 1117 01f0 1868     		ldr	r0, [r3, #0]
 388:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxValueForNormallyEmptyQueue = 0;
 1118              		.loc 1 388 0
 1119 01f2 0023     		movs	r3, #0
 387:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxHighPriorityLoops1++;
 1120              		.loc 1 387 0
 1121 01f4 421C     		adds	r2, r0, #1
 1122 01f6 0A60     		str	r2, [r1, #0]
 396:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskSuspend( NULL );
 1123              		.loc 1 396 0
 1124 01f8 1846     		mov	r0, r3
 388:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				uxValueForNormallyEmptyQueue = 0;
 1125              		.loc 1 388 0
 1126 01fa CAF80030 		str	r3, [sl, #0]
 396:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskSuspend( NULL );
 1127              		.loc 1 396 0
 1128 01fe FFF7FEFF 		bl	vTaskSuspend
 397:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				vTaskResume( xHighPriorityNormallyEmptyTask2 );
 1129              		.loc 1 397 0
 1130 0202 0198     		ldr	r0, [sp, #4]
 1131 0204 0068     		ldr	r0, [r0, #0]
 1132 0206 FFF7FEFF 		bl	vTaskResume
 1133 020a 2FE7     		b	.L91
 1134              	.LVL93:
 1135              	.L108:
 337:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask1++;
 1136              		.loc 1 337 0
 1137 020c 0130     		adds	r0, r0, #1
 1138              	.LVL94:
 1139 020e 89E7     		b	.L62
 1140              	.L100:
 1141 0210 0130     		adds	r0, r0, #1
 1142              	.LVL95:
 1143 0212 8EE7     		b	.L87
 1144              	.LVL96:
 1145              	.L70:
 376:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount2 = 0;
 1146              		.loc 1 376 0
 1147 0214 0021     		movs	r1, #0
 1148 0216 0391     		str	r1, [sp, #12]
 1149 0218 D8E7     		b	.L67
 1150              	.L69:
 362:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 					uxErrorCount1 = 0;
 1151              		.loc 1 362 0
 1152 021a 0023     		movs	r3, #0
 1153 021c 0493     		str	r3, [sp, #16]
 1154 021e C7E7     		b	.L66
 1155              	.LVL97:
 1156              	.L73:
 334:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
 1157              		.loc 1 334 0
 1158 0220 BBF1010F 		cmp	fp, #1
 337:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask1++;
 1159              		.loc 1 337 0
 1160 0224 08BF     		it	eq
 1161 0226 0096     		streq	r6, [sp, #0]
 334:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
 1162              		.loc 1 334 0
 1163 0228 3FF45DAF 		beq	.L76
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 1164              		.loc 1 339 0
 1165 022c BBF1020F 		cmp	fp, #2
 342:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask2++;
 1166              		.loc 1 342 0
 1167 0230 08BF     		it	eq
 1168 0232 B646     		moveq	lr, r6
 339:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
 1169              		.loc 1 339 0
 1170 0234 3FF457AF 		beq	.L76
 346:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxInterrupts++;
 1171              		.loc 1 346 0
 1172 0238 BBF1050F 		cmp	fp, #5
 1173 023c 08BF     		it	eq
 1174 023e B446     		moveq	ip, r6
 1175 0240 51E7     		b	.L76
 1176              	.LVL98:
 1177              	.L97:
 1178              	.LBB167:
 1179              	.LBB157:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1180              		.loc 1 276 0
 1181 0242 2160     		str	r1, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1182              		.loc 1 277 0
 1183 0244 5A46     		mov	r2, fp
 1184 0246 67E7     		b	.L81
 1185              	.LVL99:
 1186              	.L98:
 1187              	.LBE157:
 1188              	.LBE167:
 337:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 							uxTask1++;
 1189              		.loc 1 337 0
 1190 0248 0098     		ldr	r0, [sp, #0]
 1191 024a 0130     		adds	r0, r0, #1
 1192 024c 0090     		str	r0, [sp, #0]
 1193              	.LVL100:
 1194 024e 63E7     		b	.L81
 1195              		.cfi_endproc
 1196              	.LFE4:
 1198              		.section	.text.prvRecordValue_NormallyFull,"ax",%progbits
 1199              		.align	2
 1200              		.thumb
 1201              		.thumb_func
 1203              	prvRecordValue_NormallyFull:
 1204              	.LFB1:
 240:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1205              		.loc 1 240 0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 0
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209              		@ link register save eliminated.
 1210              	.LVL101:
 241:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 1211              		.loc 1 241 0
 1212 0000 C728     		cmp	r0, #199
 240:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1213              		.loc 1 240 0
 1214 0002 30B4     		push	{r4, r5}
 1215              	.LCFI8:
 1216              		.cfi_def_cfa_offset 8
 1217              		.cfi_offset 5, -4
 1218              		.cfi_offset 4, -8
 241:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 1219              		.loc 1 241 0
 1220 0004 06D8     		bhi	.L110
 1221              	.LVL102:
 1222              	.LBB172:
 1223              	.LBB173:
 245:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyFullReceivedValues[ uxValue ] != 0x00 )
 1224              		.loc 1 245 0
 1225 0006 40F20003 		movw	r3, #:lower16:.LANCHOR9
 1226 000a C0F20003 		movt	r3, #:upper16:.LANCHOR9
 1227 000e 1A5C     		ldrb	r2, [r3, r0]	@ zero_extendqisi2
 1228 0010 12B9     		cbnz	r2, .L113
 1229              	.L112:
 251:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyFullReceivedValues[ uxValue ] = uxSource;
 1230              		.loc 1 251 0
 1231 0012 1954     		strb	r1, [r3, r0]
 1232              	.LVL103:
 1233              	.L110:
 1234              	.LBE173:
 1235              	.LBE172:
 253:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 1236              		.loc 1 253 0
 1237 0014 30BC     		pop	{r4, r5}
 1238 0016 7047     		bx	lr
 1239              	.LVL104:
 1240              	.L113:
 1241              	.LBB177:
 1242              	.LBB176:
 1243              	.LBB174:
 1244              	.LBB175:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1245              		.loc 1 276 0
 1246 0018 40F20004 		movw	r4, #:lower16:.LANCHOR1
 1247 001c C0F20004 		movt	r4, #:upper16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1248              		.loc 1 277 0
 1249 0020 40F2000C 		movw	ip, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1250              		.loc 1 276 0
 1251 0024 F725     		movs	r5, #247
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1252              		.loc 1 277 0
 1253 0026 C0F2000C 		movt	ip, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1254              		.loc 1 276 0
 1255 002a 2560     		str	r5, [r4, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1256              		.loc 1 277 0
 1257 002c 0024     		movs	r4, #0
 1258 002e CCF80040 		str	r4, [ip, #0]
 1259 0032 EEE7     		b	.L112
 1260              	.LBE175:
 1261              	.LBE174:
 1262              	.LBE176:
 1263              	.LBE177:
 1264              		.cfi_endproc
 1265              	.LFE1:
 1267              		.section	.text.prvLowerPriorityNormallyFullTask,"ax",%progbits
 1268              		.align	2
 1269              		.thumb
 1270              		.thumb_func
 1272              	prvLowerPriorityNormallyFullTask:
 1273              	.LFB8:
 598:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 599:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 600:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 601:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static void prvLowerPriorityNormallyFullTask( void *pvParameters )
 602:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1274              		.loc 1 602 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 16
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278              	.LVL105:
 1279 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1280              	.LCFI9:
 1281              		.cfi_def_cfa_offset 36
 1282              		.cfi_offset 14, -4
 1283              		.cfi_offset 11, -8
 1284              		.cfi_offset 10, -12
 1285              		.cfi_offset 9, -16
 1286              		.cfi_offset 8, -20
 1287              		.cfi_offset 7, -24
 1288              		.cfi_offset 6, -28
 1289              		.cfi_offset 5, -32
 1290              		.cfi_offset 4, -36
 1291 0004 40F20003 		movw	r3, #:lower16:xHighPriorityNormallyFullTask1
 1292 0008 85B0     		sub	sp, sp, #20
 1293              	.LCFI10:
 1294              		.cfi_def_cfa_offset 56
 1295 000a 40F20005 		movw	r5, #:lower16:.LANCHOR7
 603:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** unsigned portBASE_TYPE uxValue, uxTxed = 9999;
 1296              		.loc 1 603 0
 1297 000e 04AE     		add	r6, sp, #16
 1298 0010 C0F20005 		movt	r5, #:upper16:.LANCHOR7
 1299 0014 40F20008 		movw	r8, #:lower16:.LANCHOR1
 1300 0018 40F20009 		movw	r9, #:lower16:.LANCHOR2
 1301 001c 40F20007 		movw	r7, #:lower16:.LANCHOR12
 1302 0020 42F20F70 		movw	r0, #9999
 1303              	.LVL106:
 1304 0024 C0F20003 		movt	r3, #:upper16:xHighPriorityNormallyFullTask1
 1305 0028 46F8040D 		str	r0, [r6, #-4]!
 1306              	.LVL107:
 1307 002c 0193     		str	r3, [sp, #4]
 1308 002e C0F20008 		movt	r8, #:upper16:.LANCHOR1
 1309 0032 C0F20009 		movt	r9, #:upper16:.LANCHOR2
 1310 0036 C0F20007 		movt	r7, #:upper16:.LANCHOR12
 604:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 605:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* The parameters are not being used so avoid compiler warnings. */
 606:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	( void ) pvParameters;
 607:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 608:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	for( ;; )
 609:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 610:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxTxed, intqONE_TICK_DELAY ) != errQUEUE_FULL )
 1311              		.loc 1 610 0
 1312 003a AA46     		mov	sl, r5
 1313              	.LBB178:
 1314              	.LBB179:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1315              		.loc 1 276 0
 1316 003c 40F2762B 		movw	fp, #630
 1317              	.LVL108:
 1318              	.L121:
 1319              	.LBE179:
 1320              	.LBE178:
 1321              		.loc 1 610 0
 1322 0040 3146     		mov	r1, r6
 1323 0042 0122     		movs	r2, #1
 1324 0044 0023     		movs	r3, #0
 1325 0046 2868     		ldr	r0, [r5, #0]
 1326 0048 FFF7FEFF 		bl	xQueueGenericSend
 611:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 612:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* We would only expect to succeed when the higher priority task
 613:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			is suspended. */
 614:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xTaskIsTaskSuspended( xHighPriorityNormallyFullTask1 ) == pdFALSE )
 615:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 616:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 617:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 618:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 619:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskResume( xHighPriorityNormallyFullTask1 );
 620:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxLowPriorityLoops2++;
 621:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 622:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		else
 623:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		{
 624:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			/* Raise our priority while we receive so we can preempt the higher
 625:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			priority task, and ensure we get the value from the queue. */
 626:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskPrioritySet( NULL, intqHIGHER_PRIORITY + 1 );
 1327              		.loc 1 626 0
 1328 004c 0421     		movs	r1, #4
 610:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxTxed, intqONE_TICK_DELAY ) != errQUEUE_FULL )
 1329              		.loc 1 610 0
 1330 004e 0446     		mov	r4, r0
 1331 0050 F0B9     		cbnz	r0, .L122
 1332              	.L116:
 1333              		.loc 1 626 0
 1334 0052 FFF7FEFF 		bl	vTaskPrioritySet
 627:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 628:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xQueueReceive( xNormallyFullQueue, &uxValue, portMAX_DELAY ) != pdPASS )
 1335              		.loc 1 628 0
 1336 0056 4FF0FF32 		mov	r2, #-1
 1337 005a 2346     		mov	r3, r4
 1338 005c 02A9     		add	r1, sp, #8
 1339 005e DAF80000 		ldr	r0, [sl, #0]
 1340 0062 FFF7FEFF 		bl	xQueueGenericReceive
 1341 0066 0128     		cmp	r0, #1
 1342              	.LBB181:
 1343              	.LBB180:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1344              		.loc 1 276 0
 1345 0068 1CBF     		itt	ne
 1346 006a C8F800B0 		strne	fp, [r8, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1347              		.loc 1 277 0
 1348 006e C9F80040 		strne	r4, [r9, #0]
 1349              	.LBE180:
 1350              	.LBE181:
 1351              		.loc 1 628 0
 1352 0072 20D0     		beq	.L123
 1353              	.L120:
 629:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 630:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvQueueAccessLogError( __LINE__ );
 631:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 632:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			else
 633:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			{
 634:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvRecordValue_NormallyFull( uxValue, intqLOW_PRIORITY_TASK );
 635:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			}
 636:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 637:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskPrioritySet( NULL, intqLOWER_PRIORITY );
 1354              		.loc 1 637 0
 1355 0074 0020     		movs	r0, #0
 1356 0076 0146     		mov	r1, r0
 1357 0078 FFF7FEFF 		bl	vTaskPrioritySet
 610:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxTxed, intqONE_TICK_DELAY ) != errQUEUE_FULL )
 1358              		.loc 1 610 0
 1359 007c 3146     		mov	r1, r6
 1360 007e 0122     		movs	r2, #1
 1361 0080 0023     		movs	r3, #0
 1362 0082 2868     		ldr	r0, [r5, #0]
 1363 0084 FFF7FEFF 		bl	xQueueGenericSend
 626:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskPrioritySet( NULL, intqHIGHER_PRIORITY + 1 );
 1364              		.loc 1 626 0
 1365 0088 0421     		movs	r1, #4
 610:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( xQueueSend( xNormallyFullQueue, &uxTxed, intqONE_TICK_DELAY ) != errQUEUE_FULL )
 1366              		.loc 1 610 0
 1367 008a 0446     		mov	r4, r0
 1368 008c 0028     		cmp	r0, #0
 1369 008e E0D0     		beq	.L116
 1370              	.L122:
 614:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			if( xTaskIsTaskSuspended( xHighPriorityNormallyFullTask1 ) == pdFALSE )
 1371              		.loc 1 614 0
 1372 0090 0199     		ldr	r1, [sp, #4]
 1373 0092 0868     		ldr	r0, [r1, #0]
 1374 0094 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1375 0098 28B9     		cbnz	r0, .L117
 1376              	.LVL109:
 1377              	.LBB182:
 1378              	.LBB183:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1379              		.loc 1 276 0
 1380 009a 4FF41A72 		mov	r2, #616
 1381 009e C8F80020 		str	r2, [r8, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1382              		.loc 1 277 0
 1383 00a2 C9F80000 		str	r0, [r9, #0]
 1384              	.LVL110:
 1385              	.L117:
 1386              	.LBE183:
 1387              	.LBE182:
 619:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			vTaskResume( xHighPriorityNormallyFullTask1 );
 1388              		.loc 1 619 0
 1389 00a6 0198     		ldr	r0, [sp, #4]
 1390 00a8 0068     		ldr	r0, [r0, #0]
 1391 00aa FFF7FEFF 		bl	vTaskResume
 620:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 			uxLowPriorityLoops2++;
 1392              		.loc 1 620 0
 1393 00ae 3B68     		ldr	r3, [r7, #0]
 1394 00b0 5C1C     		adds	r4, r3, #1
 1395 00b2 3C60     		str	r4, [r7, #0]
 1396 00b4 C4E7     		b	.L121
 1397              	.L123:
 634:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 				prvRecordValue_NormallyFull( uxValue, intqLOW_PRIORITY_TASK );
 1398              		.loc 1 634 0
 1399 00b6 0298     		ldr	r0, [sp, #8]
 1400 00b8 0321     		movs	r1, #3
 1401 00ba FFF7FEFF 		bl	prvRecordValue_NormallyFull
 1402 00be D9E7     		b	.L120
 1403              		.cfi_endproc
 1404              	.LFE8:
 1406              		.section	.text.vStartInterruptQueueTasks,"ax",%progbits
 1407              		.align	2
 1408              		.global	vStartInterruptQueueTasks
 1409              		.thumb
 1410              		.thumb_func
 1412              	vStartInterruptQueueTasks:
 1413              	.LFB0:
 214:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1414              		.loc 1 214 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 0
 1417              		@ frame_needed = 0, uses_anonymous_args = 0
 1418 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1419              	.LCFI11:
 1420              		.cfi_def_cfa_offset 20
 1421              		.cfi_offset 14, -4
 1422              		.cfi_offset 7, -8
 1423              		.cfi_offset 6, -12
 1424              		.cfi_offset 5, -16
 1425              		.cfi_offset 4, -20
 216:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H1QRx", configMINIMAL_STAC
 1426              		.loc 1 216 0
 1427 0002 40F20005 		movw	r5, #:lower16:prvHigherPriorityNormallyEmptyTask
 1428 0006 C0F20005 		movt	r5, #:upper16:prvHigherPriorityNormallyEmptyTask
 1429 000a 40F20007 		movw	r7, #:lower16:xHighPriorityNormallyEmptyTask1
 1430 000e 40F20001 		movw	r1, #:lower16:.LC0
 214:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1431              		.loc 1 214 0
 1432 0012 85B0     		sub	sp, sp, #20
 1433              	.LCFI12:
 1434              		.cfi_def_cfa_offset 40
 216:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H1QRx", configMINIMAL_STAC
 1435              		.loc 1 216 0
 1436 0014 0024     		movs	r4, #0
 1437 0016 0326     		movs	r6, #3
 1438 0018 C0F20007 		movt	r7, #:upper16:xHighPriorityNormallyEmptyTask1
 1439 001c C0F20001 		movt	r1, #:upper16:.LC0
 1440 0020 7822     		movs	r2, #120
 1441 0022 0123     		movs	r3, #1
 1442 0024 2846     		mov	r0, r5
 1443 0026 8DE8C000 		stmia	sp, {r6, r7}
 1444 002a 0294     		str	r4, [sp, #8]
 1445 002c 0394     		str	r4, [sp, #12]
 217:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H2QRx", configMINIMAL_STAC
 1446              		.loc 1 217 0
 1447 002e 40F20007 		movw	r7, #:lower16:xHighPriorityNormallyEmptyTask2
 216:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H1QRx", configMINIMAL_STAC
 1448              		.loc 1 216 0
 1449 0032 FFF7FEFF 		bl	xTaskGenericCreate
 217:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H2QRx", configMINIMAL_STAC
 1450              		.loc 1 217 0
 1451 0036 40F20001 		movw	r1, #:lower16:.LC1
 1452 003a C0F20007 		movt	r7, #:upper16:xHighPriorityNormallyEmptyTask2
 1453 003e C0F20001 		movt	r1, #:upper16:.LC1
 1454 0042 7822     		movs	r2, #120
 1455 0044 0223     		movs	r3, #2
 1456 0046 2846     		mov	r0, r5
 218:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvLowerPriorityNormallyEmptyTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_
 1457              		.loc 1 218 0
 1458 0048 40F20005 		movw	r5, #:lower16:.LC2
 1459 004c C0F20005 		movt	r5, #:upper16:.LC2
 217:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H2QRx", configMINIMAL_STAC
 1460              		.loc 1 217 0
 1461 0050 8DE8C000 		stmia	sp, {r6, r7}
 1462 0054 0294     		str	r4, [sp, #8]
 1463 0056 0394     		str	r4, [sp, #12]
 1464 0058 FFF7FEFF 		bl	xTaskGenericCreate
 218:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvLowerPriorityNormallyEmptyTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_
 1465              		.loc 1 218 0
 1466 005c 40F20000 		movw	r0, #:lower16:prvLowerPriorityNormallyEmptyTask
 1467 0060 2946     		mov	r1, r5
 1468 0062 7822     		movs	r2, #120
 1469 0064 2346     		mov	r3, r4
 1470 0066 C0F20000 		movt	r0, #:upper16:prvLowerPriorityNormallyEmptyTask
 1471 006a 0094     		str	r4, [sp, #0]
 1472 006c 0194     		str	r4, [sp, #4]
 1473 006e 0294     		str	r4, [sp, #8]
 1474 0070 0394     		str	r4, [sp, #12]
 219:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv1stHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H1QTx", configMINIMAL_ST
 1475              		.loc 1 219 0
 1476 0072 40F20007 		movw	r7, #:lower16:xHighPriorityNormallyFullTask1
 218:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvLowerPriorityNormallyEmptyTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_
 1477              		.loc 1 218 0
 1478 0076 FFF7FEFF 		bl	xTaskGenericCreate
 219:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv1stHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H1QTx", configMINIMAL_ST
 1479              		.loc 1 219 0
 1480 007a 40F20000 		movw	r0, #:lower16:prv1stHigherPriorityNormallyFullTask
 1481 007e 40F20001 		movw	r1, #:lower16:.LC3
 1482 0082 C0F20007 		movt	r7, #:upper16:xHighPriorityNormallyFullTask1
 1483 0086 C0F20001 		movt	r1, #:upper16:.LC3
 1484 008a 7822     		movs	r2, #120
 1485 008c 0123     		movs	r3, #1
 1486 008e C0F20000 		movt	r0, #:upper16:prv1stHigherPriorityNormallyFullTask
 1487 0092 8DE8C000 		stmia	sp, {r6, r7}
 1488 0096 0294     		str	r4, [sp, #8]
 1489 0098 0394     		str	r4, [sp, #12]
 220:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv2ndHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H2QTx", configMINIMAL_ST
 1490              		.loc 1 220 0
 1491 009a 40F20007 		movw	r7, #:lower16:xHighPriorityNormallyFullTask2
 219:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv1stHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H1QTx", configMINIMAL_ST
 1492              		.loc 1 219 0
 1493 009e FFF7FEFF 		bl	xTaskGenericCreate
 220:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prv2ndHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H2QTx", configMINIMAL_ST
 1494              		.loc 1 220 0
 1495 00a2 40F20000 		movw	r0, #:lower16:prv2ndHigherPriorityNormallyFullTask
 1496 00a6 40F20001 		movw	r1, #:lower16:.LC4
 1497 00aa C0F20001 		movt	r1, #:upper16:.LC4
 1498 00ae 7822     		movs	r2, #120
 1499 00b0 0223     		movs	r3, #2
 1500 00b2 C0F20007 		movt	r7, #:upper16:xHighPriorityNormallyFullTask2
 1501 00b6 C0F20000 		movt	r0, #:upper16:prv2ndHigherPriorityNormallyFullTask
 1502 00ba 8DE8C000 		stmia	sp, {r6, r7}
 1503 00be 0294     		str	r4, [sp, #8]
 1504 00c0 0394     		str	r4, [sp, #12]
 1505 00c2 FFF7FEFF 		bl	xTaskGenericCreate
 221:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xTaskCreate( prvLowerPriorityNormallyFullTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_S
 1506              		.loc 1 221 0
 1507 00c6 40F20000 		movw	r0, #:lower16:prvLowerPriorityNormallyFullTask
 1508 00ca 2346     		mov	r3, r4
 1509 00cc 2946     		mov	r1, r5
 1510 00ce 7822     		movs	r2, #120
 1511 00d0 C0F20000 		movt	r0, #:upper16:prvLowerPriorityNormallyFullTask
 1512 00d4 0094     		str	r4, [sp, #0]
 1513 00d6 0194     		str	r4, [sp, #4]
 1514 00d8 0294     		str	r4, [sp, #8]
 1515 00da 0394     		str	r4, [sp, #12]
 1516 00dc FFF7FEFF 		bl	xTaskGenericCreate
 225:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xNormallyFullQueue = xQueueCreate( intqQUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( unsigned p
 1517              		.loc 1 225 0
 1518 00e0 0421     		movs	r1, #4
 1519 00e2 2246     		mov	r2, r4
 1520 00e4 0A20     		movs	r0, #10
 1521 00e6 FFF7FEFF 		bl	xQueueGenericCreate
 1522 00ea 40F20001 		movw	r1, #:lower16:.LANCHOR7
 1523 00ee C0F20001 		movt	r1, #:upper16:.LANCHOR7
 1524 00f2 0860     		str	r0, [r1, #0]
 226:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xNormallyEmptyQueue = xQueueCreate( intqQUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( unsigned 
 1525              		.loc 1 226 0
 1526 00f4 2246     		mov	r2, r4
 1527 00f6 0421     		movs	r1, #4
 1528 00f8 0A20     		movs	r0, #10
 1529 00fa FFF7FEFF 		bl	xQueueGenericCreate
 1530 00fe 40F20003 		movw	r3, #:lower16:.LANCHOR0
 1531 0102 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 1532 0106 1860     		str	r0, [r3, #0]
 236:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 1533              		.loc 1 236 0
 1534 0108 05B0     		add	sp, sp, #20
 1535 010a F0BD     		pop	{r4, r5, r6, r7, pc}
 1536              		.cfi_endproc
 1537              	.LFE0:
 1539              		.section	.text.xFirstTimerHandler,"ax",%progbits
 1540              		.align	2
 1541              		.global	xFirstTimerHandler
 1542              		.thumb
 1543              		.thumb_func
 1545              	xFirstTimerHandler:
 1546              	.LFB9:
 638:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		}
 639:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 640:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 641:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 642:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 643:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xFirstTimerHandler( void )
 644:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1547              		.loc 1 644 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 8
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1552              	.LCFI13:
 1553              		.cfi_def_cfa_offset 20
 1554              		.cfi_offset 14, -4
 1555              		.cfi_offset 7, -8
 1556              		.cfi_offset 6, -12
 1557              		.cfi_offset 5, -16
 1558              		.cfi_offset 4, -20
 645:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE, uxRxedValue;
 646:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static unsigned portBASE_TYPE uxNextOperation = 0;
 647:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 648:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Called from a timer interrupt.  Perform various read and write
 649:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	accesses on the queues. */
 650:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 651:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxNextOperation++;
 1559              		.loc 1 651 0
 1560 0002 40F20003 		movw	r3, #:lower16:.LANCHOR13
 1561 0006 C0F20003 		movt	r3, #:upper16:.LANCHOR13
 1562 000a 1868     		ldr	r0, [r3, #0]
 645:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE, uxRxedValue;
 1563              		.loc 1 645 0
 1564 000c 0025     		movs	r5, #0
 1565              		.loc 1 651 0
 1566 000e 421C     		adds	r2, r0, #1
 644:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1567              		.loc 1 644 0
 1568 0010 83B0     		sub	sp, sp, #12
 1569              	.LCFI14:
 1570              		.cfi_def_cfa_offset 32
 1571              		.loc 1 651 0
 1572 0012 1A60     		str	r2, [r3, #0]
 652:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 653:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxNextOperation & ( unsigned portBASE_TYPE ) 0x01 )
 1573              		.loc 1 653 0
 1574 0014 D307     		lsls	r3, r2, #31
 645:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE, uxRxedValue;
 1575              		.loc 1 645 0
 1576 0016 0095     		str	r5, [sp, #0]
 1577              	.LVL111:
 1578              		.loc 1 653 0
 1579 0018 5CD5     		bpl	.L126
 654:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 655:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_TX();
 1580              		.loc 1 655 0
 1581 001a 40F20004 		movw	r4, #:lower16:.LANCHOR0
 1582 001e C0F20004 		movt	r4, #:upper16:.LANCHOR0
 1583 0022 2068     		ldr	r0, [r4, #0]
 1584 0024 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1585 0028 0128     		cmp	r0, #1
 1586 002a 14D0     		beq	.L127
 1587              	.LVL112:
 1588              	.LBB184:
 1589              		.loc 1 655 0 is_stmt 0 discriminator 1
 1590              	@ 655 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1591 002c 4FF0BF00 			mov r0, #191								
 1592 0030 80F31188 		msr basepri, r0							
 1593              	
 1594              	@ 0 "" 2
 1595              		.thumb
 1596 0034 40F20006 		movw	r6, #:lower16:.LANCHOR5
 1597 0038 C0F20006 		movt	r6, #:upper16:.LANCHOR5
 1598 003c 3168     		ldr	r1, [r6, #0]
 1599 003e 2068     		ldr	r0, [r4, #0]
 1600 0040 4F1C     		adds	r7, r1, #1
 1601 0042 6A46     		mov	r2, sp
 1602 0044 3146     		mov	r1, r6
 1603 0046 2B46     		mov	r3, r5
 1604 0048 3760     		str	r7, [r6, #0]
 1605 004a FFF7FEFF 		bl	xQueueGenericSendFromISR
 1606              	@ 655 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1607 004e 4FF00000 			mov r0, #0					
 1608 0052 80F31188 		msr basepri, r0				
 1609              	
 1610              	@ 0 "" 2
 1611              	.LVL113:
 1612              		.thumb
 1613              	.L127:
 1614              	.LBE184:
 656:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_TX();
 1615              		.loc 1 656 0 is_stmt 1
 1616 0056 2068     		ldr	r0, [r4, #0]
 1617 0058 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1618 005c 40F20007 		movw	r7, #:lower16:.LANCHOR0
 1619 0060 0128     		cmp	r0, #1
 1620 0062 C0F20007 		movt	r7, #:upper16:.LANCHOR0
 1621 0066 14D0     		beq	.L128
 1622              	.LVL114:
 1623              	.LBB185:
 1624              		.loc 1 656 0 is_stmt 0 discriminator 1
 1625              	@ 656 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1626 0068 4FF0BF00 			mov r0, #191								
 1627 006c 80F31188 		msr basepri, r0							
 1628              	
 1629              	@ 0 "" 2
 1630              		.thumb
 1631 0070 40F20005 		movw	r5, #:lower16:.LANCHOR5
 1632 0074 C0F20005 		movt	r5, #:upper16:.LANCHOR5
 1633 0078 2A68     		ldr	r2, [r5, #0]
 1634 007a 3868     		ldr	r0, [r7, #0]
 1635 007c 561C     		adds	r6, r2, #1
 1636 007e 2946     		mov	r1, r5
 1637 0080 6A46     		mov	r2, sp
 1638 0082 0023     		movs	r3, #0
 1639 0084 2E60     		str	r6, [r5, #0]
 1640 0086 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1641              	@ 656 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1642 008a 4FF00000 			mov r0, #0					
 1643 008e 80F31188 		msr basepri, r0				
 1644              	
 1645              	@ 0 "" 2
 1646              	.LVL115:
 1647              		.thumb
 1648              	.L128:
 1649              	.LBE185:
 657:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_TX();
 1650              		.loc 1 657 0 is_stmt 1
 1651 0092 2068     		ldr	r0, [r4, #0]
 1652 0094 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1653 0098 40F20006 		movw	r6, #:lower16:.LANCHOR0
 1654 009c 0128     		cmp	r0, #1
 1655 009e C0F20006 		movt	r6, #:upper16:.LANCHOR0
 1656 00a2 14D0     		beq	.L129
 1657              	.LVL116:
 1658              	.LBB186:
 1659              		.loc 1 657 0 is_stmt 0 discriminator 1
 1660              	@ 657 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1661 00a4 4FF0BF00 			mov r0, #191								
 1662 00a8 80F31188 		msr basepri, r0							
 1663              	
 1664              	@ 0 "" 2
 1665              		.thumb
 1666 00ac 40F20004 		movw	r4, #:lower16:.LANCHOR5
 1667 00b0 C0F20004 		movt	r4, #:upper16:.LANCHOR5
 1668 00b4 2568     		ldr	r5, [r4, #0]
 1669 00b6 3068     		ldr	r0, [r6, #0]
 1670 00b8 0135     		adds	r5, r5, #1
 1671 00ba 2146     		mov	r1, r4
 1672 00bc 6A46     		mov	r2, sp
 1673 00be 0023     		movs	r3, #0
 1674 00c0 2560     		str	r5, [r4, #0]
 1675 00c2 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1676              	@ 657 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1677 00c6 4FF00000 			mov r0, #0					
 1678 00ca 80F31188 		msr basepri, r0				
 1679              	
 1680              	@ 0 "" 2
 1681              	.LVL117:
 1682              		.thumb
 1683              	.L129:
 1684              	.LBE186:
 658:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 659:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	else
 660:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 661:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 662:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 663:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 664:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 665:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 666:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	return xHigherPriorityTaskWoken;
 667:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 1685              		.loc 1 667 0 is_stmt 1
 1686 00ce 0098     		ldr	r0, [sp, #0]
 1687 00d0 03B0     		add	sp, sp, #12
 1688 00d2 F0BD     		pop	{r4, r5, r6, r7, pc}
 1689              	.LVL118:
 1690              	.L126:
 661:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1691              		.loc 1 661 0
 1692 00d4 40F20004 		movw	r4, #:lower16:.LANCHOR7
 1693 00d8 C0F20004 		movt	r4, #:upper16:.LANCHOR7
 1694 00dc 2068     		ldr	r0, [r4, #0]
 1695 00de 01A9     		add	r1, sp, #4
 1696 00e0 6A46     		mov	r2, sp
 1697 00e2 FFF7FEFF 		bl	xQueueReceiveFromISR
 1698 00e6 0128     		cmp	r0, #1
 1699 00e8 12D0     		beq	.L132
 1700              	.LVL119:
 1701              	.L130:
 662:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1702              		.loc 1 662 0
 1703 00ea 2068     		ldr	r0, [r4, #0]
 1704 00ec 01A9     		add	r1, sp, #4
 1705 00ee 6A46     		mov	r2, sp
 1706 00f0 FFF7FEFF 		bl	xQueueReceiveFromISR
 1707 00f4 0128     		cmp	r0, #1
 1708 00f6 10D0     		beq	.L133
 1709              	.L131:
 663:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1710              		.loc 1 663 0
 1711 00f8 2068     		ldr	r0, [r4, #0]
 1712 00fa 01A9     		add	r1, sp, #4
 1713 00fc 6A46     		mov	r2, sp
 1714 00fe FFF7FEFF 		bl	xQueueReceiveFromISR
 1715 0102 0128     		cmp	r0, #1
 1716 0104 E3D1     		bne	.L129
 663:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1717              		.loc 1 663 0 is_stmt 0 discriminator 1
 1718 0106 0198     		ldr	r0, [sp, #4]
 1719 0108 0521     		movs	r1, #5
 1720 010a FFF7FEFF 		bl	prvRecordValue_NormallyFull
 1721 010e DEE7     		b	.L129
 1722              	.LVL120:
 1723              	.L132:
 661:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1724              		.loc 1 661 0 is_stmt 1 discriminator 1
 1725 0110 0198     		ldr	r0, [sp, #4]
 1726 0112 0521     		movs	r1, #5
 1727 0114 FFF7FEFF 		bl	prvRecordValue_NormallyFull
 1728 0118 E7E7     		b	.L130
 1729              	.L133:
 662:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1730              		.loc 1 662 0 discriminator 1
 1731 011a 0198     		ldr	r0, [sp, #4]
 1732 011c 0521     		movs	r1, #5
 1733 011e FFF7FEFF 		bl	prvRecordValue_NormallyFull
 1734 0122 E9E7     		b	.L131
 1735              		.cfi_endproc
 1736              	.LFE9:
 1738              		.section	.text.xSecondTimerHandler,"ax",%progbits
 1739              		.align	2
 1740              		.global	xSecondTimerHandler
 1741              		.thumb
 1742              		.thumb_func
 1744              	xSecondTimerHandler:
 1745              	.LFB10:
 668:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 669:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 670:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xSecondTimerHandler( void )
 671:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1746              		.loc 1 671 0
 1747              		.cfi_startproc
 1748              		@ args = 0, pretend = 0, frame = 8
 1749              		@ frame_needed = 0, uses_anonymous_args = 0
 1750 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1751              	.LCFI15:
 1752              		.cfi_def_cfa_offset 24
 1753              		.cfi_offset 14, -4
 1754              		.cfi_offset 8, -8
 1755              		.cfi_offset 7, -12
 1756              		.cfi_offset 6, -16
 1757              		.cfi_offset 5, -20
 1758              		.cfi_offset 4, -24
 672:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** unsigned portBASE_TYPE uxRxedValue;
 673:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 674:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static unsigned portBASE_TYPE uxNextOperation = 0;
 675:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 676:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* Called from a timer interrupt.  Perform various read and write
 677:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	accesses on the queues. */
 678:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 679:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxNextOperation++;
 1759              		.loc 1 679 0
 1760 0004 40F20003 		movw	r3, #:lower16:.LANCHOR14
 1761 0008 C0F20003 		movt	r3, #:upper16:.LANCHOR14
 1762 000c 1868     		ldr	r0, [r3, #0]
 673:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 1763              		.loc 1 673 0
 1764 000e 0026     		movs	r6, #0
 1765              		.loc 1 679 0
 1766 0010 421C     		adds	r2, r0, #1
 671:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 1767              		.loc 1 671 0
 1768 0012 82B0     		sub	sp, sp, #8
 1769              	.LCFI16:
 1770              		.cfi_def_cfa_offset 32
 1771              		.loc 1 679 0
 1772 0014 1A60     		str	r2, [r3, #0]
 680:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 681:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxNextOperation & ( unsigned portBASE_TYPE ) 0x01 )
 1773              		.loc 1 681 0
 1774 0016 D207     		lsls	r2, r2, #31
 673:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 1775              		.loc 1 673 0
 1776 0018 0196     		str	r6, [sp, #4]
 1777              	.LVL121:
 1778              		.loc 1 681 0
 1779 001a 71D5     		bpl	.L135
 682:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 683:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_TX();
 1780              		.loc 1 683 0
 1781 001c 40F20004 		movw	r4, #:lower16:.LANCHOR0
 1782 0020 C0F20004 		movt	r4, #:upper16:.LANCHOR0
 1783 0024 2068     		ldr	r0, [r4, #0]
 1784 0026 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1785 002a 0128     		cmp	r0, #1
 1786 002c 08BF     		it	eq
 1787 002e 01AD     		addeq	r5, sp, #4
 1788 0030 17D0     		beq	.L136
 1789              	.LVL122:
 1790              	.LBB187:
 1791              		.loc 1 683 0 is_stmt 0 discriminator 1
 1792              	@ 683 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1793 0032 4FF0BF00 			mov r0, #191								
 1794 0036 80F31188 		msr basepri, r0							
 1795              	
 1796              	@ 0 "" 2
 1797              		.thumb
 1798 003a 40F20007 		movw	r7, #:lower16:.LANCHOR5
 1799 003e C0F20007 		movt	r7, #:upper16:.LANCHOR5
 1800 0042 3968     		ldr	r1, [r7, #0]
 1801 0044 01AD     		add	r5, sp, #4
 1802 0046 01F1010E 		add	lr, r1, #1
 1803 004a 2068     		ldr	r0, [r4, #0]
 1804 004c 3946     		mov	r1, r7
 1805 004e 2A46     		mov	r2, r5
 1806 0050 3346     		mov	r3, r6
 1807 0052 C7F800E0 		str	lr, [r7, #0]
 1808 0056 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1809              	@ 683 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1810 005a 4FF00000 			mov r0, #0					
 1811 005e 80F31188 		msr basepri, r0				
 1812              	
 1813              	@ 0 "" 2
 1814              	.LVL123:
 1815              		.thumb
 1816              	.L136:
 1817              	.LBE187:
 684:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_TX();
 1818              		.loc 1 684 0 is_stmt 1
 1819 0062 2068     		ldr	r0, [r4, #0]
 1820 0064 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1821 0068 40F20008 		movw	r8, #:lower16:.LANCHOR0
 1822 006c 0128     		cmp	r0, #1
 1823 006e C0F20008 		movt	r8, #:upper16:.LANCHOR0
 1824 0072 15D0     		beq	.L137
 1825              	.LVL124:
 1826              	.LBB188:
 1827              		.loc 1 684 0 is_stmt 0 discriminator 1
 1828              	@ 684 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1829 0074 4FF0BF00 			mov r0, #191								
 1830 0078 80F31188 		msr basepri, r0							
 1831              	
 1832              	@ 0 "" 2
 1833              		.thumb
 1834 007c 40F20006 		movw	r6, #:lower16:.LANCHOR5
 1835 0080 C0F20006 		movt	r6, #:upper16:.LANCHOR5
 1836 0084 3768     		ldr	r7, [r6, #0]
 1837 0086 D8F80000 		ldr	r0, [r8, #0]
 1838 008a 0137     		adds	r7, r7, #1
 1839 008c 3146     		mov	r1, r6
 1840 008e 2A46     		mov	r2, r5
 1841 0090 0023     		movs	r3, #0
 1842 0092 3760     		str	r7, [r6, #0]
 1843 0094 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1844              	@ 684 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1845 0098 4FF00000 			mov r0, #0					
 1846 009c 80F31188 		msr basepri, r0				
 1847              	
 1848              	@ 0 "" 2
 1849              	.LVL125:
 1850              		.thumb
 1851              	.L137:
 1852              	.LBE188:
 685:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 686:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_RX();
 1853              		.loc 1 686 0 is_stmt 1
 1854 00a0 2068     		ldr	r0, [r4, #0]
 1855 00a2 6946     		mov	r1, sp
 1856 00a4 2A46     		mov	r2, r5
 1857 00a6 FFF7FEFF 		bl	xQueueReceiveFromISR
 1858 00aa 0128     		cmp	r0, #1
 1859 00ac 00F0AD80 		beq	.L138
 1860              	.LVL126:
 1861              	.LBB189:
 1862              	.LBB190:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1863              		.loc 1 276 0
 1864 00b0 40F20000 		movw	r0, #:lower16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1865              		.loc 1 277 0
 1866 00b4 40F2000C 		movw	ip, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1867              		.loc 1 276 0
 1868 00b8 C0F20000 		movt	r0, #:upper16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1869              		.loc 1 277 0
 1870 00bc C0F2000C 		movt	ip, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1871              		.loc 1 276 0
 1872 00c0 40F2AE23 		movw	r3, #686
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1873              		.loc 1 277 0
 1874 00c4 0022     		movs	r2, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1875              		.loc 1 276 0
 1876 00c6 0360     		str	r3, [r0, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1877              		.loc 1 277 0
 1878 00c8 CCF80020 		str	r2, [ip, #0]
 1879              	.LVL127:
 1880              	.L139:
 1881              	.LBE190:
 1882              	.LBE189:
 687:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_RX();
 1883              		.loc 1 687 0
 1884 00cc 2068     		ldr	r0, [r4, #0]
 1885 00ce 6946     		mov	r1, sp
 1886 00d0 2A46     		mov	r2, r5
 1887 00d2 FFF7FEFF 		bl	xQueueReceiveFromISR
 1888 00d6 0128     		cmp	r0, #1
 1889 00d8 00F0B880 		beq	.L141
 1890              	.LVL128:
 1891              	.LBB191:
 1892              	.LBB192:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1893              		.loc 1 276 0
 1894 00dc 40F2000E 		movw	lr, #:lower16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1895              		.loc 1 277 0
 1896 00e0 40F20003 		movw	r3, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1897              		.loc 1 276 0
 1898 00e4 C0F2000E 		movt	lr, #:upper16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1899              		.loc 1 277 0
 1900 00e8 C0F20003 		movt	r3, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1901              		.loc 1 276 0
 1902 00ec 40F2AF20 		movw	r0, #687
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1903              		.loc 1 277 0
 1904 00f0 0022     		movs	r2, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 1905              		.loc 1 276 0
 1906 00f2 CEF80000 		str	r0, [lr, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 1907              		.loc 1 277 0
 1908 00f6 1A60     		str	r2, [r3, #0]
 1909              	.LVL129:
 1910              	.L142:
 1911              	.LBE192:
 1912              	.LBE191:
 688:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 689:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	else
 690:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 691:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 692:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 693:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 694:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 695:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 696:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 697:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 698:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	return xHigherPriorityTaskWoken;
 699:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 1913              		.loc 1 699 0
 1914 00f8 0198     		ldr	r0, [sp, #4]
 1915 00fa 02B0     		add	sp, sp, #8
 1916 00fc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1917              	.LVL130:
 1918              	.L135:
 691:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 1919              		.loc 1 691 0
 1920 0100 40F20004 		movw	r4, #:lower16:.LANCHOR7
 1921 0104 C0F20004 		movt	r4, #:upper16:.LANCHOR7
 1922 0108 2068     		ldr	r0, [r4, #0]
 1923 010a 6946     		mov	r1, sp
 1924 010c 01AA     		add	r2, sp, #4
 1925 010e FFF7FEFF 		bl	xQueueReceiveFromISR
 1926 0112 0128     		cmp	r0, #1
 1927 0114 00F09580 		beq	.L150
 1928              	.LVL131:
 1929              	.L144:
 692:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 1930              		.loc 1 692 0
 1931 0118 2068     		ldr	r0, [r4, #0]
 1932 011a FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1933 011e 40F20007 		movw	r7, #:lower16:.LANCHOR7
 1934 0122 0128     		cmp	r0, #1
 1935 0124 C0F20007 		movt	r7, #:upper16:.LANCHOR7
 1936 0128 14D0     		beq	.L145
 1937              	.LVL132:
 1938              	.LBB193:
 692:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 1939              		.loc 1 692 0 is_stmt 0 discriminator 1
 1940              	@ 692 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1941 012a 4FF0BF00 			mov r0, #191								
 1942 012e 80F31188 		msr basepri, r0							
 1943              	
 1944              	@ 0 "" 2
 1945              		.thumb
 1946 0132 40F20005 		movw	r5, #:lower16:.LANCHOR6
 1947 0136 C0F20005 		movt	r5, #:upper16:.LANCHOR6
 1948 013a 2A68     		ldr	r2, [r5, #0]
 1949 013c 3868     		ldr	r0, [r7, #0]
 1950 013e 561C     		adds	r6, r2, #1
 1951 0140 2946     		mov	r1, r5
 1952 0142 01AA     		add	r2, sp, #4
 1953 0144 0023     		movs	r3, #0
 1954 0146 2E60     		str	r6, [r5, #0]
 1955 0148 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1956              	@ 692 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1957 014c 4FF00000 			mov r0, #0					
 1958 0150 80F31188 		msr basepri, r0				
 1959              	
 1960              	@ 0 "" 2
 1961              	.LVL133:
 1962              		.thumb
 1963              	.L145:
 1964              	.LBE193:
 693:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 1965              		.loc 1 693 0 is_stmt 1
 1966 0154 2068     		ldr	r0, [r4, #0]
 1967 0156 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 1968 015a 40F20007 		movw	r7, #:lower16:.LANCHOR7
 1969 015e 0128     		cmp	r0, #1
 1970 0160 C0F20007 		movt	r7, #:upper16:.LANCHOR7
 1971 0164 14D0     		beq	.L146
 1972              	.LVL134:
 1973              	.LBB194:
 693:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 1974              		.loc 1 693 0 is_stmt 0 discriminator 1
 1975              	@ 693 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1976 0166 4FF0BF00 			mov r0, #191								
 1977 016a 80F31188 		msr basepri, r0							
 1978              	
 1979              	@ 0 "" 2
 1980              		.thumb
 1981 016e 40F20005 		movw	r5, #:lower16:.LANCHOR6
 1982 0172 C0F20005 		movt	r5, #:upper16:.LANCHOR6
 1983 0176 2B68     		ldr	r3, [r5, #0]
 1984 0178 3868     		ldr	r0, [r7, #0]
 1985 017a 5F1C     		adds	r7, r3, #1
 1986 017c 2946     		mov	r1, r5
 1987 017e 01AA     		add	r2, sp, #4
 1988 0180 0023     		movs	r3, #0
 1989 0182 2F60     		str	r7, [r5, #0]
 1990 0184 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1991              	@ 693 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 1992 0188 4FF00000 			mov r0, #0					
 1993 018c 80F31188 		msr basepri, r0				
 1994              	
 1995              	@ 0 "" 2
 1996              	.LVL135:
 1997              		.thumb
 1998              	.L146:
 1999              	.LBE194:
 694:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 2000              		.loc 1 694 0 is_stmt 1
 2001 0190 2068     		ldr	r0, [r4, #0]
 2002 0192 FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 2003 0196 40F20007 		movw	r7, #:lower16:.LANCHOR7
 2004 019a 0128     		cmp	r0, #1
 2005 019c C0F20007 		movt	r7, #:upper16:.LANCHOR7
 2006 01a0 14D0     		beq	.L147
 2007              	.LVL136:
 2008              	.LBB195:
 694:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 2009              		.loc 1 694 0 is_stmt 0 discriminator 1
 2010              	@ 694 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 2011 01a2 4FF0BF00 			mov r0, #191								
 2012 01a6 80F31188 		msr basepri, r0							
 2013              	
 2014              	@ 0 "" 2
 2015              		.thumb
 2016 01aa 40F20005 		movw	r5, #:lower16:.LANCHOR6
 2017 01ae C0F20005 		movt	r5, #:upper16:.LANCHOR6
 2018 01b2 2968     		ldr	r1, [r5, #0]
 2019 01b4 3868     		ldr	r0, [r7, #0]
 2020 01b6 4E1C     		adds	r6, r1, #1
 2021 01b8 01AA     		add	r2, sp, #4
 2022 01ba 2946     		mov	r1, r5
 2023 01bc 0023     		movs	r3, #0
 2024 01be 2E60     		str	r6, [r5, #0]
 2025 01c0 FFF7FEFF 		bl	xQueueGenericSendFromISR
 2026              	@ 694 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 2027 01c4 4FF00000 			mov r0, #0					
 2028 01c8 80F31188 		msr basepri, r0				
 2029              	
 2030              	@ 0 "" 2
 2031              	.LVL137:
 2032              		.thumb
 2033              	.L147:
 2034              	.LBE195:
 695:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 2035              		.loc 1 695 0 is_stmt 1
 2036 01cc 2068     		ldr	r0, [r4, #0]
 2037 01ce FFF7FEFF 		bl	xQueueIsQueueFullFromISR
 2038 01d2 40F20006 		movw	r6, #:lower16:.LANCHOR7
 2039 01d6 0128     		cmp	r0, #1
 2040 01d8 C0F20006 		movt	r6, #:upper16:.LANCHOR7
 2041 01dc 8CD0     		beq	.L142
 2042              	.LVL138:
 2043              	.LBB196:
 695:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_TX();
 2044              		.loc 1 695 0 is_stmt 0 discriminator 1
 2045              	@ 695 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 2046 01de 4FF0BF00 			mov r0, #191								
 2047 01e2 80F31188 		msr basepri, r0							
 2048              	
 2049              	@ 0 "" 2
 2050              		.thumb
 2051 01e6 40F20004 		movw	r4, #:lower16:.LANCHOR6
 2052 01ea C0F20004 		movt	r4, #:upper16:.LANCHOR6
 2053 01ee 2568     		ldr	r5, [r4, #0]
 2054 01f0 3068     		ldr	r0, [r6, #0]
 2055 01f2 0135     		adds	r5, r5, #1
 2056 01f4 2146     		mov	r1, r4
 2057 01f6 01AA     		add	r2, sp, #4
 2058 01f8 0023     		movs	r3, #0
 2059 01fa 2560     		str	r5, [r4, #0]
 2060 01fc FFF7FEFF 		bl	xQueueGenericSendFromISR
 2061              	@ 695 "../FreeRTOS/Demo/Common/Minimal/IntQueue.c" 1
 2062 0200 4FF00000 			mov r0, #0					
 2063 0204 80F31188 		msr basepri, r0				
 2064              	
 2065              	@ 0 "" 2
 2066              		.thumb
 2067 0208 76E7     		b	.L142
 2068              	.LVL139:
 2069              	.L138:
 2070              	.LBE196:
 686:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_RX();
 2071              		.loc 1 686 0 is_stmt 1 discriminator 2
 2072 020a 009B     		ldr	r3, [sp, #0]
 2073              	.LVL140:
 2074              	.LBB197:
 2075              	.LBB198:
 258:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 2076              		.loc 1 258 0 discriminator 2
 2077 020c C72B     		cmp	r3, #199
 2078 020e 3FF65DAF 		bhi	.L139
 2079              	.LVL141:
 2080              	.LBB199:
 2081              	.LBB200:
 262:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
 2082              		.loc 1 262 0
 2083 0212 40F20002 		movw	r2, #:lower16:.LANCHOR3
 2084 0216 C0F20002 		movt	r2, #:upper16:.LANCHOR3
 2085 021a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2086 021c 71B1     		cbz	r1, .L140
 2087              	.LVL142:
 2088              	.LBB201:
 2089              	.LBB202:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2090              		.loc 1 276 0
 2091 021e 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2092              		.loc 1 277 0
 2093 0222 40F2000E 		movw	lr, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2094              		.loc 1 276 0
 2095 0226 C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2096              		.loc 1 277 0
 2097 022a C0F2000E 		movt	lr, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2098              		.loc 1 276 0
 2099 022e 4FF48476 		mov	r6, #264
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2100              		.loc 1 277 0
 2101 0232 0020     		movs	r0, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2102              		.loc 1 276 0
 2103 0234 CCF80060 		str	r6, [ip, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2104              		.loc 1 277 0
 2105 0238 CEF80000 		str	r0, [lr, #0]
 2106              	.LVL143:
 2107              	.L140:
 2108              	.LBE202:
 2109              	.LBE201:
 268:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyEmptyReceivedValues[ uxValue ] = uxSource;
 2110              		.loc 1 268 0
 2111 023c 0521     		movs	r1, #5
 2112 023e D154     		strb	r1, [r2, r3]
 2113 0240 44E7     		b	.L139
 2114              	.LVL144:
 2115              	.L150:
 2116              	.LBE200:
 2117              	.LBE199:
 2118              	.LBE198:
 2119              	.LBE197:
 691:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_FULL_RX();
 2120              		.loc 1 691 0 discriminator 1
 2121 0242 0098     		ldr	r0, [sp, #0]
 2122 0244 0521     		movs	r1, #5
 2123 0246 FFF7FEFF 		bl	prvRecordValue_NormallyFull
 2124 024a 65E7     		b	.L144
 2125              	.L141:
 687:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		timerNORMALLY_EMPTY_RX();
 2126              		.loc 1 687 0 discriminator 2
 2127 024c 009B     		ldr	r3, [sp, #0]
 2128              	.LVL145:
 2129              	.LBB203:
 2130              	.LBB204:
 258:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxValue < intqNUM_VALUES_TO_LOG )
 2131              		.loc 1 258 0 discriminator 2
 2132 024e C72B     		cmp	r3, #199
 2133 0250 3FF652AF 		bhi	.L142
 2134              	.LVL146:
 2135              	.LBB205:
 2136              	.LBB206:
 262:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
 2137              		.loc 1 262 0
 2138 0254 40F20002 		movw	r2, #:lower16:.LANCHOR3
 2139 0258 C0F20002 		movt	r2, #:upper16:.LANCHOR3
 2140 025c D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2141 025e 71B1     		cbz	r1, .L143
 2142              	.LVL147:
 2143              	.LBB207:
 2144              	.LBB208:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2145              		.loc 1 276 0
 2146 0260 40F2000E 		movw	lr, #:lower16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2147              		.loc 1 277 0
 2148 0264 40F2000C 		movw	ip, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2149              		.loc 1 276 0
 2150 0268 C0F2000E 		movt	lr, #:upper16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2151              		.loc 1 277 0
 2152 026c C0F2000C 		movt	ip, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2153              		.loc 1 276 0
 2154 0270 4FF48474 		mov	r4, #264
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2155              		.loc 1 277 0
 2156 0274 0020     		movs	r0, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2157              		.loc 1 276 0
 2158 0276 CEF80040 		str	r4, [lr, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2159              		.loc 1 277 0
 2160 027a CCF80000 		str	r0, [ip, #0]
 2161              	.LVL148:
 2162              	.L143:
 2163              	.LBE208:
 2164              	.LBE207:
 268:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		ucNormallyEmptyReceivedValues[ uxValue ] = uxSource;
 2165              		.loc 1 268 0
 2166 027e 0521     		movs	r1, #5
 2167 0280 D154     		strb	r1, [r2, r3]
 2168 0282 39E7     		b	.L142
 2169              	.LBE206:
 2170              	.LBE205:
 2171              	.LBE204:
 2172              	.LBE203:
 2173              		.cfi_endproc
 2174              	.LFE10:
 2176              		.section	.text.xAreIntQueueTasksStillRunning,"ax",%progbits
 2177              		.align	2
 2178              		.global	xAreIntQueueTasksStillRunning
 2179              		.thumb
 2180              		.thumb_func
 2182              	xAreIntQueueTasksStillRunning:
 2183              	.LFB11:
 700:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** /*-----------------------------------------------------------*/
 701:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 702:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 703:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** portBASE_TYPE xAreIntQueueTasksStillRunning( void )
 704:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 2184              		.loc 1 704 0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 0, uses_anonymous_args = 0
 2188              		@ link register save eliminated.
 705:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** static unsigned portBASE_TYPE uxLastHighPriorityLoops1 = 0, uxLastHighPriorityLoops2 = 0, uxLastLow
 706:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 707:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	/* xErrorStatus can be set outside of this function.  This function just
 708:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	checks that all the tasks are still cycling. */
 709:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 710:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxHighPriorityLoops1 == uxLastHighPriorityLoops1 )
 2189              		.loc 1 710 0
 2190 0000 40F20000 		movw	r0, #:lower16:.LANCHOR11
 2191 0004 40F20002 		movw	r2, #:lower16:.LANCHOR15
 2192 0008 C0F20000 		movt	r0, #:upper16:.LANCHOR11
 2193 000c C0F20002 		movt	r2, #:upper16:.LANCHOR15
 704:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** {
 2194              		.loc 1 704 0
 2195 0010 30B4     		push	{r4, r5}
 2196              	.LCFI17:
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 5, -4
 2199              		.cfi_offset 4, -8
 2200              		.loc 1 710 0
 2201 0012 1368     		ldr	r3, [r2, #0]
 2202 0014 0568     		ldr	r5, [r0, #0]
 2203 0016 9D42     		cmp	r5, r3
 2204 0018 1CBF     		itt	ne
 2205 001a 40F20001 		movwne	r1, #:lower16:.LANCHOR2
 2206 001e C0F20001 		movtne	r1, #:upper16:.LANCHOR2
 2207 0022 4AD0     		beq	.L159
 2208              	.L152:
 711:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 712:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* The high priority 1 task has stalled. */
 713:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvQueueAccessLogError( __LINE__ );
 714:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 715:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 716:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastHighPriorityLoops1 = uxHighPriorityLoops1;
 717:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 718:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxHighPriorityLoops2 == uxLastHighPriorityLoops2 )
 2209              		.loc 1 718 0
 2210 0024 40F20004 		movw	r4, #:lower16:.LANCHOR10
 2211 0028 40F20003 		movw	r3, #:lower16:.LANCHOR16
 2212 002c C0F20004 		movt	r4, #:upper16:.LANCHOR10
 2213 0030 C0F20003 		movt	r3, #:upper16:.LANCHOR16
 2214 0034 2468     		ldr	r4, [r4, #0]
 2215 0036 1868     		ldr	r0, [r3, #0]
 716:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastHighPriorityLoops1 = uxHighPriorityLoops1;
 2216              		.loc 1 716 0
 2217 0038 1560     		str	r5, [r2, #0]
 2218              		.loc 1 718 0
 2219 003a 8442     		cmp	r4, r0
 2220 003c 32D0     		beq	.L160
 2221              	.L153:
 719:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 720:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* The high priority 2 task has stalled. */
 721:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvQueueAccessLogError( __LINE__ );
 722:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 723:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 724:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastHighPriorityLoops2 = uxHighPriorityLoops2;
 725:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 726:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxLowPriorityLoops1 == uxLastLowPriorityLoops1 )
 2222              		.loc 1 726 0
 2223 003e 40F20005 		movw	r5, #:lower16:.LANCHOR4
 2224 0042 40F20002 		movw	r2, #:lower16:.LANCHOR17
 2225 0046 C0F20005 		movt	r5, #:upper16:.LANCHOR4
 2226 004a C0F20002 		movt	r2, #:upper16:.LANCHOR17
 2227 004e 2D68     		ldr	r5, [r5, #0]
 2228 0050 1068     		ldr	r0, [r2, #0]
 724:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastHighPriorityLoops2 = uxHighPriorityLoops2;
 2229              		.loc 1 724 0
 2230 0052 1C60     		str	r4, [r3, #0]
 2231              		.loc 1 726 0
 2232 0054 8542     		cmp	r5, r0
 2233 0056 1AD0     		beq	.L161
 2234              	.L154:
 727:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 728:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* The low priority 1 task has stalled. */
 729:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvQueueAccessLogError( __LINE__ );
 730:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 731:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 732:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastLowPriorityLoops1 = uxLowPriorityLoops1;
 733:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 734:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	if( uxLowPriorityLoops2 == uxLastLowPriorityLoops2 )
 2235              		.loc 1 734 0
 2236 0058 40F20000 		movw	r0, #:lower16:.LANCHOR12
 2237 005c 40F20003 		movw	r3, #:lower16:.LANCHOR18
 2238 0060 C0F20000 		movt	r0, #:upper16:.LANCHOR12
 2239 0064 C0F20003 		movt	r3, #:upper16:.LANCHOR18
 2240 0068 0468     		ldr	r4, [r0, #0]
 2241 006a 1868     		ldr	r0, [r3, #0]
 732:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastLowPriorityLoops1 = uxLowPriorityLoops1;
 2242              		.loc 1 732 0
 2243 006c 1560     		str	r5, [r2, #0]
 2244              		.loc 1 734 0
 2245 006e 8442     		cmp	r4, r0
 2246 0070 18BF     		it	ne
 2247 0072 0868     		ldrne	r0, [r1, #0]
 2248 0074 08D1     		bne	.L156
 2249              	.LVL149:
 2250              	.LBB209:
 2251              	.LBB210:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2252              		.loc 1 276 0
 2253 0076 40F20002 		movw	r2, #:lower16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2254              		.loc 1 277 0
 2255 007a 0020     		movs	r0, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2256              		.loc 1 276 0
 2257 007c C0F20002 		movt	r2, #:upper16:.LANCHOR1
 2258 0080 40F2E125 		movw	r5, #737
 2259 0084 1560     		str	r5, [r2, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2260              		.loc 1 277 0
 2261 0086 0860     		str	r0, [r1, #0]
 2262              	.LVL150:
 2263              	.L156:
 2264              	.LBE210:
 2265              	.LBE209:
 735:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	{
 736:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		/* The low priority 2 task has stalled. */
 737:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 		prvQueueAccessLogError( __LINE__ );
 738:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	}
 739:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 740:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	uxLastLowPriorityLoops2 = uxLowPriorityLoops2;
 2266              		.loc 1 740 0
 2267 0088 1C60     		str	r4, [r3, #0]
 741:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 
 742:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	return xErrorStatus;
 743:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** }
 2268              		.loc 1 743 0
 2269 008a 30BC     		pop	{r4, r5}
 2270 008c 7047     		bx	lr
 2271              	.L161:
 2272              	.LVL151:
 2273              	.LBB211:
 2274              	.LBB212:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2275              		.loc 1 276 0
 2276 008e 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 2277 0092 C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 2278 0096 40F2D924 		movw	r4, #729
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2279              		.loc 1 277 0
 2280 009a 0023     		movs	r3, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2281              		.loc 1 276 0
 2282 009c CCF80040 		str	r4, [ip, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2283              		.loc 1 277 0
 2284 00a0 0B60     		str	r3, [r1, #0]
 2285 00a2 D9E7     		b	.L154
 2286              	.LVL152:
 2287              	.L160:
 2288              	.LBE212:
 2289              	.LBE211:
 2290              	.LBB213:
 2291              	.LBB214:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2292              		.loc 1 276 0
 2293 00a4 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 2294 00a8 C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 2295 00ac 40F2D125 		movw	r5, #721
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2296              		.loc 1 277 0
 2297 00b0 0022     		movs	r2, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2298              		.loc 1 276 0
 2299 00b2 CCF80050 		str	r5, [ip, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2300              		.loc 1 277 0
 2301 00b6 0A60     		str	r2, [r1, #0]
 2302 00b8 C1E7     		b	.L153
 2303              	.LVL153:
 2304              	.L159:
 2305              	.LBE214:
 2306              	.LBE213:
 2307              	.LBB215:
 2308              	.LBB216:
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2309              		.loc 1 276 0
 2310 00ba 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2311              		.loc 1 277 0
 2312 00be 40F20001 		movw	r1, #:lower16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2313              		.loc 1 276 0
 2314 00c2 C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2315              		.loc 1 277 0
 2316 00c6 C0F20001 		movt	r1, #:upper16:.LANCHOR2
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2317              		.loc 1 276 0
 2318 00ca 40F2C920 		movw	r0, #713
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2319              		.loc 1 277 0
 2320 00ce 0024     		movs	r4, #0
 276:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorLine = uxLine;
 2321              		.loc 1 276 0
 2322 00d0 CCF80000 		str	r0, [ip, #0]
 277:../FreeRTOS/Demo/Common/Minimal/IntQueue.c **** 	xErrorStatus = pdFAIL;
 2323              		.loc 1 277 0
 2324 00d4 0C60     		str	r4, [r1, #0]
 2325 00d6 A5E7     		b	.L152
 2326              	.LBE216:
 2327              	.LBE215:
 2328              		.cfi_endproc
 2329              	.LFE11:
 2331              		.comm	xHighPriorityNormallyFullTask2,4,4
 2332              		.comm	xHighPriorityNormallyFullTask1,4,4
 2333              		.comm	xHighPriorityNormallyEmptyTask2,4,4
 2334              		.comm	xHighPriorityNormallyEmptyTask1,4,4
 2335              		.global	uxValueForNormallyFullQueue
 2336              		.global	uxValueForNormallyEmptyQueue
 2337              		.section	.bss.xWasSuspended,"aw",%nobits
 2338              		.align	2
 2339              		.set	.LANCHOR8,. + 0
 2342              	xWasSuspended:
 2343 0000 00000000 		.space	4
 2344              		.section	.bss.xNormallyEmptyQueue,"aw",%nobits
 2345              		.align	2
 2346              		.set	.LANCHOR0,. + 0
 2349              	xNormallyEmptyQueue:
 2350 0000 00000000 		.space	4
 2351              		.section	.bss.ucNormallyFullReceivedValues,"aw",%nobits
 2352              		.align	2
 2353              		.set	.LANCHOR9,. + 0
 2356              	ucNormallyFullReceivedValues:
 2357 0000 00000000 		.space	200
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2358              		.section	.bss.uxLastLowPriorityLoops2.4651,"aw",%nobits
 2359              		.align	2
 2360              		.set	.LANCHOR18,. + 0
 2363              	uxLastLowPriorityLoops2.4651:
 2364 0000 00000000 		.space	4
 2365              		.section	.bss.xNormallyFullQueue,"aw",%nobits
 2366              		.align	2
 2367              		.set	.LANCHOR7,. + 0
 2370              	xNormallyFullQueue:
 2371 0000 00000000 		.space	4
 2372              		.section	.bss.uxHighPriorityLoops1,"aw",%nobits
 2373              		.align	2
 2374              		.set	.LANCHOR11,. + 0
 2377              	uxHighPriorityLoops1:
 2378 0000 00000000 		.space	4
 2379              		.section	.bss.uxHighPriorityLoops2,"aw",%nobits
 2380              		.align	2
 2381              		.set	.LANCHOR10,. + 0
 2384              	uxHighPriorityLoops2:
 2385 0000 00000000 		.space	4
 2386              		.section	.bss.uxLowPriorityLoops1,"aw",%nobits
 2387              		.align	2
 2388              		.set	.LANCHOR4,. + 0
 2391              	uxLowPriorityLoops1:
 2392 0000 00000000 		.space	4
 2393              		.section	.bss.uxValueForNormallyEmptyQueue,"aw",%nobits
 2394              		.align	2
 2395              		.set	.LANCHOR5,. + 0
 2398              	uxValueForNormallyEmptyQueue:
 2399 0000 00000000 		.space	4
 2400              		.section	.bss.uxNextOperation.4638,"aw",%nobits
 2401              		.align	2
 2402              		.set	.LANCHOR14,. + 0
 2405              	uxNextOperation.4638:
 2406 0000 00000000 		.space	4
 2407              		.section	.bss.uxValueForNormallyFullQueue,"aw",%nobits
 2408              		.align	2
 2409              		.set	.LANCHOR6,. + 0
 2412              	uxValueForNormallyFullQueue:
 2413 0000 00000000 		.space	4
 2414              		.section	.bss.xErrorLine,"aw",%nobits
 2415              		.align	2
 2416              		.set	.LANCHOR1,. + 0
 2419              	xErrorLine:
 2420 0000 00000000 		.space	4
 2421              		.section	.bss.uxLastLowPriorityLoops1.4650,"aw",%nobits
 2422              		.align	2
 2423              		.set	.LANCHOR17,. + 0
 2426              	uxLastLowPriorityLoops1.4650:
 2427 0000 00000000 		.space	4
 2428              		.section	.bss.uxLastHighPriorityLoops1.4648,"aw",%nobits
 2429              		.align	2
 2430              		.set	.LANCHOR15,. + 0
 2433              	uxLastHighPriorityLoops1.4648:
 2434 0000 00000000 		.space	4
 2435              		.section	.bss.uxLastHighPriorityLoops2.4649,"aw",%nobits
 2436              		.align	2
 2437              		.set	.LANCHOR16,. + 0
 2440              	uxLastHighPriorityLoops2.4649:
 2441 0000 00000000 		.space	4
 2442              		.section	.bss.ucNormallyEmptyReceivedValues,"aw",%nobits
 2443              		.align	2
 2444              		.set	.LANCHOR3,. + 0
 2447              	ucNormallyEmptyReceivedValues:
 2448 0000 00000000 		.space	200
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2449              		.section	.bss.uxLowPriorityLoops2,"aw",%nobits
 2450              		.align	2
 2451              		.set	.LANCHOR12,. + 0
 2454              	uxLowPriorityLoops2:
 2455 0000 00000000 		.space	4
 2456              		.section	.data.xErrorStatus,"aw",%progbits
 2457              		.align	2
 2458              		.set	.LANCHOR2,. + 0
 2461              	xErrorStatus:
 2462 0000 01000000 		.word	1
 2463              		.section	.rodata.str1.4,"aMS",%progbits,1
 2464              		.align	2
 2465              	.LC0:
 2466 0000 48315152 		.ascii	"H1QRx\000"
 2466      7800
 2467 0006 0000     		.space	2
 2468              	.LC1:
 2469 0008 48325152 		.ascii	"H2QRx\000"
 2469      7800
 2470 000e 0000     		.space	2
 2471              	.LC2:
 2472 0010 4C515278 		.ascii	"LQRx\000"
 2472      00
 2473 0015 000000   		.space	3
 2474              	.LC3:
 2475 0018 48315154 		.ascii	"H1QTx\000"
 2475      7800
 2476 001e 0000     		.space	2
 2477              	.LC4:
 2478 0020 48325154 		.ascii	"H2QTx\000"
 2478      7800
 2479 0026 0000     		.section	.bss.uxNextOperation.4629,"aw",%nobits
 2480              		.align	2
 2481              		.set	.LANCHOR13,. + 0
 2484              	uxNextOperation.4629:
 2485 0000 00000000 		.space	4
 2486              		.text
 2487              	.Letext0:
 2488              		.file 2 "../FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 2489              		.file 3 "../FreeRTOS/Source/include/queue.h"
 2490              		.file 4 "../FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 IntQueue.c
     /tmp/ccTmQxKb.s:19     .text.prvLowerPriorityNormallyEmptyTask:00000000 $t
     /tmp/ccTmQxKb.s:23     .text.prvLowerPriorityNormallyEmptyTask:00000000 prvLowerPriorityNormallyEmptyTask
     /tmp/ccTmQxKb.s:2444   .bss.ucNormallyEmptyReceivedValues:00000000 .LANCHOR3
     /tmp/ccTmQxKb.s:2346   .bss.xNormallyEmptyQueue:00000000 .LANCHOR0
                            *COM*:00000004 xHighPriorityNormallyEmptyTask1
     /tmp/ccTmQxKb.s:2416   .bss.xErrorLine:00000000 .LANCHOR1
     /tmp/ccTmQxKb.s:2458   .data.xErrorStatus:00000000 .LANCHOR2
     /tmp/ccTmQxKb.s:2388   .bss.uxLowPriorityLoops1:00000000 .LANCHOR4
     /tmp/ccTmQxKb.s:2395   .bss.uxValueForNormallyEmptyQueue:00000000 .LANCHOR5
     /tmp/ccTmQxKb.s:191    .text.prv2ndHigherPriorityNormallyFullTask:00000000 $t
     /tmp/ccTmQxKb.s:195    .text.prv2ndHigherPriorityNormallyFullTask:00000000 prv2ndHigherPriorityNormallyFullTask
     /tmp/ccTmQxKb.s:2409   .bss.uxValueForNormallyFullQueue:00000000 .LANCHOR6
     /tmp/ccTmQxKb.s:2367   .bss.xNormallyFullQueue:00000000 .LANCHOR7
     /tmp/ccTmQxKb.s:2339   .bss.xWasSuspended:00000000 .LANCHOR8
     /tmp/ccTmQxKb.s:393    .text.prv1stHigherPriorityNormallyFullTask:00000000 $t
     /tmp/ccTmQxKb.s:397    .text.prv1stHigherPriorityNormallyFullTask:00000000 prv1stHigherPriorityNormallyFullTask
     /tmp/ccTmQxKb.s:2353   .bss.ucNormallyFullReceivedValues:00000000 .LANCHOR9
                            *COM*:00000004 xHighPriorityNormallyFullTask2
     /tmp/ccTmQxKb.s:2381   .bss.uxHighPriorityLoops2:00000000 .LANCHOR10
     /tmp/ccTmQxKb.s:727    .text.prv1stHigherPriorityNormallyFullTask:000001b8 $d
     /tmp/ccTmQxKb.s:732    .text.prvHigherPriorityNormallyEmptyTask:00000000 $t
     /tmp/ccTmQxKb.s:736    .text.prvHigherPriorityNormallyEmptyTask:00000000 prvHigherPriorityNormallyEmptyTask
                            *COM*:00000004 xHighPriorityNormallyEmptyTask2
     /tmp/ccTmQxKb.s:2374   .bss.uxHighPriorityLoops1:00000000 .LANCHOR11
     /tmp/ccTmQxKb.s:1199   .text.prvRecordValue_NormallyFull:00000000 $t
     /tmp/ccTmQxKb.s:1203   .text.prvRecordValue_NormallyFull:00000000 prvRecordValue_NormallyFull
     /tmp/ccTmQxKb.s:1268   .text.prvLowerPriorityNormallyFullTask:00000000 $t
     /tmp/ccTmQxKb.s:1272   .text.prvLowerPriorityNormallyFullTask:00000000 prvLowerPriorityNormallyFullTask
                            *COM*:00000004 xHighPriorityNormallyFullTask1
     /tmp/ccTmQxKb.s:2451   .bss.uxLowPriorityLoops2:00000000 .LANCHOR12
     /tmp/ccTmQxKb.s:1407   .text.vStartInterruptQueueTasks:00000000 $t
     /tmp/ccTmQxKb.s:1412   .text.vStartInterruptQueueTasks:00000000 vStartInterruptQueueTasks
     /tmp/ccTmQxKb.s:2465   .rodata.str1.4:00000000 .LC0
     /tmp/ccTmQxKb.s:2468   .rodata.str1.4:00000008 .LC1
     /tmp/ccTmQxKb.s:2471   .rodata.str1.4:00000010 .LC2
     /tmp/ccTmQxKb.s:2474   .rodata.str1.4:00000018 .LC3
     /tmp/ccTmQxKb.s:2477   .rodata.str1.4:00000020 .LC4
     /tmp/ccTmQxKb.s:1540   .text.xFirstTimerHandler:00000000 $t
     /tmp/ccTmQxKb.s:1545   .text.xFirstTimerHandler:00000000 xFirstTimerHandler
     /tmp/ccTmQxKb.s:2481   .bss.uxNextOperation.4629:00000000 .LANCHOR13
     /tmp/ccTmQxKb.s:1739   .text.xSecondTimerHandler:00000000 $t
     /tmp/ccTmQxKb.s:1744   .text.xSecondTimerHandler:00000000 xSecondTimerHandler
     /tmp/ccTmQxKb.s:2402   .bss.uxNextOperation.4638:00000000 .LANCHOR14
     /tmp/ccTmQxKb.s:2177   .text.xAreIntQueueTasksStillRunning:00000000 $t
     /tmp/ccTmQxKb.s:2182   .text.xAreIntQueueTasksStillRunning:00000000 xAreIntQueueTasksStillRunning
     /tmp/ccTmQxKb.s:2430   .bss.uxLastHighPriorityLoops1.4648:00000000 .LANCHOR15
     /tmp/ccTmQxKb.s:2437   .bss.uxLastHighPriorityLoops2.4649:00000000 .LANCHOR16
     /tmp/ccTmQxKb.s:2423   .bss.uxLastLowPriorityLoops1.4650:00000000 .LANCHOR17
     /tmp/ccTmQxKb.s:2360   .bss.uxLastLowPriorityLoops2.4651:00000000 .LANCHOR18
     /tmp/ccTmQxKb.s:2412   .bss.uxValueForNormallyFullQueue:00000000 uxValueForNormallyFullQueue
     /tmp/ccTmQxKb.s:2398   .bss.uxValueForNormallyEmptyQueue:00000000 uxValueForNormallyEmptyQueue
     /tmp/ccTmQxKb.s:2338   .bss.xWasSuspended:00000000 $d
     /tmp/ccTmQxKb.s:2342   .bss.xWasSuspended:00000000 xWasSuspended
     /tmp/ccTmQxKb.s:2345   .bss.xNormallyEmptyQueue:00000000 $d
     /tmp/ccTmQxKb.s:2349   .bss.xNormallyEmptyQueue:00000000 xNormallyEmptyQueue
     /tmp/ccTmQxKb.s:2352   .bss.ucNormallyFullReceivedValues:00000000 $d
     /tmp/ccTmQxKb.s:2356   .bss.ucNormallyFullReceivedValues:00000000 ucNormallyFullReceivedValues
     /tmp/ccTmQxKb.s:2359   .bss.uxLastLowPriorityLoops2.4651:00000000 $d
     /tmp/ccTmQxKb.s:2363   .bss.uxLastLowPriorityLoops2.4651:00000000 uxLastLowPriorityLoops2.4651
     /tmp/ccTmQxKb.s:2366   .bss.xNormallyFullQueue:00000000 $d
     /tmp/ccTmQxKb.s:2370   .bss.xNormallyFullQueue:00000000 xNormallyFullQueue
     /tmp/ccTmQxKb.s:2373   .bss.uxHighPriorityLoops1:00000000 $d
     /tmp/ccTmQxKb.s:2377   .bss.uxHighPriorityLoops1:00000000 uxHighPriorityLoops1
     /tmp/ccTmQxKb.s:2380   .bss.uxHighPriorityLoops2:00000000 $d
     /tmp/ccTmQxKb.s:2384   .bss.uxHighPriorityLoops2:00000000 uxHighPriorityLoops2
     /tmp/ccTmQxKb.s:2387   .bss.uxLowPriorityLoops1:00000000 $d
     /tmp/ccTmQxKb.s:2391   .bss.uxLowPriorityLoops1:00000000 uxLowPriorityLoops1
     /tmp/ccTmQxKb.s:2394   .bss.uxValueForNormallyEmptyQueue:00000000 $d
     /tmp/ccTmQxKb.s:2401   .bss.uxNextOperation.4638:00000000 $d
     /tmp/ccTmQxKb.s:2405   .bss.uxNextOperation.4638:00000000 uxNextOperation.4638
     /tmp/ccTmQxKb.s:2408   .bss.uxValueForNormallyFullQueue:00000000 $d
     /tmp/ccTmQxKb.s:2415   .bss.xErrorLine:00000000 $d
     /tmp/ccTmQxKb.s:2419   .bss.xErrorLine:00000000 xErrorLine
     /tmp/ccTmQxKb.s:2422   .bss.uxLastLowPriorityLoops1.4650:00000000 $d
     /tmp/ccTmQxKb.s:2426   .bss.uxLastLowPriorityLoops1.4650:00000000 uxLastLowPriorityLoops1.4650
     /tmp/ccTmQxKb.s:2429   .bss.uxLastHighPriorityLoops1.4648:00000000 $d
     /tmp/ccTmQxKb.s:2433   .bss.uxLastHighPriorityLoops1.4648:00000000 uxLastHighPriorityLoops1.4648
     /tmp/ccTmQxKb.s:2436   .bss.uxLastHighPriorityLoops2.4649:00000000 $d
     /tmp/ccTmQxKb.s:2440   .bss.uxLastHighPriorityLoops2.4649:00000000 uxLastHighPriorityLoops2.4649
     /tmp/ccTmQxKb.s:2443   .bss.ucNormallyEmptyReceivedValues:00000000 $d
     /tmp/ccTmQxKb.s:2447   .bss.ucNormallyEmptyReceivedValues:00000000 ucNormallyEmptyReceivedValues
     /tmp/ccTmQxKb.s:2450   .bss.uxLowPriorityLoops2:00000000 $d
     /tmp/ccTmQxKb.s:2454   .bss.uxLowPriorityLoops2:00000000 uxLowPriorityLoops2
     /tmp/ccTmQxKb.s:2457   .data.xErrorStatus:00000000 $d
     /tmp/ccTmQxKb.s:2461   .data.xErrorStatus:00000000 xErrorStatus
     /tmp/ccTmQxKb.s:2464   .rodata.str1.4:00000000 $d
     /tmp/ccTmQxKb.s:2480   .bss.uxNextOperation.4629:00000000 $d
     /tmp/ccTmQxKb.s:2484   .bss.uxNextOperation.4629:00000000 uxNextOperation.4629
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueGenericReceive
vTaskPrioritySet
vPortEnterCritical
vPortExitCritical
xQueueGenericSend
xTaskIsTaskSuspended
vTaskResume
vPortYieldFromISR
vTaskDelay
vTaskSuspend
memset
vInitialiseTimerForIntQueueTest
xTaskGenericCreate
xQueueGenericCreate
xQueueIsQueueFullFromISR
xQueueGenericSendFromISR
xQueueReceiveFromISR
