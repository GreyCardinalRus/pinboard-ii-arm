   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f10x.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.section	.data.SystemCoreClock,"aw",%progbits
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 00A24A04 		.word	72000000
  25              		.global	AHBPrescTable
  26              		.section	.data.AHBPrescTable,"aw",%progbits
  27              		.align	2
  30              	AHBPrescTable:
  31 0000 00       		.byte	0
  32 0001 00       		.byte	0
  33 0002 00       		.byte	0
  34 0003 00       		.byte	0
  35 0004 00       		.byte	0
  36 0005 00       		.byte	0
  37 0006 00       		.byte	0
  38 0007 00       		.byte	0
  39 0008 01       		.byte	1
  40 0009 02       		.byte	2
  41 000a 03       		.byte	3
  42 000b 04       		.byte	4
  43 000c 06       		.byte	6
  44 000d 07       		.byte	7
  45 000e 08       		.byte	8
  46 000f 09       		.byte	9
  47              		.section	.text.SystemInit,"ax",%progbits
  48              		.align	2
  49              		.global	SystemInit
  50              		.thumb
  51              		.thumb_func
  53              	SystemInit:
  54              	.LFB55:
  55              		.file 1 "./src/system_stm32f10x.c"
   1:./src/system_stm32f10x.c **** /**
   2:./src/system_stm32f10x.c ****   ******************************************************************************
   3:./src/system_stm32f10x.c ****   * @file    system_stm32f10x.c
   4:./src/system_stm32f10x.c ****   * @author  MCD Application Team
   5:./src/system_stm32f10x.c ****   * @version V3.5.0
   6:./src/system_stm32f10x.c ****   * @date    08-April-2011
   7:./src/system_stm32f10x.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:./src/system_stm32f10x.c ****   * 
   9:./src/system_stm32f10x.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:./src/system_stm32f10x.c ****   *     user application:
  11:./src/system_stm32f10x.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:./src/system_stm32f10x.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:./src/system_stm32f10x.c ****   *                      This function is called at startup just after reset and 
  14:./src/system_stm32f10x.c ****   *                      before branch to main program. This call is made inside
  15:./src/system_stm32f10x.c ****   *                      the "startup_stm32f10x_xx.s" file.
  16:./src/system_stm32f10x.c ****   *
  17:./src/system_stm32f10x.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:./src/system_stm32f10x.c ****   *                                  by the user application to setup the SysTick 
  19:./src/system_stm32f10x.c ****   *                                  timer or configure other parameters.
  20:./src/system_stm32f10x.c ****   *                                     
  21:./src/system_stm32f10x.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:./src/system_stm32f10x.c ****   *                                 be called whenever the core clock is changed
  23:./src/system_stm32f10x.c ****   *                                 during program execution.
  24:./src/system_stm32f10x.c ****   *
  25:./src/system_stm32f10x.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:./src/system_stm32f10x.c ****   *    Then SystemInit() function is called, in "startup_stm32f10x_xx.s" file, to
  27:./src/system_stm32f10x.c ****   *    configure the system clock before to branch to main program.
  28:./src/system_stm32f10x.c ****   *
  29:./src/system_stm32f10x.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  30:./src/system_stm32f10x.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  31:./src/system_stm32f10x.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  32:./src/system_stm32f10x.c ****   *
  33:./src/system_stm32f10x.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depedning on
  34:./src/system_stm32f10x.c ****   *    the product used), refer to "HSE_VALUE" define in "stm32f10x.h" file. 
  35:./src/system_stm32f10x.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  36:./src/system_stm32f10x.c ****   *    are using different crystal you have to adapt the HSE value to your own
  37:./src/system_stm32f10x.c ****   *    configuration.
  38:./src/system_stm32f10x.c ****   *        
  39:./src/system_stm32f10x.c ****   ******************************************************************************
  40:./src/system_stm32f10x.c ****   * @attention
  41:./src/system_stm32f10x.c ****   *
  42:./src/system_stm32f10x.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  43:./src/system_stm32f10x.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  44:./src/system_stm32f10x.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  45:./src/system_stm32f10x.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  46:./src/system_stm32f10x.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  47:./src/system_stm32f10x.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  48:./src/system_stm32f10x.c ****   *
  49:./src/system_stm32f10x.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  50:./src/system_stm32f10x.c ****   ******************************************************************************
  51:./src/system_stm32f10x.c ****   */
  52:./src/system_stm32f10x.c **** 
  53:./src/system_stm32f10x.c **** /** @addtogroup CMSIS
  54:./src/system_stm32f10x.c ****   * @{
  55:./src/system_stm32f10x.c ****   */
  56:./src/system_stm32f10x.c **** 
  57:./src/system_stm32f10x.c **** /** @addtogroup stm32f10x_system
  58:./src/system_stm32f10x.c ****   * @{
  59:./src/system_stm32f10x.c ****   */  
  60:./src/system_stm32f10x.c ****   
  61:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Includes
  62:./src/system_stm32f10x.c ****   * @{
  63:./src/system_stm32f10x.c ****   */
  64:./src/system_stm32f10x.c **** 
  65:./src/system_stm32f10x.c **** #include "stm32f10x.h"
  66:./src/system_stm32f10x.c **** 
  67:./src/system_stm32f10x.c **** /**
  68:./src/system_stm32f10x.c ****   * @}
  69:./src/system_stm32f10x.c ****   */
  70:./src/system_stm32f10x.c **** 
  71:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  72:./src/system_stm32f10x.c ****   * @{
  73:./src/system_stm32f10x.c ****   */
  74:./src/system_stm32f10x.c **** 
  75:./src/system_stm32f10x.c **** /**
  76:./src/system_stm32f10x.c ****   * @}
  77:./src/system_stm32f10x.c ****   */
  78:./src/system_stm32f10x.c **** 
  79:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Defines
  80:./src/system_stm32f10x.c ****   * @{
  81:./src/system_stm32f10x.c ****   */
  82:./src/system_stm32f10x.c **** 
  83:./src/system_stm32f10x.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  84:./src/system_stm32f10x.c ****    frequency (after reset the HSI is used as SYSCLK source)
  85:./src/system_stm32f10x.c ****    
  86:./src/system_stm32f10x.c ****    IMPORTANT NOTE:
  87:./src/system_stm32f10x.c ****    ============== 
  88:./src/system_stm32f10x.c ****    1. After each device reset the HSI is used as System clock source.
  89:./src/system_stm32f10x.c **** 
  90:./src/system_stm32f10x.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  91:./src/system_stm32f10x.c ****       maximum frequency.
  92:./src/system_stm32f10x.c ****       
  93:./src/system_stm32f10x.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  94:./src/system_stm32f10x.c ****     source.
  95:./src/system_stm32f10x.c **** 
  96:./src/system_stm32f10x.c ****    4. The System clock configuration functions provided within this file assume that:
  97:./src/system_stm32f10x.c ****         - For Low, Medium and High density Value line devices an external 8MHz 
  98:./src/system_stm32f10x.c ****           crystal is used to drive the System clock.
  99:./src/system_stm32f10x.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
 100:./src/system_stm32f10x.c ****           used to drive the System clock.
 101:./src/system_stm32f10x.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
 102:./src/system_stm32f10x.c ****           the System clock.
 103:./src/system_stm32f10x.c ****      If you are using different crystal you have to adapt those functions accordingly.
 104:./src/system_stm32f10x.c ****     */
 105:./src/system_stm32f10x.c ****     
 106:./src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 107:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 108:./src/system_stm32f10x.c ****  #define SYSCLK_FREQ_24MHz  24000000
 109:./src/system_stm32f10x.c **** #else
 110:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 111:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
 112:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_36MHz  36000000 */
 113:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
 114:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
 115:./src/system_stm32f10x.c **** #define SYSCLK_FREQ_72MHz  72000000
 116:./src/system_stm32f10x.c **** #endif
 117:./src/system_stm32f10x.c **** 
 118:./src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 119:./src/system_stm32f10x.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) or on 
 120:./src/system_stm32f10x.c ****      STM32100E-EVAL board (STM32 High-density value line devices) as data memory */ 
 121:./src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 122:./src/system_stm32f10x.c **** /* #define DATA_IN_ExtSRAM */
 123:./src/system_stm32f10x.c **** #endif
 124:./src/system_stm32f10x.c **** 
 125:./src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 126:./src/system_stm32f10x.c ****      Internal SRAM. */ 
 127:./src/system_stm32f10x.c **** /* #define VECT_TAB_SRAM */
 128:./src/system_stm32f10x.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
 129:./src/system_stm32f10x.c ****                                   This value must be a multiple of 0x200. */
 130:./src/system_stm32f10x.c **** 
 131:./src/system_stm32f10x.c **** 
 132:./src/system_stm32f10x.c **** /**
 133:./src/system_stm32f10x.c ****   * @}
 134:./src/system_stm32f10x.c ****   */
 135:./src/system_stm32f10x.c **** 
 136:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Macros
 137:./src/system_stm32f10x.c ****   * @{
 138:./src/system_stm32f10x.c ****   */
 139:./src/system_stm32f10x.c **** 
 140:./src/system_stm32f10x.c **** /**
 141:./src/system_stm32f10x.c ****   * @}
 142:./src/system_stm32f10x.c ****   */
 143:./src/system_stm32f10x.c **** 
 144:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Variables
 145:./src/system_stm32f10x.c ****   * @{
 146:./src/system_stm32f10x.c ****   */
 147:./src/system_stm32f10x.c **** 
 148:./src/system_stm32f10x.c **** /*******************************************************************************
 149:./src/system_stm32f10x.c **** *  Clock Definitions
 150:./src/system_stm32f10x.c **** *******************************************************************************/
 151:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 152:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 153:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 154:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 155:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 156:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 157:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 158:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 159:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 160:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 161:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 162:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 163:./src/system_stm32f10x.c **** #else /*!< HSI Selected as System Clock source */
 164:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
 165:./src/system_stm32f10x.c **** #endif
 166:./src/system_stm32f10x.c **** 
 167:./src/system_stm32f10x.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 168:./src/system_stm32f10x.c **** /**
 169:./src/system_stm32f10x.c ****   * @}
 170:./src/system_stm32f10x.c ****   */
 171:./src/system_stm32f10x.c **** 
 172:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 173:./src/system_stm32f10x.c ****   * @{
 174:./src/system_stm32f10x.c ****   */
 175:./src/system_stm32f10x.c **** 
 176:./src/system_stm32f10x.c **** static void SetSysClock(void);
 177:./src/system_stm32f10x.c **** 
 178:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 179:./src/system_stm32f10x.c ****   static void SetSysClockToHSE(void);
 180:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 181:./src/system_stm32f10x.c ****   static void SetSysClockTo24(void);
 182:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 183:./src/system_stm32f10x.c ****   static void SetSysClockTo36(void);
 184:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 185:./src/system_stm32f10x.c ****   static void SetSysClockTo48(void);
 186:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 187:./src/system_stm32f10x.c ****   static void SetSysClockTo56(void);  
 188:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 189:./src/system_stm32f10x.c ****   static void SetSysClockTo72(void);
 190:./src/system_stm32f10x.c **** #endif
 191:./src/system_stm32f10x.c **** 
 192:./src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 193:./src/system_stm32f10x.c ****   static void SystemInit_ExtMemCtl(void); 
 194:./src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 195:./src/system_stm32f10x.c **** 
 196:./src/system_stm32f10x.c **** /**
 197:./src/system_stm32f10x.c ****   * @}
 198:./src/system_stm32f10x.c ****   */
 199:./src/system_stm32f10x.c **** 
 200:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Functions
 201:./src/system_stm32f10x.c ****   * @{
 202:./src/system_stm32f10x.c ****   */
 203:./src/system_stm32f10x.c **** 
 204:./src/system_stm32f10x.c **** /**
 205:./src/system_stm32f10x.c ****   * @brief  Setup the microcontroller system
 206:./src/system_stm32f10x.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 207:./src/system_stm32f10x.c ****   *         SystemCoreClock variable.
 208:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 209:./src/system_stm32f10x.c ****   * @param  None
 210:./src/system_stm32f10x.c ****   * @retval None
 211:./src/system_stm32f10x.c ****   */
 212:./src/system_stm32f10x.c **** void SystemInit (void)
 213:./src/system_stm32f10x.c **** {
  56              		.loc 1 213 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 14, -4
  64              		.cfi_offset 7, -8
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI1:
  67              		.cfi_def_cfa_register 7
 214:./src/system_stm32f10x.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 215:./src/system_stm32f10x.c ****   /* Set HSION bit */
 216:./src/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  68              		.loc 1 216 0
  69 0004 4FF48053 		mov	r3, #4096
  70 0008 C4F20203 		movt	r3, 16386
  71 000c 4FF48052 		mov	r2, #4096
  72 0010 C4F20202 		movt	r2, 16386
  73 0014 1268     		ldr	r2, [r2, #0]
  74 0016 42F00102 		orr	r2, r2, #1
  75 001a 1A60     		str	r2, [r3, #0]
 217:./src/system_stm32f10x.c **** 
 218:./src/system_stm32f10x.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 219:./src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 220:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  76              		.loc 1 220 0
  77 001c 4FF48052 		mov	r2, #4096
  78 0020 C4F20202 		movt	r2, 16386
  79 0024 4FF48053 		mov	r3, #4096
  80 0028 C4F20203 		movt	r3, 16386
  81 002c 5968     		ldr	r1, [r3, #4]
  82 002e 4FF00003 		mov	r3, #0
  83 0032 CFF6FF03 		movt	r3, 63743
  84 0036 0B40     		ands	r3, r3, r1
  85 0038 5360     		str	r3, [r2, #4]
 221:./src/system_stm32f10x.c **** #else
 222:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 223:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */   
 224:./src/system_stm32f10x.c ****   
 225:./src/system_stm32f10x.c ****   /* Reset HSEON, CSSON and PLLON bits */
 226:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  86              		.loc 1 226 0
  87 003a 4FF48053 		mov	r3, #4096
  88 003e C4F20203 		movt	r3, 16386
  89 0042 4FF48052 		mov	r2, #4096
  90 0046 C4F20202 		movt	r2, 16386
  91 004a 1268     		ldr	r2, [r2, #0]
  92 004c 22F08472 		bic	r2, r2, #17301504
  93 0050 22F48032 		bic	r2, r2, #65536
  94 0054 1A60     		str	r2, [r3, #0]
 227:./src/system_stm32f10x.c **** 
 228:./src/system_stm32f10x.c ****   /* Reset HSEBYP bit */
 229:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  95              		.loc 1 229 0
  96 0056 4FF48053 		mov	r3, #4096
  97 005a C4F20203 		movt	r3, 16386
  98 005e 4FF48052 		mov	r2, #4096
  99 0062 C4F20202 		movt	r2, 16386
 100 0066 1268     		ldr	r2, [r2, #0]
 101 0068 22F48022 		bic	r2, r2, #262144
 102 006c 1A60     		str	r2, [r3, #0]
 230:./src/system_stm32f10x.c **** 
 231:./src/system_stm32f10x.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 232:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 103              		.loc 1 232 0
 104 006e 4FF48053 		mov	r3, #4096
 105 0072 C4F20203 		movt	r3, 16386
 106 0076 4FF48052 		mov	r2, #4096
 107 007a C4F20202 		movt	r2, 16386
 108 007e 5268     		ldr	r2, [r2, #4]
 109 0080 22F4FE02 		bic	r2, r2, #8323072
 110 0084 5A60     		str	r2, [r3, #4]
 233:./src/system_stm32f10x.c **** 
 234:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 235:./src/system_stm32f10x.c ****   /* Reset PLL2ON and PLL3ON bits */
 236:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 237:./src/system_stm32f10x.c **** 
 238:./src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 239:./src/system_stm32f10x.c ****   RCC->CIR = 0x00FF0000;
 240:./src/system_stm32f10x.c **** 
 241:./src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 242:./src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;
 243:./src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 244:./src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 245:./src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 246:./src/system_stm32f10x.c **** 
 247:./src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 248:./src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;      
 249:./src/system_stm32f10x.c **** #else
 250:./src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 251:./src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 111              		.loc 1 251 0
 112 0086 4FF48053 		mov	r3, #4096
 113 008a C4F20203 		movt	r3, 16386
 114 008e 4FF41F02 		mov	r2, #10420224
 115 0092 9A60     		str	r2, [r3, #8]
 252:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 253:./src/system_stm32f10x.c ****     
 254:./src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 255:./src/system_stm32f10x.c ****   #ifdef DATA_IN_ExtSRAM
 256:./src/system_stm32f10x.c ****     SystemInit_ExtMemCtl(); 
 257:./src/system_stm32f10x.c ****   #endif /* DATA_IN_ExtSRAM */
 258:./src/system_stm32f10x.c **** #endif 
 259:./src/system_stm32f10x.c **** 
 260:./src/system_stm32f10x.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 261:./src/system_stm32f10x.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 262:./src/system_stm32f10x.c ****   SetSysClock();
 116              		.loc 1 262 0
 117 0094 FFF7FEFF 		bl	SetSysClock
 263:./src/system_stm32f10x.c **** 
 264:./src/system_stm32f10x.c **** #ifdef VECT_TAB_SRAM
 265:./src/system_stm32f10x.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 266:./src/system_stm32f10x.c **** #else
 267:./src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 118              		.loc 1 267 0
 119 0098 4FF46D43 		mov	r3, #60672
 120 009c CEF20003 		movt	r3, 57344
 121 00a0 4FF00062 		mov	r2, #134217728
 122 00a4 9A60     		str	r2, [r3, #8]
 268:./src/system_stm32f10x.c **** #endif 
 269:./src/system_stm32f10x.c **** }
 123              		.loc 1 269 0
 124 00a6 80BD     		pop	{r7, pc}
 125              		.cfi_endproc
 126              	.LFE55:
 128              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 129              		.align	2
 130              		.global	SystemCoreClockUpdate
 131              		.thumb
 132              		.thumb_func
 134              	SystemCoreClockUpdate:
 135              	.LFB56:
 270:./src/system_stm32f10x.c **** 
 271:./src/system_stm32f10x.c **** /**
 272:./src/system_stm32f10x.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 273:./src/system_stm32f10x.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 274:./src/system_stm32f10x.c ****   *         be used by the user application to setup the SysTick timer or configure
 275:./src/system_stm32f10x.c ****   *         other parameters.
 276:./src/system_stm32f10x.c ****   *           
 277:./src/system_stm32f10x.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 278:./src/system_stm32f10x.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 279:./src/system_stm32f10x.c ****   *         based on this variable will be incorrect.         
 280:./src/system_stm32f10x.c ****   *     
 281:./src/system_stm32f10x.c ****   * @note   - The system frequency computed by this function is not the real 
 282:./src/system_stm32f10x.c ****   *           frequency in the chip. It is calculated based on the predefined 
 283:./src/system_stm32f10x.c ****   *           constant and the selected clock source:
 284:./src/system_stm32f10x.c ****   *             
 285:./src/system_stm32f10x.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 286:./src/system_stm32f10x.c ****   *                                              
 287:./src/system_stm32f10x.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 288:./src/system_stm32f10x.c ****   *                          
 289:./src/system_stm32f10x.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 290:./src/system_stm32f10x.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 291:./src/system_stm32f10x.c ****   *         
 292:./src/system_stm32f10x.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 293:./src/system_stm32f10x.c ****   *             8 MHz) but the real value may vary depending on the variations
 294:./src/system_stm32f10x.c ****   *             in voltage and temperature.   
 295:./src/system_stm32f10x.c ****   *    
 296:./src/system_stm32f10x.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 297:./src/system_stm32f10x.c ****   *              8 MHz or 25 MHz, depedning on the product used), user has to ensure
 298:./src/system_stm32f10x.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 299:./src/system_stm32f10x.c ****   *              Otherwise, this function may have wrong result.
 300:./src/system_stm32f10x.c ****   *                
 301:./src/system_stm32f10x.c ****   *         - The result of this function could be not correct when using fractional
 302:./src/system_stm32f10x.c ****   *           value for HSE crystal.
 303:./src/system_stm32f10x.c ****   * @param  None
 304:./src/system_stm32f10x.c ****   * @retval None
 305:./src/system_stm32f10x.c ****   */
 306:./src/system_stm32f10x.c **** void SystemCoreClockUpdate (void)
 307:./src/system_stm32f10x.c **** {
 136              		.loc 1 307 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 16
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141 0000 80B4     		push	{r7}
 142              	.LCFI2:
 143              		.cfi_def_cfa_offset 4
 144              		.cfi_offset 7, -4
 145 0002 85B0     		sub	sp, sp, #20
 146              	.LCFI3:
 147              		.cfi_def_cfa_offset 24
 148 0004 00AF     		add	r7, sp, #0
 149              	.LCFI4:
 150              		.cfi_def_cfa_register 7
 308:./src/system_stm32f10x.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 151              		.loc 1 308 0
 152 0006 4FF00003 		mov	r3, #0
 153 000a FB60     		str	r3, [r7, #12]
 154 000c 4FF00003 		mov	r3, #0
 155 0010 BB60     		str	r3, [r7, #8]
 156 0012 4FF00003 		mov	r3, #0
 157 0016 7B60     		str	r3, [r7, #4]
 309:./src/system_stm32f10x.c **** 
 310:./src/system_stm32f10x.c **** #ifdef  STM32F10X_CL
 311:./src/system_stm32f10x.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 312:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 313:./src/system_stm32f10x.c **** 
 314:./src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 315:./src/system_stm32f10x.c ****   uint32_t prediv1factor = 0;
 316:./src/system_stm32f10x.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
 317:./src/system_stm32f10x.c ****     
 318:./src/system_stm32f10x.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 319:./src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 158              		.loc 1 319 0
 159 0018 4FF48053 		mov	r3, #4096
 160 001c C4F20203 		movt	r3, 16386
 161 0020 5B68     		ldr	r3, [r3, #4]
 162 0022 03F00C03 		and	r3, r3, #12
 163 0026 FB60     		str	r3, [r7, #12]
 320:./src/system_stm32f10x.c ****   
 321:./src/system_stm32f10x.c ****   switch (tmp)
 164              		.loc 1 321 0
 165 0028 FB68     		ldr	r3, [r7, #12]
 166 002a 042B     		cmp	r3, #4
 167 002c 0DD0     		beq	.L5
 168 002e 082B     		cmp	r3, #8
 169 0030 15D0     		beq	.L6
 170 0032 002B     		cmp	r3, #0
 171 0034 5CD1     		bne	.L11
 172              	.L4:
 322:./src/system_stm32f10x.c ****   {
 323:./src/system_stm32f10x.c ****     case 0x00:  /* HSI used as system clock */
 324:./src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 173              		.loc 1 324 0
 174 0036 40F20003 		movw	r3, #:lower16:SystemCoreClock
 175 003a C0F20003 		movt	r3, #:upper16:SystemCoreClock
 176 003e 4FF49052 		mov	r2, #4608
 177 0042 C0F27A02 		movt	r2, 122
 178 0046 1A60     		str	r2, [r3, #0]
 325:./src/system_stm32f10x.c ****       break;
 179              		.loc 1 325 0
 180 0048 5CE0     		b	.L7
 181              	.L5:
 326:./src/system_stm32f10x.c ****     case 0x04:  /* HSE used as system clock */
 327:./src/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 182              		.loc 1 327 0
 183 004a 40F20003 		movw	r3, #:lower16:SystemCoreClock
 184 004e C0F20003 		movt	r3, #:upper16:SystemCoreClock
 185 0052 4FF49052 		mov	r2, #4608
 186 0056 C0F27A02 		movt	r2, 122
 187 005a 1A60     		str	r2, [r3, #0]
 328:./src/system_stm32f10x.c ****       break;
 188              		.loc 1 328 0
 189 005c 52E0     		b	.L7
 190              	.L6:
 329:./src/system_stm32f10x.c ****     case 0x08:  /* PLL used as system clock */
 330:./src/system_stm32f10x.c **** 
 331:./src/system_stm32f10x.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 332:./src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 191              		.loc 1 332 0
 192 005e 4FF48053 		mov	r3, #4096
 193 0062 C4F20203 		movt	r3, 16386
 194 0066 5B68     		ldr	r3, [r3, #4]
 195 0068 03F47013 		and	r3, r3, #3932160
 196 006c BB60     		str	r3, [r7, #8]
 333:./src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 197              		.loc 1 333 0
 198 006e 4FF48053 		mov	r3, #4096
 199 0072 C4F20203 		movt	r3, 16386
 200 0076 5B68     		ldr	r3, [r3, #4]
 201 0078 03F48033 		and	r3, r3, #65536
 202 007c 7B60     		str	r3, [r7, #4]
 334:./src/system_stm32f10x.c ****       
 335:./src/system_stm32f10x.c **** #ifndef STM32F10X_CL      
 336:./src/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 203              		.loc 1 336 0
 204 007e BB68     		ldr	r3, [r7, #8]
 205 0080 4FEA9343 		lsr	r3, r3, #18
 206 0084 03F10203 		add	r3, r3, #2
 207 0088 BB60     		str	r3, [r7, #8]
 337:./src/system_stm32f10x.c ****       
 338:./src/system_stm32f10x.c ****       if (pllsource == 0x00)
 208              		.loc 1 338 0
 209 008a 7B68     		ldr	r3, [r7, #4]
 210 008c 002B     		cmp	r3, #0
 211 008e 0CD1     		bne	.L8
 339:./src/system_stm32f10x.c ****       {
 340:./src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 341:./src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 212              		.loc 1 341 0
 213 0090 BA68     		ldr	r2, [r7, #8]
 214 0092 4FF41063 		mov	r3, #2304
 215 0096 C0F23D03 		movt	r3, 61
 216 009a 03FB02F2 		mul	r2, r3, r2
 217 009e 40F20003 		movw	r3, #:lower16:SystemCoreClock
 218 00a2 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 219 00a6 1A60     		str	r2, [r3, #0]
 342:./src/system_stm32f10x.c ****       }
 343:./src/system_stm32f10x.c ****       else
 344:./src/system_stm32f10x.c ****       {
 345:./src/system_stm32f10x.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 346:./src/system_stm32f10x.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 347:./src/system_stm32f10x.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 348:./src/system_stm32f10x.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 349:./src/system_stm32f10x.c ****  #else
 350:./src/system_stm32f10x.c ****         /* HSE selected as PLL clock entry */
 351:./src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 352:./src/system_stm32f10x.c ****         {/* HSE oscillator clock divided by 2 */
 353:./src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 354:./src/system_stm32f10x.c ****         }
 355:./src/system_stm32f10x.c ****         else
 356:./src/system_stm32f10x.c ****         {
 357:./src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 358:./src/system_stm32f10x.c ****         }
 359:./src/system_stm32f10x.c ****  #endif
 360:./src/system_stm32f10x.c ****       }
 361:./src/system_stm32f10x.c **** #else
 362:./src/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 363:./src/system_stm32f10x.c ****       
 364:./src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 365:./src/system_stm32f10x.c ****       {
 366:./src/system_stm32f10x.c ****          pllmull += 2;
 367:./src/system_stm32f10x.c ****       }
 368:./src/system_stm32f10x.c ****       else
 369:./src/system_stm32f10x.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 370:./src/system_stm32f10x.c ****         pllmull = 13 / 2; 
 371:./src/system_stm32f10x.c ****       }
 372:./src/system_stm32f10x.c ****             
 373:./src/system_stm32f10x.c ****       if (pllsource == 0x00)
 374:./src/system_stm32f10x.c ****       {
 375:./src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 376:./src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 377:./src/system_stm32f10x.c ****       }
 378:./src/system_stm32f10x.c ****       else
 379:./src/system_stm32f10x.c ****       {/* PREDIV1 selected as PLL clock entry */
 380:./src/system_stm32f10x.c ****         
 381:./src/system_stm32f10x.c ****         /* Get PREDIV1 clock source and division factor */
 382:./src/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 383:./src/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 384:./src/system_stm32f10x.c ****         
 385:./src/system_stm32f10x.c ****         if (prediv1source == 0)
 386:./src/system_stm32f10x.c ****         { 
 387:./src/system_stm32f10x.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 388:./src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 389:./src/system_stm32f10x.c ****         }
 390:./src/system_stm32f10x.c ****         else
 391:./src/system_stm32f10x.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 392:./src/system_stm32f10x.c ****           
 393:./src/system_stm32f10x.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 394:./src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 395:./src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 396:./src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 397:./src/system_stm32f10x.c ****         }
 398:./src/system_stm32f10x.c ****       }
 399:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */ 
 400:./src/system_stm32f10x.c ****       break;
 220              		.loc 1 400 0
 221 00a8 2CE0     		b	.L7
 222              	.L8:
 351:./src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 223              		.loc 1 351 0
 224 00aa 4FF48053 		mov	r3, #4096
 225 00ae C4F20203 		movt	r3, 16386
 226 00b2 5B68     		ldr	r3, [r3, #4]
 227 00b4 03F40033 		and	r3, r3, #131072
 228 00b8 002B     		cmp	r3, #0
 229 00ba 0CD0     		beq	.L10
 353:./src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 230              		.loc 1 353 0
 231 00bc BA68     		ldr	r2, [r7, #8]
 232 00be 4FF41063 		mov	r3, #2304
 233 00c2 C0F23D03 		movt	r3, 61
 234 00c6 03FB02F2 		mul	r2, r3, r2
 235 00ca 40F20003 		movw	r3, #:lower16:SystemCoreClock
 236 00ce C0F20003 		movt	r3, #:upper16:SystemCoreClock
 237 00d2 1A60     		str	r2, [r3, #0]
 238              		.loc 1 400 0
 239 00d4 16E0     		b	.L7
 240              	.L10:
 357:./src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 241              		.loc 1 357 0
 242 00d6 BA68     		ldr	r2, [r7, #8]
 243 00d8 4FF49053 		mov	r3, #4608
 244 00dc C0F27A03 		movt	r3, 122
 245 00e0 03FB02F2 		mul	r2, r3, r2
 246 00e4 40F20003 		movw	r3, #:lower16:SystemCoreClock
 247 00e8 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 248 00ec 1A60     		str	r2, [r3, #0]
 249              		.loc 1 400 0
 250 00ee 09E0     		b	.L7
 251              	.L11:
 401:./src/system_stm32f10x.c **** 
 402:./src/system_stm32f10x.c ****     default:
 403:./src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 252              		.loc 1 403 0
 253 00f0 40F20003 		movw	r3, #:lower16:SystemCoreClock
 254 00f4 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 255 00f8 4FF49052 		mov	r2, #4608
 256 00fc C0F27A02 		movt	r2, 122
 257 0100 1A60     		str	r2, [r3, #0]
 404:./src/system_stm32f10x.c ****       break;
 258              		.loc 1 404 0
 259 0102 00BF     		nop
 260              	.L7:
 405:./src/system_stm32f10x.c ****   }
 406:./src/system_stm32f10x.c ****   
 407:./src/system_stm32f10x.c ****   /* Compute HCLK clock frequency ----------------*/
 408:./src/system_stm32f10x.c ****   /* Get HCLK prescaler */
 409:./src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 261              		.loc 1 409 0
 262 0104 4FF48053 		mov	r3, #4096
 263 0108 C4F20203 		movt	r3, 16386
 264 010c 5B68     		ldr	r3, [r3, #4]
 265 010e 03F0F003 		and	r3, r3, #240
 266 0112 4FEA1312 		lsr	r2, r3, #4
 267 0116 40F20003 		movw	r3, #:lower16:AHBPrescTable
 268 011a C0F20003 		movt	r3, #:upper16:AHBPrescTable
 269 011e 9B5C     		ldrb	r3, [r3, r2]
 270 0120 DBB2     		uxtb	r3, r3
 271 0122 FB60     		str	r3, [r7, #12]
 410:./src/system_stm32f10x.c ****   /* HCLK clock frequency */
 411:./src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 272              		.loc 1 411 0
 273 0124 40F20003 		movw	r3, #:lower16:SystemCoreClock
 274 0128 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 275 012c 1A68     		ldr	r2, [r3, #0]
 276 012e FB68     		ldr	r3, [r7, #12]
 277 0130 22FA03F2 		lsr	r2, r2, r3
 278 0134 40F20003 		movw	r3, #:lower16:SystemCoreClock
 279 0138 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 280 013c 1A60     		str	r2, [r3, #0]
 412:./src/system_stm32f10x.c **** }
 281              		.loc 1 412 0
 282 013e 07F11407 		add	r7, r7, #20
 283 0142 BD46     		mov	sp, r7
 284 0144 80BC     		pop	{r7}
 285 0146 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE56:
 289              		.section	.text.SetSysClock,"ax",%progbits
 290              		.align	2
 291              		.thumb
 292              		.thumb_func
 294              	SetSysClock:
 295              	.LFB57:
 413:./src/system_stm32f10x.c **** 
 414:./src/system_stm32f10x.c **** /**
 415:./src/system_stm32f10x.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 416:./src/system_stm32f10x.c ****   * @param  None
 417:./src/system_stm32f10x.c ****   * @retval None
 418:./src/system_stm32f10x.c ****   */
 419:./src/system_stm32f10x.c **** static void SetSysClock(void)
 420:./src/system_stm32f10x.c **** {
 296              		.loc 1 420 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 0000 80B5     		push	{r7, lr}
 301              	.LCFI5:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 14, -4
 304              		.cfi_offset 7, -8
 305 0002 00AF     		add	r7, sp, #0
 306              	.LCFI6:
 307              		.cfi_def_cfa_register 7
 421:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 422:./src/system_stm32f10x.c ****   SetSysClockToHSE();
 423:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 424:./src/system_stm32f10x.c ****   SetSysClockTo24();
 425:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 426:./src/system_stm32f10x.c ****   SetSysClockTo36();
 427:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 428:./src/system_stm32f10x.c ****   SetSysClockTo48();
 429:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 430:./src/system_stm32f10x.c ****   SetSysClockTo56();  
 431:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 432:./src/system_stm32f10x.c ****   SetSysClockTo72();
 308              		.loc 1 432 0
 309 0004 FFF7FEFF 		bl	SetSysClockTo72
 433:./src/system_stm32f10x.c **** #endif
 434:./src/system_stm32f10x.c ****  
 435:./src/system_stm32f10x.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 436:./src/system_stm32f10x.c ****     source (default after reset) */ 
 437:./src/system_stm32f10x.c **** }
 310              		.loc 1 437 0
 311 0008 80BD     		pop	{r7, pc}
 312              		.cfi_endproc
 313              	.LFE57:
 315 000a 00BF     		.section	.text.SetSysClockTo72,"ax",%progbits
 316              		.align	2
 317              		.thumb
 318              		.thumb_func
 320              	SetSysClockTo72:
 321              	.LFB58:
 438:./src/system_stm32f10x.c **** 
 439:./src/system_stm32f10x.c **** /**
 440:./src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 441:./src/system_stm32f10x.c ****   *          before jump to __main
 442:./src/system_stm32f10x.c ****   * @param  None
 443:./src/system_stm32f10x.c ****   * @retval None
 444:./src/system_stm32f10x.c ****   */ 
 445:./src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 446:./src/system_stm32f10x.c **** /**
 447:./src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. 
 448:./src/system_stm32f10x.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 449:./src/system_stm32f10x.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
 450:./src/system_stm32f10x.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 451:./src/system_stm32f10x.c ****   *         data memory (including heap and stack).
 452:./src/system_stm32f10x.c ****   * @param  None
 453:./src/system_stm32f10x.c ****   * @retval None
 454:./src/system_stm32f10x.c ****   */ 
 455:./src/system_stm32f10x.c **** void SystemInit_ExtMemCtl(void) 
 456:./src/system_stm32f10x.c **** {
 457:./src/system_stm32f10x.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 458:./src/system_stm32f10x.c ****   required, then adjust the Register Addresses */
 459:./src/system_stm32f10x.c **** 
 460:./src/system_stm32f10x.c ****   /* Enable FSMC clock */
 461:./src/system_stm32f10x.c ****   RCC->AHBENR = 0x00000114;
 462:./src/system_stm32f10x.c ****   
 463:./src/system_stm32f10x.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 464:./src/system_stm32f10x.c ****   RCC->APB2ENR = 0x000001E0;
 465:./src/system_stm32f10x.c ****   
 466:./src/system_stm32f10x.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 467:./src/system_stm32f10x.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 468:./src/system_stm32f10x.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 469:./src/system_stm32f10x.c **** /*----------------  NE3 configuration ----------------------------------------*/
 470:./src/system_stm32f10x.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 471:./src/system_stm32f10x.c ****   
 472:./src/system_stm32f10x.c ****   GPIOD->CRL = 0x44BB44BB;  
 473:./src/system_stm32f10x.c ****   GPIOD->CRH = 0xBBBBBBBB;
 474:./src/system_stm32f10x.c **** 
 475:./src/system_stm32f10x.c ****   GPIOE->CRL = 0xB44444BB;  
 476:./src/system_stm32f10x.c ****   GPIOE->CRH = 0xBBBBBBBB;
 477:./src/system_stm32f10x.c **** 
 478:./src/system_stm32f10x.c ****   GPIOF->CRL = 0x44BBBBBB;  
 479:./src/system_stm32f10x.c ****   GPIOF->CRH = 0xBBBB4444;
 480:./src/system_stm32f10x.c **** 
 481:./src/system_stm32f10x.c ****   GPIOG->CRL = 0x44BBBBBB;  
 482:./src/system_stm32f10x.c ****   GPIOG->CRH = 0x44444B44;
 483:./src/system_stm32f10x.c ****    
 484:./src/system_stm32f10x.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 485:./src/system_stm32f10x.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 486:./src/system_stm32f10x.c ****   
 487:./src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 488:./src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 489:./src/system_stm32f10x.c **** }
 490:./src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 491:./src/system_stm32f10x.c **** 
 492:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 493:./src/system_stm32f10x.c **** /**
 494:./src/system_stm32f10x.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 495:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 496:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 497:./src/system_stm32f10x.c ****   * @param  None
 498:./src/system_stm32f10x.c ****   * @retval None
 499:./src/system_stm32f10x.c ****   */
 500:./src/system_stm32f10x.c **** static void SetSysClockToHSE(void)
 501:./src/system_stm32f10x.c **** {
 502:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 503:./src/system_stm32f10x.c ****   
 504:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 505:./src/system_stm32f10x.c ****   /* Enable HSE */    
 506:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 507:./src/system_stm32f10x.c ****  
 508:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 509:./src/system_stm32f10x.c ****   do
 510:./src/system_stm32f10x.c ****   {
 511:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 512:./src/system_stm32f10x.c ****     StartUpCounter++;  
 513:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 514:./src/system_stm32f10x.c **** 
 515:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 516:./src/system_stm32f10x.c ****   {
 517:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 518:./src/system_stm32f10x.c ****   }
 519:./src/system_stm32f10x.c ****   else
 520:./src/system_stm32f10x.c ****   {
 521:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 522:./src/system_stm32f10x.c ****   }  
 523:./src/system_stm32f10x.c **** 
 524:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 525:./src/system_stm32f10x.c ****   {
 526:./src/system_stm32f10x.c **** 
 527:./src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
 528:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 529:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 530:./src/system_stm32f10x.c **** 
 531:./src/system_stm32f10x.c ****     /* Flash 0 wait state */
 532:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 533:./src/system_stm32f10x.c **** 
 534:./src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 535:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 536:./src/system_stm32f10x.c **** #else
 537:./src/system_stm32f10x.c ****     if (HSE_VALUE <= 24000000)
 538:./src/system_stm32f10x.c **** 	{
 539:./src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 540:./src/system_stm32f10x.c **** 	}
 541:./src/system_stm32f10x.c **** 	else
 542:./src/system_stm32f10x.c **** 	{
 543:./src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 544:./src/system_stm32f10x.c **** 	}
 545:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 546:./src/system_stm32f10x.c **** #endif
 547:./src/system_stm32f10x.c ****  
 548:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 549:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 550:./src/system_stm32f10x.c ****       
 551:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 552:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 553:./src/system_stm32f10x.c ****     
 554:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 555:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 556:./src/system_stm32f10x.c ****     
 557:./src/system_stm32f10x.c ****     /* Select HSE as system clock source */
 558:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 559:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 560:./src/system_stm32f10x.c **** 
 561:./src/system_stm32f10x.c ****     /* Wait till HSE is used as system clock source */
 562:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 563:./src/system_stm32f10x.c ****     {
 564:./src/system_stm32f10x.c ****     }
 565:./src/system_stm32f10x.c ****   }
 566:./src/system_stm32f10x.c ****   else
 567:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 568:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 569:./src/system_stm32f10x.c ****   }  
 570:./src/system_stm32f10x.c **** }
 571:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 572:./src/system_stm32f10x.c **** /**
 573:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 574:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 575:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 576:./src/system_stm32f10x.c ****   * @param  None
 577:./src/system_stm32f10x.c ****   * @retval None
 578:./src/system_stm32f10x.c ****   */
 579:./src/system_stm32f10x.c **** static void SetSysClockTo24(void)
 580:./src/system_stm32f10x.c **** {
 581:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 582:./src/system_stm32f10x.c ****   
 583:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 584:./src/system_stm32f10x.c ****   /* Enable HSE */    
 585:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 586:./src/system_stm32f10x.c ****  
 587:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 588:./src/system_stm32f10x.c ****   do
 589:./src/system_stm32f10x.c ****   {
 590:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 591:./src/system_stm32f10x.c ****     StartUpCounter++;  
 592:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 593:./src/system_stm32f10x.c **** 
 594:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 595:./src/system_stm32f10x.c ****   {
 596:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 597:./src/system_stm32f10x.c ****   }
 598:./src/system_stm32f10x.c ****   else
 599:./src/system_stm32f10x.c ****   {
 600:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 601:./src/system_stm32f10x.c ****   }  
 602:./src/system_stm32f10x.c **** 
 603:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 604:./src/system_stm32f10x.c ****   {
 605:./src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
 606:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 607:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 608:./src/system_stm32f10x.c **** 
 609:./src/system_stm32f10x.c ****     /* Flash 0 wait state */
 610:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 611:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 612:./src/system_stm32f10x.c **** #endif
 613:./src/system_stm32f10x.c ****  
 614:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 615:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 616:./src/system_stm32f10x.c ****       
 617:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 618:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 619:./src/system_stm32f10x.c ****     
 620:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 621:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 622:./src/system_stm32f10x.c ****     
 623:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 624:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 625:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 626:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 627:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 628:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 629:./src/system_stm32f10x.c **** 
 630:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 631:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 632:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 633:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 634:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 635:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 636:./src/system_stm32f10x.c ****   
 637:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 638:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 639:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 640:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 641:./src/system_stm32f10x.c ****     {
 642:./src/system_stm32f10x.c ****     }   
 643:./src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 644:./src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 645:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 646:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 647:./src/system_stm32f10x.c **** #else    
 648:./src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 649:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 650:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 651:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 652:./src/system_stm32f10x.c **** 
 653:./src/system_stm32f10x.c ****     /* Enable PLL */
 654:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 655:./src/system_stm32f10x.c **** 
 656:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 657:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 658:./src/system_stm32f10x.c ****     {
 659:./src/system_stm32f10x.c ****     }
 660:./src/system_stm32f10x.c **** 
 661:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 662:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 663:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 664:./src/system_stm32f10x.c **** 
 665:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 666:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 667:./src/system_stm32f10x.c ****     {
 668:./src/system_stm32f10x.c ****     }
 669:./src/system_stm32f10x.c ****   }
 670:./src/system_stm32f10x.c ****   else
 671:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 672:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 673:./src/system_stm32f10x.c ****   } 
 674:./src/system_stm32f10x.c **** }
 675:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 676:./src/system_stm32f10x.c **** /**
 677:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
 678:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 679:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 680:./src/system_stm32f10x.c ****   * @param  None
 681:./src/system_stm32f10x.c ****   * @retval None
 682:./src/system_stm32f10x.c ****   */
 683:./src/system_stm32f10x.c **** static void SetSysClockTo36(void)
 684:./src/system_stm32f10x.c **** {
 685:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 686:./src/system_stm32f10x.c ****   
 687:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 688:./src/system_stm32f10x.c ****   /* Enable HSE */    
 689:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 690:./src/system_stm32f10x.c ****  
 691:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 692:./src/system_stm32f10x.c ****   do
 693:./src/system_stm32f10x.c ****   {
 694:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 695:./src/system_stm32f10x.c ****     StartUpCounter++;  
 696:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 697:./src/system_stm32f10x.c **** 
 698:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 699:./src/system_stm32f10x.c ****   {
 700:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 701:./src/system_stm32f10x.c ****   }
 702:./src/system_stm32f10x.c ****   else
 703:./src/system_stm32f10x.c ****   {
 704:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 705:./src/system_stm32f10x.c ****   }  
 706:./src/system_stm32f10x.c **** 
 707:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 708:./src/system_stm32f10x.c ****   {
 709:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 710:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 711:./src/system_stm32f10x.c **** 
 712:./src/system_stm32f10x.c ****     /* Flash 1 wait state */
 713:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 714:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 715:./src/system_stm32f10x.c ****  
 716:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 717:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 718:./src/system_stm32f10x.c ****       
 719:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 720:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 721:./src/system_stm32f10x.c ****     
 722:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 723:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 724:./src/system_stm32f10x.c ****     
 725:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 726:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 727:./src/system_stm32f10x.c ****     
 728:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 729:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 730:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 731:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
 732:./src/system_stm32f10x.c **** 
 733:./src/system_stm32f10x.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 734:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
 735:./src/system_stm32f10x.c ****         
 736:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 737:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 738:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 739:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 740:./src/system_stm32f10x.c ****   
 741:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 742:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 743:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 744:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 745:./src/system_stm32f10x.c ****     {
 746:./src/system_stm32f10x.c ****     }
 747:./src/system_stm32f10x.c ****     
 748:./src/system_stm32f10x.c **** #else    
 749:./src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 750:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 751:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 752:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 753:./src/system_stm32f10x.c **** 
 754:./src/system_stm32f10x.c ****     /* Enable PLL */
 755:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 756:./src/system_stm32f10x.c **** 
 757:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 758:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 759:./src/system_stm32f10x.c ****     {
 760:./src/system_stm32f10x.c ****     }
 761:./src/system_stm32f10x.c **** 
 762:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 763:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 764:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 765:./src/system_stm32f10x.c **** 
 766:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 767:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 768:./src/system_stm32f10x.c ****     {
 769:./src/system_stm32f10x.c ****     }
 770:./src/system_stm32f10x.c ****   }
 771:./src/system_stm32f10x.c ****   else
 772:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 773:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 774:./src/system_stm32f10x.c ****   } 
 775:./src/system_stm32f10x.c **** }
 776:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 777:./src/system_stm32f10x.c **** /**
 778:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 48MHz and configure HCLK, PCLK2 
 779:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 780:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 781:./src/system_stm32f10x.c ****   * @param  None
 782:./src/system_stm32f10x.c ****   * @retval None
 783:./src/system_stm32f10x.c ****   */
 784:./src/system_stm32f10x.c **** static void SetSysClockTo48(void)
 785:./src/system_stm32f10x.c **** {
 786:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 787:./src/system_stm32f10x.c ****   
 788:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 789:./src/system_stm32f10x.c ****   /* Enable HSE */    
 790:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 791:./src/system_stm32f10x.c ****  
 792:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 793:./src/system_stm32f10x.c ****   do
 794:./src/system_stm32f10x.c ****   {
 795:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 796:./src/system_stm32f10x.c ****     StartUpCounter++;  
 797:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 798:./src/system_stm32f10x.c **** 
 799:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800:./src/system_stm32f10x.c ****   {
 801:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 802:./src/system_stm32f10x.c ****   }
 803:./src/system_stm32f10x.c ****   else
 804:./src/system_stm32f10x.c ****   {
 805:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 806:./src/system_stm32f10x.c ****   }  
 807:./src/system_stm32f10x.c **** 
 808:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 809:./src/system_stm32f10x.c ****   {
 810:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 811:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 812:./src/system_stm32f10x.c **** 
 813:./src/system_stm32f10x.c ****     /* Flash 1 wait state */
 814:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 815:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 816:./src/system_stm32f10x.c ****  
 817:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 818:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 819:./src/system_stm32f10x.c ****       
 820:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 821:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 822:./src/system_stm32f10x.c ****     
 823:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 824:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 825:./src/system_stm32f10x.c ****     
 826:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 827:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 828:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 829:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 830:./src/system_stm32f10x.c ****         
 831:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 832:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 833:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 834:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 835:./src/system_stm32f10x.c ****   
 836:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 837:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 838:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 839:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 840:./src/system_stm32f10x.c ****     {
 841:./src/system_stm32f10x.c ****     }
 842:./src/system_stm32f10x.c ****     
 843:./src/system_stm32f10x.c ****    
 844:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 48 MHz */ 
 845:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 846:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 847:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 848:./src/system_stm32f10x.c **** #else    
 849:./src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 6 = 48 MHz */
 850:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 851:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 852:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 853:./src/system_stm32f10x.c **** 
 854:./src/system_stm32f10x.c ****     /* Enable PLL */
 855:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 856:./src/system_stm32f10x.c **** 
 857:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 858:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 859:./src/system_stm32f10x.c ****     {
 860:./src/system_stm32f10x.c ****     }
 861:./src/system_stm32f10x.c **** 
 862:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 863:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 864:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 865:./src/system_stm32f10x.c **** 
 866:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 867:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 868:./src/system_stm32f10x.c ****     {
 869:./src/system_stm32f10x.c ****     }
 870:./src/system_stm32f10x.c ****   }
 871:./src/system_stm32f10x.c ****   else
 872:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 873:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 874:./src/system_stm32f10x.c ****   } 
 875:./src/system_stm32f10x.c **** }
 876:./src/system_stm32f10x.c **** 
 877:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 878:./src/system_stm32f10x.c **** /**
 879:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 56MHz and configure HCLK, PCLK2 
 880:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 881:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 882:./src/system_stm32f10x.c ****   * @param  None
 883:./src/system_stm32f10x.c ****   * @retval None
 884:./src/system_stm32f10x.c ****   */
 885:./src/system_stm32f10x.c **** static void SetSysClockTo56(void)
 886:./src/system_stm32f10x.c **** {
 887:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 888:./src/system_stm32f10x.c ****   
 889:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
 890:./src/system_stm32f10x.c ****   /* Enable HSE */    
 891:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 892:./src/system_stm32f10x.c ****  
 893:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 894:./src/system_stm32f10x.c ****   do
 895:./src/system_stm32f10x.c ****   {
 896:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 897:./src/system_stm32f10x.c ****     StartUpCounter++;  
 898:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 899:./src/system_stm32f10x.c **** 
 900:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 901:./src/system_stm32f10x.c ****   {
 902:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 903:./src/system_stm32f10x.c ****   }
 904:./src/system_stm32f10x.c ****   else
 905:./src/system_stm32f10x.c ****   {
 906:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 907:./src/system_stm32f10x.c ****   }  
 908:./src/system_stm32f10x.c **** 
 909:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 910:./src/system_stm32f10x.c ****   {
 911:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 912:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 913:./src/system_stm32f10x.c **** 
 914:./src/system_stm32f10x.c ****     /* Flash 2 wait state */
 915:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 916:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 917:./src/system_stm32f10x.c ****  
 918:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 919:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 920:./src/system_stm32f10x.c ****       
 921:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 922:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 923:./src/system_stm32f10x.c ****     
 924:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 925:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 926:./src/system_stm32f10x.c **** 
 927:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 928:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 929:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 930:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 931:./src/system_stm32f10x.c ****         
 932:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 933:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 934:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 935:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 936:./src/system_stm32f10x.c ****   
 937:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 938:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 939:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 940:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 941:./src/system_stm32f10x.c ****     {
 942:./src/system_stm32f10x.c ****     }
 943:./src/system_stm32f10x.c ****     
 944:./src/system_stm32f10x.c ****    
 945:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 7 = 56 MHz */ 
 946:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 947:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 948:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL7); 
 949:./src/system_stm32f10x.c **** #else     
 950:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
 951:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 952:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 953:./src/system_stm32f10x.c **** 
 954:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 955:./src/system_stm32f10x.c **** 
 956:./src/system_stm32f10x.c ****     /* Enable PLL */
 957:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 958:./src/system_stm32f10x.c **** 
 959:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 960:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 961:./src/system_stm32f10x.c ****     {
 962:./src/system_stm32f10x.c ****     }
 963:./src/system_stm32f10x.c **** 
 964:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 965:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 966:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 967:./src/system_stm32f10x.c **** 
 968:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 969:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 970:./src/system_stm32f10x.c ****     {
 971:./src/system_stm32f10x.c ****     }
 972:./src/system_stm32f10x.c ****   }
 973:./src/system_stm32f10x.c ****   else
 974:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 975:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 976:./src/system_stm32f10x.c ****   } 
 977:./src/system_stm32f10x.c **** }
 978:./src/system_stm32f10x.c **** 
 979:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 980:./src/system_stm32f10x.c **** /**
 981:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 72MHz and configure HCLK, PCLK2 
 982:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 983:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 984:./src/system_stm32f10x.c ****   * @param  None
 985:./src/system_stm32f10x.c ****   * @retval None
 986:./src/system_stm32f10x.c ****   */
 987:./src/system_stm32f10x.c **** static void SetSysClockTo72(void)
 988:./src/system_stm32f10x.c **** {
 322              		.loc 1 988 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 0000 80B4     		push	{r7}
 328              	.LCFI7:
 329              		.cfi_def_cfa_offset 4
 330              		.cfi_offset 7, -4
 331 0002 83B0     		sub	sp, sp, #12
 332              	.LCFI8:
 333              		.cfi_def_cfa_offset 16
 334 0004 00AF     		add	r7, sp, #0
 335              	.LCFI9:
 336              		.cfi_def_cfa_register 7
 989:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 337              		.loc 1 989 0
 338 0006 4FF00003 		mov	r3, #0
 339 000a 7B60     		str	r3, [r7, #4]
 340 000c 4FF00003 		mov	r3, #0
 341 0010 3B60     		str	r3, [r7, #0]
 990:./src/system_stm32f10x.c ****   
 991:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 992:./src/system_stm32f10x.c ****   /* Enable HSE */    
 993:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 342              		.loc 1 993 0
 343 0012 4FF48053 		mov	r3, #4096
 344 0016 C4F20203 		movt	r3, 16386
 345 001a 4FF48052 		mov	r2, #4096
 346 001e C4F20202 		movt	r2, 16386
 347 0022 1268     		ldr	r2, [r2, #0]
 348 0024 42F48032 		orr	r2, r2, #65536
 349 0028 1A60     		str	r2, [r3, #0]
 350              	.L15:
 994:./src/system_stm32f10x.c ****  
 995:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 996:./src/system_stm32f10x.c ****   do
 997:./src/system_stm32f10x.c ****   {
 998:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 351              		.loc 1 998 0 discriminator 1
 352 002a 4FF48053 		mov	r3, #4096
 353 002e C4F20203 		movt	r3, 16386
 354 0032 1B68     		ldr	r3, [r3, #0]
 355 0034 03F40033 		and	r3, r3, #131072
 356 0038 3B60     		str	r3, [r7, #0]
 999:./src/system_stm32f10x.c ****     StartUpCounter++;  
 357              		.loc 1 999 0 discriminator 1
 358 003a 7B68     		ldr	r3, [r7, #4]
 359 003c 03F10103 		add	r3, r3, #1
 360 0040 7B60     		str	r3, [r7, #4]
1000:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 361              		.loc 1 1000 0 discriminator 1
 362 0042 3B68     		ldr	r3, [r7, #0]
 363 0044 002B     		cmp	r3, #0
 364 0046 03D1     		bne	.L14
 365 0048 7B68     		ldr	r3, [r7, #4]
 366 004a B3F5A06F 		cmp	r3, #1280
 367 004e ECD1     		bne	.L15
 368              	.L14:
1001:./src/system_stm32f10x.c **** 
1002:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 369              		.loc 1 1002 0
 370 0050 4FF48053 		mov	r3, #4096
 371 0054 C4F20203 		movt	r3, 16386
 372 0058 1B68     		ldr	r3, [r3, #0]
 373 005a 03F40033 		and	r3, r3, #131072
 374 005e 002B     		cmp	r3, #0
 375 0060 03D0     		beq	.L16
1003:./src/system_stm32f10x.c ****   {
1004:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 376              		.loc 1 1004 0
 377 0062 4FF00103 		mov	r3, #1
 378 0066 3B60     		str	r3, [r7, #0]
 379 0068 02E0     		b	.L17
 380              	.L16:
1005:./src/system_stm32f10x.c ****   }
1006:./src/system_stm32f10x.c ****   else
1007:./src/system_stm32f10x.c ****   {
1008:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 381              		.loc 1 1008 0
 382 006a 4FF00003 		mov	r3, #0
 383 006e 3B60     		str	r3, [r7, #0]
 384              	.L17:
1009:./src/system_stm32f10x.c ****   }  
1010:./src/system_stm32f10x.c **** 
1011:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 385              		.loc 1 1011 0
 386 0070 3B68     		ldr	r3, [r7, #0]
 387 0072 012B     		cmp	r3, #1
 388 0074 40F09480 		bne	.L13
1012:./src/system_stm32f10x.c ****   {
1013:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
1014:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 389              		.loc 1 1014 0
 390 0078 4FF40053 		mov	r3, #8192
 391 007c C4F20203 		movt	r3, 16386
 392 0080 4FF40052 		mov	r2, #8192
 393 0084 C4F20202 		movt	r2, 16386
 394 0088 1268     		ldr	r2, [r2, #0]
 395 008a 42F01002 		orr	r2, r2, #16
 396 008e 1A60     		str	r2, [r3, #0]
1015:./src/system_stm32f10x.c **** 
1016:./src/system_stm32f10x.c ****     /* Flash 2 wait state */
1017:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 397              		.loc 1 1017 0
 398 0090 4FF40053 		mov	r3, #8192
 399 0094 C4F20203 		movt	r3, 16386
 400 0098 4FF40052 		mov	r2, #8192
 401 009c C4F20202 		movt	r2, 16386
 402 00a0 1268     		ldr	r2, [r2, #0]
 403 00a2 22F00302 		bic	r2, r2, #3
 404 00a6 1A60     		str	r2, [r3, #0]
1018:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 405              		.loc 1 1018 0
 406 00a8 4FF40053 		mov	r3, #8192
 407 00ac C4F20203 		movt	r3, 16386
 408 00b0 4FF40052 		mov	r2, #8192
 409 00b4 C4F20202 		movt	r2, 16386
 410 00b8 1268     		ldr	r2, [r2, #0]
 411 00ba 42F00202 		orr	r2, r2, #2
 412 00be 1A60     		str	r2, [r3, #0]
1019:./src/system_stm32f10x.c **** 
1020:./src/system_stm32f10x.c ****  
1021:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
1022:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 413              		.loc 1 1022 0
 414 00c0 4FF48053 		mov	r3, #4096
 415 00c4 C4F20203 		movt	r3, 16386
 416 00c8 4FF48052 		mov	r2, #4096
 417 00cc C4F20202 		movt	r2, 16386
 418 00d0 5268     		ldr	r2, [r2, #4]
 419 00d2 5A60     		str	r2, [r3, #4]
1023:./src/system_stm32f10x.c ****       
1024:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
1025:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 420              		.loc 1 1025 0
 421 00d4 4FF48053 		mov	r3, #4096
 422 00d8 C4F20203 		movt	r3, 16386
 423 00dc 4FF48052 		mov	r2, #4096
 424 00e0 C4F20202 		movt	r2, 16386
 425 00e4 5268     		ldr	r2, [r2, #4]
 426 00e6 5A60     		str	r2, [r3, #4]
1026:./src/system_stm32f10x.c ****     
1027:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
1028:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 427              		.loc 1 1028 0
 428 00e8 4FF48053 		mov	r3, #4096
 429 00ec C4F20203 		movt	r3, 16386
 430 00f0 4FF48052 		mov	r2, #4096
 431 00f4 C4F20202 		movt	r2, 16386
 432 00f8 5268     		ldr	r2, [r2, #4]
 433 00fa 42F48062 		orr	r2, r2, #1024
 434 00fe 5A60     		str	r2, [r3, #4]
1029:./src/system_stm32f10x.c **** 
1030:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
1031:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
1032:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
1033:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
1034:./src/system_stm32f10x.c ****         
1035:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
1036:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
1037:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
1038:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
1039:./src/system_stm32f10x.c ****   
1040:./src/system_stm32f10x.c ****     /* Enable PLL2 */
1041:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
1042:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
1043:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
1044:./src/system_stm32f10x.c ****     {
1045:./src/system_stm32f10x.c ****     }
1046:./src/system_stm32f10x.c ****     
1047:./src/system_stm32f10x.c ****    
1048:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
1049:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
1050:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
1051:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
1052:./src/system_stm32f10x.c **** #else    
1053:./src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
1054:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 435              		.loc 1 1054 0
 436 0100 4FF48053 		mov	r3, #4096
 437 0104 C4F20203 		movt	r3, 16386
 438 0108 4FF48052 		mov	r2, #4096
 439 010c C4F20202 		movt	r2, 16386
 440 0110 5268     		ldr	r2, [r2, #4]
 441 0112 22F47C12 		bic	r2, r2, #4128768
 442 0116 5A60     		str	r2, [r3, #4]
1055:./src/system_stm32f10x.c ****                                         RCC_CFGR_PLLMULL));
1056:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 443              		.loc 1 1056 0
 444 0118 4FF48053 		mov	r3, #4096
 445 011c C4F20203 		movt	r3, 16386
 446 0120 4FF48052 		mov	r2, #4096
 447 0124 C4F20202 		movt	r2, 16386
 448 0128 5268     		ldr	r2, [r2, #4]
 449 012a 42F4E812 		orr	r2, r2, #1900544
 450 012e 5A60     		str	r2, [r3, #4]
1057:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
1058:./src/system_stm32f10x.c **** 
1059:./src/system_stm32f10x.c ****     /* Enable PLL */
1060:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 451              		.loc 1 1060 0
 452 0130 4FF48053 		mov	r3, #4096
 453 0134 C4F20203 		movt	r3, 16386
 454 0138 4FF48052 		mov	r2, #4096
 455 013c C4F20202 		movt	r2, 16386
 456 0140 1268     		ldr	r2, [r2, #0]
 457 0142 42F08072 		orr	r2, r2, #16777216
 458 0146 1A60     		str	r2, [r3, #0]
1061:./src/system_stm32f10x.c **** 
1062:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
1063:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 459              		.loc 1 1063 0
 460 0148 00BF     		nop
 461              	.L19:
 462              		.loc 1 1063 0 is_stmt 0 discriminator 1
 463 014a 4FF48053 		mov	r3, #4096
 464 014e C4F20203 		movt	r3, 16386
 465 0152 1B68     		ldr	r3, [r3, #0]
 466 0154 03F00073 		and	r3, r3, #33554432
 467 0158 002B     		cmp	r3, #0
 468 015a F6D0     		beq	.L19
1064:./src/system_stm32f10x.c ****     {
1065:./src/system_stm32f10x.c ****     }
1066:./src/system_stm32f10x.c ****     
1067:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
1068:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 469              		.loc 1 1068 0 is_stmt 1
 470 015c 4FF48053 		mov	r3, #4096
 471 0160 C4F20203 		movt	r3, 16386
 472 0164 4FF48052 		mov	r2, #4096
 473 0168 C4F20202 		movt	r2, 16386
 474 016c 5268     		ldr	r2, [r2, #4]
 475 016e 22F00302 		bic	r2, r2, #3
 476 0172 5A60     		str	r2, [r3, #4]
1069:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 477              		.loc 1 1069 0
 478 0174 4FF48053 		mov	r3, #4096
 479 0178 C4F20203 		movt	r3, 16386
 480 017c 4FF48052 		mov	r2, #4096
 481 0180 C4F20202 		movt	r2, 16386
 482 0184 5268     		ldr	r2, [r2, #4]
 483 0186 42F00202 		orr	r2, r2, #2
 484 018a 5A60     		str	r2, [r3, #4]
1070:./src/system_stm32f10x.c **** 
1071:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
1072:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 485              		.loc 1 1072 0
 486 018c 00BF     		nop
 487              	.L20:
 488              		.loc 1 1072 0 is_stmt 0 discriminator 1
 489 018e 4FF48053 		mov	r3, #4096
 490 0192 C4F20203 		movt	r3, 16386
 491 0196 5B68     		ldr	r3, [r3, #4]
 492 0198 03F00C03 		and	r3, r3, #12
 493 019c 082B     		cmp	r3, #8
 494 019e F6D1     		bne	.L20
 495              	.L13:
1073:./src/system_stm32f10x.c ****     {
1074:./src/system_stm32f10x.c ****     }
1075:./src/system_stm32f10x.c ****   }
1076:./src/system_stm32f10x.c ****   else
1077:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
1078:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
1079:./src/system_stm32f10x.c ****   }
1080:./src/system_stm32f10x.c **** }
 496              		.loc 1 1080 0 is_stmt 1
 497 01a0 07F10C07 		add	r7, r7, #12
 498 01a4 BD46     		mov	sp, r7
 499 01a6 80BC     		pop	{r7}
 500 01a8 7047     		bx	lr
 501              		.cfi_endproc
 502              	.LFE58:
 504 01aa 00BF     		.text
 505              	.Letext0:
 506              		.file 2 "/home/valentin/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-
 507              		.file 3 "../MyARMLib/CMSIS/include/core_cm3.h"
 508              		.file 4 "../MyARMLib/STM32/STM32F10x/include/stm32f10x.h"
 509              		.file 5 "../MyARMLib/STM32/STM32F10x/include/system_stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f10x.c
     /tmp/ccJoCb2z.s:23     .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccJoCb2z.s:20     .data.SystemCoreClock:00000000 $d
     /tmp/ccJoCb2z.s:30     .data.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccJoCb2z.s:27     .data.AHBPrescTable:00000000 $d
     /tmp/ccJoCb2z.s:48     .text.SystemInit:00000000 $t
     /tmp/ccJoCb2z.s:53     .text.SystemInit:00000000 SystemInit
     /tmp/ccJoCb2z.s:294    .text.SetSysClock:00000000 SetSysClock
     /tmp/ccJoCb2z.s:129    .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccJoCb2z.s:134    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccJoCb2z.s:290    .text.SetSysClock:00000000 $t
     /tmp/ccJoCb2z.s:320    .text.SetSysClockTo72:00000000 SetSysClockTo72
     /tmp/ccJoCb2z.s:316    .text.SetSysClockTo72:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
