   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f10x.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SystemInit,"ax",%progbits
  19              		.align	2
  20              		.global	SystemInit
  21              		.thumb
  22              		.thumb_func
  24              	SystemInit:
  25              	.LFB55:
  26              		.file 1 "./src/system_stm32f10x.c"
   1:./src/system_stm32f10x.c **** /**
   2:./src/system_stm32f10x.c ****   ******************************************************************************
   3:./src/system_stm32f10x.c ****   * @file    system_stm32f10x.c
   4:./src/system_stm32f10x.c ****   * @author  MCD Application Team
   5:./src/system_stm32f10x.c ****   * @version V3.5.0
   6:./src/system_stm32f10x.c ****   * @date    08-April-2011
   7:./src/system_stm32f10x.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:./src/system_stm32f10x.c ****   * 
   9:./src/system_stm32f10x.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:./src/system_stm32f10x.c ****   *     user application:
  11:./src/system_stm32f10x.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:./src/system_stm32f10x.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:./src/system_stm32f10x.c ****   *                      This function is called at startup just after reset and 
  14:./src/system_stm32f10x.c ****   *                      before branch to main program. This call is made inside
  15:./src/system_stm32f10x.c ****   *                      the "startup_stm32f10x_xx.s" file.
  16:./src/system_stm32f10x.c ****   *
  17:./src/system_stm32f10x.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:./src/system_stm32f10x.c ****   *                                  by the user application to setup the SysTick 
  19:./src/system_stm32f10x.c ****   *                                  timer or configure other parameters.
  20:./src/system_stm32f10x.c ****   *                                     
  21:./src/system_stm32f10x.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:./src/system_stm32f10x.c ****   *                                 be called whenever the core clock is changed
  23:./src/system_stm32f10x.c ****   *                                 during program execution.
  24:./src/system_stm32f10x.c ****   *
  25:./src/system_stm32f10x.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:./src/system_stm32f10x.c ****   *    Then SystemInit() function is called, in "startup_stm32f10x_xx.s" file, to
  27:./src/system_stm32f10x.c ****   *    configure the system clock before to branch to main program.
  28:./src/system_stm32f10x.c ****   *
  29:./src/system_stm32f10x.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  30:./src/system_stm32f10x.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  31:./src/system_stm32f10x.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  32:./src/system_stm32f10x.c ****   *
  33:./src/system_stm32f10x.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depedning on
  34:./src/system_stm32f10x.c ****   *    the product used), refer to "HSE_VALUE" define in "stm32f10x.h" file. 
  35:./src/system_stm32f10x.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  36:./src/system_stm32f10x.c ****   *    are using different crystal you have to adapt the HSE value to your own
  37:./src/system_stm32f10x.c ****   *    configuration.
  38:./src/system_stm32f10x.c ****   *        
  39:./src/system_stm32f10x.c ****   ******************************************************************************
  40:./src/system_stm32f10x.c ****   * @attention
  41:./src/system_stm32f10x.c ****   *
  42:./src/system_stm32f10x.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  43:./src/system_stm32f10x.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  44:./src/system_stm32f10x.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  45:./src/system_stm32f10x.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  46:./src/system_stm32f10x.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  47:./src/system_stm32f10x.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  48:./src/system_stm32f10x.c ****   *
  49:./src/system_stm32f10x.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  50:./src/system_stm32f10x.c ****   ******************************************************************************
  51:./src/system_stm32f10x.c ****   */
  52:./src/system_stm32f10x.c **** 
  53:./src/system_stm32f10x.c **** /** @addtogroup CMSIS
  54:./src/system_stm32f10x.c ****   * @{
  55:./src/system_stm32f10x.c ****   */
  56:./src/system_stm32f10x.c **** 
  57:./src/system_stm32f10x.c **** /** @addtogroup stm32f10x_system
  58:./src/system_stm32f10x.c ****   * @{
  59:./src/system_stm32f10x.c ****   */  
  60:./src/system_stm32f10x.c ****   
  61:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Includes
  62:./src/system_stm32f10x.c ****   * @{
  63:./src/system_stm32f10x.c ****   */
  64:./src/system_stm32f10x.c **** 
  65:./src/system_stm32f10x.c **** #include "stm32f10x.h"
  66:./src/system_stm32f10x.c **** 
  67:./src/system_stm32f10x.c **** /**
  68:./src/system_stm32f10x.c ****   * @}
  69:./src/system_stm32f10x.c ****   */
  70:./src/system_stm32f10x.c **** 
  71:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  72:./src/system_stm32f10x.c ****   * @{
  73:./src/system_stm32f10x.c ****   */
  74:./src/system_stm32f10x.c **** 
  75:./src/system_stm32f10x.c **** /**
  76:./src/system_stm32f10x.c ****   * @}
  77:./src/system_stm32f10x.c ****   */
  78:./src/system_stm32f10x.c **** 
  79:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Defines
  80:./src/system_stm32f10x.c ****   * @{
  81:./src/system_stm32f10x.c ****   */
  82:./src/system_stm32f10x.c **** 
  83:./src/system_stm32f10x.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  84:./src/system_stm32f10x.c ****    frequency (after reset the HSI is used as SYSCLK source)
  85:./src/system_stm32f10x.c ****    
  86:./src/system_stm32f10x.c ****    IMPORTANT NOTE:
  87:./src/system_stm32f10x.c ****    ============== 
  88:./src/system_stm32f10x.c ****    1. After each device reset the HSI is used as System clock source.
  89:./src/system_stm32f10x.c **** 
  90:./src/system_stm32f10x.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  91:./src/system_stm32f10x.c ****       maximum frequency.
  92:./src/system_stm32f10x.c ****       
  93:./src/system_stm32f10x.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  94:./src/system_stm32f10x.c ****     source.
  95:./src/system_stm32f10x.c **** 
  96:./src/system_stm32f10x.c ****    4. The System clock configuration functions provided within this file assume that:
  97:./src/system_stm32f10x.c ****         - For Low, Medium and High density Value line devices an external 8MHz 
  98:./src/system_stm32f10x.c ****           crystal is used to drive the System clock.
  99:./src/system_stm32f10x.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
 100:./src/system_stm32f10x.c ****           used to drive the System clock.
 101:./src/system_stm32f10x.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
 102:./src/system_stm32f10x.c ****           the System clock.
 103:./src/system_stm32f10x.c ****      If you are using different crystal you have to adapt those functions accordingly.
 104:./src/system_stm32f10x.c ****     */
 105:./src/system_stm32f10x.c ****     
 106:./src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 107:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 108:./src/system_stm32f10x.c ****  #define SYSCLK_FREQ_24MHz  24000000
 109:./src/system_stm32f10x.c **** #else
 110:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 111:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
 112:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_36MHz  36000000 */
 113:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
 114:./src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
 115:./src/system_stm32f10x.c **** #define SYSCLK_FREQ_72MHz  72000000
 116:./src/system_stm32f10x.c **** #endif
 117:./src/system_stm32f10x.c **** 
 118:./src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 119:./src/system_stm32f10x.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) or on 
 120:./src/system_stm32f10x.c ****      STM32100E-EVAL board (STM32 High-density value line devices) as data memory */ 
 121:./src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 122:./src/system_stm32f10x.c **** /* #define DATA_IN_ExtSRAM */
 123:./src/system_stm32f10x.c **** #endif
 124:./src/system_stm32f10x.c **** 
 125:./src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 126:./src/system_stm32f10x.c ****      Internal SRAM. */ 
 127:./src/system_stm32f10x.c **** /* #define VECT_TAB_SRAM */
 128:./src/system_stm32f10x.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
 129:./src/system_stm32f10x.c ****                                   This value must be a multiple of 0x200. */
 130:./src/system_stm32f10x.c **** 
 131:./src/system_stm32f10x.c **** 
 132:./src/system_stm32f10x.c **** /**
 133:./src/system_stm32f10x.c ****   * @}
 134:./src/system_stm32f10x.c ****   */
 135:./src/system_stm32f10x.c **** 
 136:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Macros
 137:./src/system_stm32f10x.c ****   * @{
 138:./src/system_stm32f10x.c ****   */
 139:./src/system_stm32f10x.c **** 
 140:./src/system_stm32f10x.c **** /**
 141:./src/system_stm32f10x.c ****   * @}
 142:./src/system_stm32f10x.c ****   */
 143:./src/system_stm32f10x.c **** 
 144:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Variables
 145:./src/system_stm32f10x.c ****   * @{
 146:./src/system_stm32f10x.c ****   */
 147:./src/system_stm32f10x.c **** 
 148:./src/system_stm32f10x.c **** /*******************************************************************************
 149:./src/system_stm32f10x.c **** *  Clock Definitions
 150:./src/system_stm32f10x.c **** *******************************************************************************/
 151:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 152:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 153:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 154:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 155:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 156:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 157:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 158:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 159:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 160:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 161:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 162:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 163:./src/system_stm32f10x.c **** #else /*!< HSI Selected as System Clock source */
 164:./src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
 165:./src/system_stm32f10x.c **** #endif
 166:./src/system_stm32f10x.c **** 
 167:./src/system_stm32f10x.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 168:./src/system_stm32f10x.c **** /**
 169:./src/system_stm32f10x.c ****   * @}
 170:./src/system_stm32f10x.c ****   */
 171:./src/system_stm32f10x.c **** 
 172:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 173:./src/system_stm32f10x.c ****   * @{
 174:./src/system_stm32f10x.c ****   */
 175:./src/system_stm32f10x.c **** 
 176:./src/system_stm32f10x.c **** static void SetSysClock(void);
 177:./src/system_stm32f10x.c **** 
 178:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 179:./src/system_stm32f10x.c ****   static void SetSysClockToHSE(void);
 180:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 181:./src/system_stm32f10x.c ****   static void SetSysClockTo24(void);
 182:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 183:./src/system_stm32f10x.c ****   static void SetSysClockTo36(void);
 184:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 185:./src/system_stm32f10x.c ****   static void SetSysClockTo48(void);
 186:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 187:./src/system_stm32f10x.c ****   static void SetSysClockTo56(void);  
 188:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 189:./src/system_stm32f10x.c ****   static void SetSysClockTo72(void);
 190:./src/system_stm32f10x.c **** #endif
 191:./src/system_stm32f10x.c **** 
 192:./src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 193:./src/system_stm32f10x.c ****   static void SystemInit_ExtMemCtl(void); 
 194:./src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 195:./src/system_stm32f10x.c **** 
 196:./src/system_stm32f10x.c **** /**
 197:./src/system_stm32f10x.c ****   * @}
 198:./src/system_stm32f10x.c ****   */
 199:./src/system_stm32f10x.c **** 
 200:./src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Functions
 201:./src/system_stm32f10x.c ****   * @{
 202:./src/system_stm32f10x.c ****   */
 203:./src/system_stm32f10x.c **** 
 204:./src/system_stm32f10x.c **** /**
 205:./src/system_stm32f10x.c ****   * @brief  Setup the microcontroller system
 206:./src/system_stm32f10x.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 207:./src/system_stm32f10x.c ****   *         SystemCoreClock variable.
 208:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 209:./src/system_stm32f10x.c ****   * @param  None
 210:./src/system_stm32f10x.c ****   * @retval None
 211:./src/system_stm32f10x.c ****   */
 212:./src/system_stm32f10x.c **** void SystemInit (void)
 213:./src/system_stm32f10x.c **** {
  27              		.loc 1 213 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 214:./src/system_stm32f10x.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 215:./src/system_stm32f10x.c ****   /* Set HSION bit */
 216:./src/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  32              		.loc 1 216 0
  33 0000 4FF48053 		mov	r3, #4096
  34 0004 C4F20203 		movt	r3, 16386
  35 0008 1A68     		ldr	r2, [r3, #0]
 217:./src/system_stm32f10x.c **** 
 218:./src/system_stm32f10x.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 219:./src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 220:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  36              		.loc 1 220 0
  37 000a 0020     		movs	r0, #0
 216:./src/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  38              		.loc 1 216 0
  39 000c 42F00101 		orr	r1, r2, #1
  40 0010 1960     		str	r1, [r3, #0]
  41              		.loc 1 220 0
  42 0012 5A68     		ldr	r2, [r3, #4]
  43 0014 CFF6FF00 		movt	r0, 63743
  44 0018 02EA0001 		and	r1, r2, r0
  45 001c 5960     		str	r1, [r3, #4]
 221:./src/system_stm32f10x.c **** #else
 222:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 223:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */   
 224:./src/system_stm32f10x.c ****   
 225:./src/system_stm32f10x.c ****   /* Reset HSEON, CSSON and PLLON bits */
 226:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  46              		.loc 1 226 0
  47 001e 1A68     		ldr	r2, [r3, #0]
  48              	.LBB8:
  49              	.LBB9:
  50              	.LBB10:
 227:./src/system_stm32f10x.c **** 
 228:./src/system_stm32f10x.c ****   /* Reset HSEBYP bit */
 229:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 230:./src/system_stm32f10x.c **** 
 231:./src/system_stm32f10x.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 232:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 233:./src/system_stm32f10x.c **** 
 234:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 235:./src/system_stm32f10x.c ****   /* Reset PLL2ON and PLL3ON bits */
 236:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 237:./src/system_stm32f10x.c **** 
 238:./src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 239:./src/system_stm32f10x.c ****   RCC->CIR = 0x00FF0000;
 240:./src/system_stm32f10x.c **** 
 241:./src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 242:./src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;
 243:./src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 244:./src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 245:./src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 246:./src/system_stm32f10x.c **** 
 247:./src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 248:./src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;      
 249:./src/system_stm32f10x.c **** #else
 250:./src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 251:./src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 252:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 253:./src/system_stm32f10x.c ****     
 254:./src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 255:./src/system_stm32f10x.c ****   #ifdef DATA_IN_ExtSRAM
 256:./src/system_stm32f10x.c ****     SystemInit_ExtMemCtl(); 
 257:./src/system_stm32f10x.c ****   #endif /* DATA_IN_ExtSRAM */
 258:./src/system_stm32f10x.c **** #endif 
 259:./src/system_stm32f10x.c **** 
 260:./src/system_stm32f10x.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 261:./src/system_stm32f10x.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 262:./src/system_stm32f10x.c ****   SetSysClock();
 263:./src/system_stm32f10x.c **** 
 264:./src/system_stm32f10x.c **** #ifdef VECT_TAB_SRAM
 265:./src/system_stm32f10x.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 266:./src/system_stm32f10x.c **** #else
 267:./src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 268:./src/system_stm32f10x.c **** #endif 
 269:./src/system_stm32f10x.c **** }
 270:./src/system_stm32f10x.c **** 
 271:./src/system_stm32f10x.c **** /**
 272:./src/system_stm32f10x.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 273:./src/system_stm32f10x.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 274:./src/system_stm32f10x.c ****   *         be used by the user application to setup the SysTick timer or configure
 275:./src/system_stm32f10x.c ****   *         other parameters.
 276:./src/system_stm32f10x.c ****   *           
 277:./src/system_stm32f10x.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 278:./src/system_stm32f10x.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 279:./src/system_stm32f10x.c ****   *         based on this variable will be incorrect.         
 280:./src/system_stm32f10x.c ****   *     
 281:./src/system_stm32f10x.c ****   * @note   - The system frequency computed by this function is not the real 
 282:./src/system_stm32f10x.c ****   *           frequency in the chip. It is calculated based on the predefined 
 283:./src/system_stm32f10x.c ****   *           constant and the selected clock source:
 284:./src/system_stm32f10x.c ****   *             
 285:./src/system_stm32f10x.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 286:./src/system_stm32f10x.c ****   *                                              
 287:./src/system_stm32f10x.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 288:./src/system_stm32f10x.c ****   *                          
 289:./src/system_stm32f10x.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 290:./src/system_stm32f10x.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 291:./src/system_stm32f10x.c ****   *         
 292:./src/system_stm32f10x.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 293:./src/system_stm32f10x.c ****   *             8 MHz) but the real value may vary depending on the variations
 294:./src/system_stm32f10x.c ****   *             in voltage and temperature.   
 295:./src/system_stm32f10x.c ****   *    
 296:./src/system_stm32f10x.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 297:./src/system_stm32f10x.c ****   *              8 MHz or 25 MHz, depedning on the product used), user has to ensure
 298:./src/system_stm32f10x.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 299:./src/system_stm32f10x.c ****   *              Otherwise, this function may have wrong result.
 300:./src/system_stm32f10x.c ****   *                
 301:./src/system_stm32f10x.c ****   *         - The result of this function could be not correct when using fractional
 302:./src/system_stm32f10x.c ****   *           value for HSE crystal.
 303:./src/system_stm32f10x.c ****   * @param  None
 304:./src/system_stm32f10x.c ****   * @retval None
 305:./src/system_stm32f10x.c ****   */
 306:./src/system_stm32f10x.c **** void SystemCoreClockUpdate (void)
 307:./src/system_stm32f10x.c **** {
 308:./src/system_stm32f10x.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 309:./src/system_stm32f10x.c **** 
 310:./src/system_stm32f10x.c **** #ifdef  STM32F10X_CL
 311:./src/system_stm32f10x.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 312:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 313:./src/system_stm32f10x.c **** 
 314:./src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 315:./src/system_stm32f10x.c ****   uint32_t prediv1factor = 0;
 316:./src/system_stm32f10x.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
 317:./src/system_stm32f10x.c ****     
 318:./src/system_stm32f10x.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 319:./src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 320:./src/system_stm32f10x.c ****   
 321:./src/system_stm32f10x.c ****   switch (tmp)
 322:./src/system_stm32f10x.c ****   {
 323:./src/system_stm32f10x.c ****     case 0x00:  /* HSI used as system clock */
 324:./src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 325:./src/system_stm32f10x.c ****       break;
 326:./src/system_stm32f10x.c ****     case 0x04:  /* HSE used as system clock */
 327:./src/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 328:./src/system_stm32f10x.c ****       break;
 329:./src/system_stm32f10x.c ****     case 0x08:  /* PLL used as system clock */
 330:./src/system_stm32f10x.c **** 
 331:./src/system_stm32f10x.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 332:./src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 333:./src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 334:./src/system_stm32f10x.c ****       
 335:./src/system_stm32f10x.c **** #ifndef STM32F10X_CL      
 336:./src/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 337:./src/system_stm32f10x.c ****       
 338:./src/system_stm32f10x.c ****       if (pllsource == 0x00)
 339:./src/system_stm32f10x.c ****       {
 340:./src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 341:./src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 342:./src/system_stm32f10x.c ****       }
 343:./src/system_stm32f10x.c ****       else
 344:./src/system_stm32f10x.c ****       {
 345:./src/system_stm32f10x.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 346:./src/system_stm32f10x.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 347:./src/system_stm32f10x.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 348:./src/system_stm32f10x.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 349:./src/system_stm32f10x.c ****  #else
 350:./src/system_stm32f10x.c ****         /* HSE selected as PLL clock entry */
 351:./src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 352:./src/system_stm32f10x.c ****         {/* HSE oscillator clock divided by 2 */
 353:./src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 354:./src/system_stm32f10x.c ****         }
 355:./src/system_stm32f10x.c ****         else
 356:./src/system_stm32f10x.c ****         {
 357:./src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 358:./src/system_stm32f10x.c ****         }
 359:./src/system_stm32f10x.c ****  #endif
 360:./src/system_stm32f10x.c ****       }
 361:./src/system_stm32f10x.c **** #else
 362:./src/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 363:./src/system_stm32f10x.c ****       
 364:./src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 365:./src/system_stm32f10x.c ****       {
 366:./src/system_stm32f10x.c ****          pllmull += 2;
 367:./src/system_stm32f10x.c ****       }
 368:./src/system_stm32f10x.c ****       else
 369:./src/system_stm32f10x.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 370:./src/system_stm32f10x.c ****         pllmull = 13 / 2; 
 371:./src/system_stm32f10x.c ****       }
 372:./src/system_stm32f10x.c ****             
 373:./src/system_stm32f10x.c ****       if (pllsource == 0x00)
 374:./src/system_stm32f10x.c ****       {
 375:./src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 376:./src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 377:./src/system_stm32f10x.c ****       }
 378:./src/system_stm32f10x.c ****       else
 379:./src/system_stm32f10x.c ****       {/* PREDIV1 selected as PLL clock entry */
 380:./src/system_stm32f10x.c ****         
 381:./src/system_stm32f10x.c ****         /* Get PREDIV1 clock source and division factor */
 382:./src/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 383:./src/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 384:./src/system_stm32f10x.c ****         
 385:./src/system_stm32f10x.c ****         if (prediv1source == 0)
 386:./src/system_stm32f10x.c ****         { 
 387:./src/system_stm32f10x.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 388:./src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 389:./src/system_stm32f10x.c ****         }
 390:./src/system_stm32f10x.c ****         else
 391:./src/system_stm32f10x.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 392:./src/system_stm32f10x.c ****           
 393:./src/system_stm32f10x.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 394:./src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 395:./src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 396:./src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 397:./src/system_stm32f10x.c ****         }
 398:./src/system_stm32f10x.c ****       }
 399:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */ 
 400:./src/system_stm32f10x.c ****       break;
 401:./src/system_stm32f10x.c **** 
 402:./src/system_stm32f10x.c ****     default:
 403:./src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 404:./src/system_stm32f10x.c ****       break;
 405:./src/system_stm32f10x.c ****   }
 406:./src/system_stm32f10x.c ****   
 407:./src/system_stm32f10x.c ****   /* Compute HCLK clock frequency ----------------*/
 408:./src/system_stm32f10x.c ****   /* Get HCLK prescaler */
 409:./src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 410:./src/system_stm32f10x.c ****   /* HCLK clock frequency */
 411:./src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 412:./src/system_stm32f10x.c **** }
 413:./src/system_stm32f10x.c **** 
 414:./src/system_stm32f10x.c **** /**
 415:./src/system_stm32f10x.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 416:./src/system_stm32f10x.c ****   * @param  None
 417:./src/system_stm32f10x.c ****   * @retval None
 418:./src/system_stm32f10x.c ****   */
 419:./src/system_stm32f10x.c **** static void SetSysClock(void)
 420:./src/system_stm32f10x.c **** {
 421:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 422:./src/system_stm32f10x.c ****   SetSysClockToHSE();
 423:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 424:./src/system_stm32f10x.c ****   SetSysClockTo24();
 425:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 426:./src/system_stm32f10x.c ****   SetSysClockTo36();
 427:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 428:./src/system_stm32f10x.c ****   SetSysClockTo48();
 429:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 430:./src/system_stm32f10x.c ****   SetSysClockTo56();  
 431:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 432:./src/system_stm32f10x.c ****   SetSysClockTo72();
 433:./src/system_stm32f10x.c **** #endif
 434:./src/system_stm32f10x.c ****  
 435:./src/system_stm32f10x.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 436:./src/system_stm32f10x.c ****     source (default after reset) */ 
 437:./src/system_stm32f10x.c **** }
 438:./src/system_stm32f10x.c **** 
 439:./src/system_stm32f10x.c **** /**
 440:./src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 441:./src/system_stm32f10x.c ****   *          before jump to __main
 442:./src/system_stm32f10x.c ****   * @param  None
 443:./src/system_stm32f10x.c ****   * @retval None
 444:./src/system_stm32f10x.c ****   */ 
 445:./src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 446:./src/system_stm32f10x.c **** /**
 447:./src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. 
 448:./src/system_stm32f10x.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 449:./src/system_stm32f10x.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
 450:./src/system_stm32f10x.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 451:./src/system_stm32f10x.c ****   *         data memory (including heap and stack).
 452:./src/system_stm32f10x.c ****   * @param  None
 453:./src/system_stm32f10x.c ****   * @retval None
 454:./src/system_stm32f10x.c ****   */ 
 455:./src/system_stm32f10x.c **** void SystemInit_ExtMemCtl(void) 
 456:./src/system_stm32f10x.c **** {
 457:./src/system_stm32f10x.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 458:./src/system_stm32f10x.c ****   required, then adjust the Register Addresses */
 459:./src/system_stm32f10x.c **** 
 460:./src/system_stm32f10x.c ****   /* Enable FSMC clock */
 461:./src/system_stm32f10x.c ****   RCC->AHBENR = 0x00000114;
 462:./src/system_stm32f10x.c ****   
 463:./src/system_stm32f10x.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 464:./src/system_stm32f10x.c ****   RCC->APB2ENR = 0x000001E0;
 465:./src/system_stm32f10x.c ****   
 466:./src/system_stm32f10x.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 467:./src/system_stm32f10x.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 468:./src/system_stm32f10x.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 469:./src/system_stm32f10x.c **** /*----------------  NE3 configuration ----------------------------------------*/
 470:./src/system_stm32f10x.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 471:./src/system_stm32f10x.c ****   
 472:./src/system_stm32f10x.c ****   GPIOD->CRL = 0x44BB44BB;  
 473:./src/system_stm32f10x.c ****   GPIOD->CRH = 0xBBBBBBBB;
 474:./src/system_stm32f10x.c **** 
 475:./src/system_stm32f10x.c ****   GPIOE->CRL = 0xB44444BB;  
 476:./src/system_stm32f10x.c ****   GPIOE->CRH = 0xBBBBBBBB;
 477:./src/system_stm32f10x.c **** 
 478:./src/system_stm32f10x.c ****   GPIOF->CRL = 0x44BBBBBB;  
 479:./src/system_stm32f10x.c ****   GPIOF->CRH = 0xBBBB4444;
 480:./src/system_stm32f10x.c **** 
 481:./src/system_stm32f10x.c ****   GPIOG->CRL = 0x44BBBBBB;  
 482:./src/system_stm32f10x.c ****   GPIOG->CRH = 0x44444B44;
 483:./src/system_stm32f10x.c ****    
 484:./src/system_stm32f10x.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 485:./src/system_stm32f10x.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 486:./src/system_stm32f10x.c ****   
 487:./src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 488:./src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 489:./src/system_stm32f10x.c **** }
 490:./src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 491:./src/system_stm32f10x.c **** 
 492:./src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 493:./src/system_stm32f10x.c **** /**
 494:./src/system_stm32f10x.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 495:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 496:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 497:./src/system_stm32f10x.c ****   * @param  None
 498:./src/system_stm32f10x.c ****   * @retval None
 499:./src/system_stm32f10x.c ****   */
 500:./src/system_stm32f10x.c **** static void SetSysClockToHSE(void)
 501:./src/system_stm32f10x.c **** {
 502:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 503:./src/system_stm32f10x.c ****   
 504:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 505:./src/system_stm32f10x.c ****   /* Enable HSE */    
 506:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 507:./src/system_stm32f10x.c ****  
 508:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 509:./src/system_stm32f10x.c ****   do
 510:./src/system_stm32f10x.c ****   {
 511:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 512:./src/system_stm32f10x.c ****     StartUpCounter++;  
 513:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 514:./src/system_stm32f10x.c **** 
 515:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 516:./src/system_stm32f10x.c ****   {
 517:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 518:./src/system_stm32f10x.c ****   }
 519:./src/system_stm32f10x.c ****   else
 520:./src/system_stm32f10x.c ****   {
 521:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 522:./src/system_stm32f10x.c ****   }  
 523:./src/system_stm32f10x.c **** 
 524:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 525:./src/system_stm32f10x.c ****   {
 526:./src/system_stm32f10x.c **** 
 527:./src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
 528:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 529:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 530:./src/system_stm32f10x.c **** 
 531:./src/system_stm32f10x.c ****     /* Flash 0 wait state */
 532:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 533:./src/system_stm32f10x.c **** 
 534:./src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 535:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 536:./src/system_stm32f10x.c **** #else
 537:./src/system_stm32f10x.c ****     if (HSE_VALUE <= 24000000)
 538:./src/system_stm32f10x.c **** 	{
 539:./src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 540:./src/system_stm32f10x.c **** 	}
 541:./src/system_stm32f10x.c **** 	else
 542:./src/system_stm32f10x.c **** 	{
 543:./src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 544:./src/system_stm32f10x.c **** 	}
 545:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 546:./src/system_stm32f10x.c **** #endif
 547:./src/system_stm32f10x.c ****  
 548:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 549:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 550:./src/system_stm32f10x.c ****       
 551:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 552:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 553:./src/system_stm32f10x.c ****     
 554:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 555:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 556:./src/system_stm32f10x.c ****     
 557:./src/system_stm32f10x.c ****     /* Select HSE as system clock source */
 558:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 559:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 560:./src/system_stm32f10x.c **** 
 561:./src/system_stm32f10x.c ****     /* Wait till HSE is used as system clock source */
 562:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 563:./src/system_stm32f10x.c ****     {
 564:./src/system_stm32f10x.c ****     }
 565:./src/system_stm32f10x.c ****   }
 566:./src/system_stm32f10x.c ****   else
 567:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 568:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 569:./src/system_stm32f10x.c ****   }  
 570:./src/system_stm32f10x.c **** }
 571:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 572:./src/system_stm32f10x.c **** /**
 573:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 574:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 575:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 576:./src/system_stm32f10x.c ****   * @param  None
 577:./src/system_stm32f10x.c ****   * @retval None
 578:./src/system_stm32f10x.c ****   */
 579:./src/system_stm32f10x.c **** static void SetSysClockTo24(void)
 580:./src/system_stm32f10x.c **** {
 581:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 582:./src/system_stm32f10x.c ****   
 583:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 584:./src/system_stm32f10x.c ****   /* Enable HSE */    
 585:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 586:./src/system_stm32f10x.c ****  
 587:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 588:./src/system_stm32f10x.c ****   do
 589:./src/system_stm32f10x.c ****   {
 590:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 591:./src/system_stm32f10x.c ****     StartUpCounter++;  
 592:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 593:./src/system_stm32f10x.c **** 
 594:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 595:./src/system_stm32f10x.c ****   {
 596:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 597:./src/system_stm32f10x.c ****   }
 598:./src/system_stm32f10x.c ****   else
 599:./src/system_stm32f10x.c ****   {
 600:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 601:./src/system_stm32f10x.c ****   }  
 602:./src/system_stm32f10x.c **** 
 603:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 604:./src/system_stm32f10x.c ****   {
 605:./src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
 606:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 607:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 608:./src/system_stm32f10x.c **** 
 609:./src/system_stm32f10x.c ****     /* Flash 0 wait state */
 610:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 611:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 612:./src/system_stm32f10x.c **** #endif
 613:./src/system_stm32f10x.c ****  
 614:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 615:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 616:./src/system_stm32f10x.c ****       
 617:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 618:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 619:./src/system_stm32f10x.c ****     
 620:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 621:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 622:./src/system_stm32f10x.c ****     
 623:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 624:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 625:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 626:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 627:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 628:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 629:./src/system_stm32f10x.c **** 
 630:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 631:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 632:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 633:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 634:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 635:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 636:./src/system_stm32f10x.c ****   
 637:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 638:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 639:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 640:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 641:./src/system_stm32f10x.c ****     {
 642:./src/system_stm32f10x.c ****     }   
 643:./src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 644:./src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 645:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 646:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 647:./src/system_stm32f10x.c **** #else    
 648:./src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 649:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 650:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 651:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 652:./src/system_stm32f10x.c **** 
 653:./src/system_stm32f10x.c ****     /* Enable PLL */
 654:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 655:./src/system_stm32f10x.c **** 
 656:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 657:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 658:./src/system_stm32f10x.c ****     {
 659:./src/system_stm32f10x.c ****     }
 660:./src/system_stm32f10x.c **** 
 661:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 662:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 663:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 664:./src/system_stm32f10x.c **** 
 665:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 666:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 667:./src/system_stm32f10x.c ****     {
 668:./src/system_stm32f10x.c ****     }
 669:./src/system_stm32f10x.c ****   }
 670:./src/system_stm32f10x.c ****   else
 671:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 672:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 673:./src/system_stm32f10x.c ****   } 
 674:./src/system_stm32f10x.c **** }
 675:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 676:./src/system_stm32f10x.c **** /**
 677:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
 678:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 679:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 680:./src/system_stm32f10x.c ****   * @param  None
 681:./src/system_stm32f10x.c ****   * @retval None
 682:./src/system_stm32f10x.c ****   */
 683:./src/system_stm32f10x.c **** static void SetSysClockTo36(void)
 684:./src/system_stm32f10x.c **** {
 685:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 686:./src/system_stm32f10x.c ****   
 687:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 688:./src/system_stm32f10x.c ****   /* Enable HSE */    
 689:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 690:./src/system_stm32f10x.c ****  
 691:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 692:./src/system_stm32f10x.c ****   do
 693:./src/system_stm32f10x.c ****   {
 694:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 695:./src/system_stm32f10x.c ****     StartUpCounter++;  
 696:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 697:./src/system_stm32f10x.c **** 
 698:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 699:./src/system_stm32f10x.c ****   {
 700:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 701:./src/system_stm32f10x.c ****   }
 702:./src/system_stm32f10x.c ****   else
 703:./src/system_stm32f10x.c ****   {
 704:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 705:./src/system_stm32f10x.c ****   }  
 706:./src/system_stm32f10x.c **** 
 707:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 708:./src/system_stm32f10x.c ****   {
 709:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 710:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 711:./src/system_stm32f10x.c **** 
 712:./src/system_stm32f10x.c ****     /* Flash 1 wait state */
 713:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 714:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 715:./src/system_stm32f10x.c ****  
 716:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 717:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 718:./src/system_stm32f10x.c ****       
 719:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 720:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 721:./src/system_stm32f10x.c ****     
 722:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 723:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 724:./src/system_stm32f10x.c ****     
 725:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 726:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 727:./src/system_stm32f10x.c ****     
 728:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 729:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 730:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 731:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
 732:./src/system_stm32f10x.c **** 
 733:./src/system_stm32f10x.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 734:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
 735:./src/system_stm32f10x.c ****         
 736:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 737:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 738:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 739:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 740:./src/system_stm32f10x.c ****   
 741:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 742:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 743:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 744:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 745:./src/system_stm32f10x.c ****     {
 746:./src/system_stm32f10x.c ****     }
 747:./src/system_stm32f10x.c ****     
 748:./src/system_stm32f10x.c **** #else    
 749:./src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 750:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 751:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 752:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 753:./src/system_stm32f10x.c **** 
 754:./src/system_stm32f10x.c ****     /* Enable PLL */
 755:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 756:./src/system_stm32f10x.c **** 
 757:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 758:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 759:./src/system_stm32f10x.c ****     {
 760:./src/system_stm32f10x.c ****     }
 761:./src/system_stm32f10x.c **** 
 762:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 763:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 764:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 765:./src/system_stm32f10x.c **** 
 766:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 767:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 768:./src/system_stm32f10x.c ****     {
 769:./src/system_stm32f10x.c ****     }
 770:./src/system_stm32f10x.c ****   }
 771:./src/system_stm32f10x.c ****   else
 772:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 773:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 774:./src/system_stm32f10x.c ****   } 
 775:./src/system_stm32f10x.c **** }
 776:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 777:./src/system_stm32f10x.c **** /**
 778:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 48MHz and configure HCLK, PCLK2 
 779:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 780:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 781:./src/system_stm32f10x.c ****   * @param  None
 782:./src/system_stm32f10x.c ****   * @retval None
 783:./src/system_stm32f10x.c ****   */
 784:./src/system_stm32f10x.c **** static void SetSysClockTo48(void)
 785:./src/system_stm32f10x.c **** {
 786:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 787:./src/system_stm32f10x.c ****   
 788:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 789:./src/system_stm32f10x.c ****   /* Enable HSE */    
 790:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 791:./src/system_stm32f10x.c ****  
 792:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 793:./src/system_stm32f10x.c ****   do
 794:./src/system_stm32f10x.c ****   {
 795:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 796:./src/system_stm32f10x.c ****     StartUpCounter++;  
 797:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 798:./src/system_stm32f10x.c **** 
 799:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800:./src/system_stm32f10x.c ****   {
 801:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 802:./src/system_stm32f10x.c ****   }
 803:./src/system_stm32f10x.c ****   else
 804:./src/system_stm32f10x.c ****   {
 805:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 806:./src/system_stm32f10x.c ****   }  
 807:./src/system_stm32f10x.c **** 
 808:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 809:./src/system_stm32f10x.c ****   {
 810:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 811:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 812:./src/system_stm32f10x.c **** 
 813:./src/system_stm32f10x.c ****     /* Flash 1 wait state */
 814:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 815:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 816:./src/system_stm32f10x.c ****  
 817:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 818:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 819:./src/system_stm32f10x.c ****       
 820:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 821:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 822:./src/system_stm32f10x.c ****     
 823:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 824:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 825:./src/system_stm32f10x.c ****     
 826:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 827:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 828:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 829:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 830:./src/system_stm32f10x.c ****         
 831:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 832:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 833:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 834:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 835:./src/system_stm32f10x.c ****   
 836:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 837:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 838:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 839:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 840:./src/system_stm32f10x.c ****     {
 841:./src/system_stm32f10x.c ****     }
 842:./src/system_stm32f10x.c ****     
 843:./src/system_stm32f10x.c ****    
 844:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 48 MHz */ 
 845:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 846:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 847:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 848:./src/system_stm32f10x.c **** #else    
 849:./src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 6 = 48 MHz */
 850:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 851:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 852:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 853:./src/system_stm32f10x.c **** 
 854:./src/system_stm32f10x.c ****     /* Enable PLL */
 855:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 856:./src/system_stm32f10x.c **** 
 857:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 858:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 859:./src/system_stm32f10x.c ****     {
 860:./src/system_stm32f10x.c ****     }
 861:./src/system_stm32f10x.c **** 
 862:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 863:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 864:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 865:./src/system_stm32f10x.c **** 
 866:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 867:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 868:./src/system_stm32f10x.c ****     {
 869:./src/system_stm32f10x.c ****     }
 870:./src/system_stm32f10x.c ****   }
 871:./src/system_stm32f10x.c ****   else
 872:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 873:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 874:./src/system_stm32f10x.c ****   } 
 875:./src/system_stm32f10x.c **** }
 876:./src/system_stm32f10x.c **** 
 877:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 878:./src/system_stm32f10x.c **** /**
 879:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 56MHz and configure HCLK, PCLK2 
 880:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 881:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 882:./src/system_stm32f10x.c ****   * @param  None
 883:./src/system_stm32f10x.c ****   * @retval None
 884:./src/system_stm32f10x.c ****   */
 885:./src/system_stm32f10x.c **** static void SetSysClockTo56(void)
 886:./src/system_stm32f10x.c **** {
 887:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 888:./src/system_stm32f10x.c ****   
 889:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
 890:./src/system_stm32f10x.c ****   /* Enable HSE */    
 891:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 892:./src/system_stm32f10x.c ****  
 893:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 894:./src/system_stm32f10x.c ****   do
 895:./src/system_stm32f10x.c ****   {
 896:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 897:./src/system_stm32f10x.c ****     StartUpCounter++;  
 898:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 899:./src/system_stm32f10x.c **** 
 900:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 901:./src/system_stm32f10x.c ****   {
 902:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 903:./src/system_stm32f10x.c ****   }
 904:./src/system_stm32f10x.c ****   else
 905:./src/system_stm32f10x.c ****   {
 906:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 907:./src/system_stm32f10x.c ****   }  
 908:./src/system_stm32f10x.c **** 
 909:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 910:./src/system_stm32f10x.c ****   {
 911:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 912:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 913:./src/system_stm32f10x.c **** 
 914:./src/system_stm32f10x.c ****     /* Flash 2 wait state */
 915:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 916:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 917:./src/system_stm32f10x.c ****  
 918:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 919:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 920:./src/system_stm32f10x.c ****       
 921:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 922:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 923:./src/system_stm32f10x.c ****     
 924:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 925:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 926:./src/system_stm32f10x.c **** 
 927:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 928:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 929:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 930:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 931:./src/system_stm32f10x.c ****         
 932:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 933:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 934:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 935:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 936:./src/system_stm32f10x.c ****   
 937:./src/system_stm32f10x.c ****     /* Enable PLL2 */
 938:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 939:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 940:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 941:./src/system_stm32f10x.c ****     {
 942:./src/system_stm32f10x.c ****     }
 943:./src/system_stm32f10x.c ****     
 944:./src/system_stm32f10x.c ****    
 945:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 7 = 56 MHz */ 
 946:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 947:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 948:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL7); 
 949:./src/system_stm32f10x.c **** #else     
 950:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
 951:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 952:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 953:./src/system_stm32f10x.c **** 
 954:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 955:./src/system_stm32f10x.c **** 
 956:./src/system_stm32f10x.c ****     /* Enable PLL */
 957:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 958:./src/system_stm32f10x.c **** 
 959:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 960:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 961:./src/system_stm32f10x.c ****     {
 962:./src/system_stm32f10x.c ****     }
 963:./src/system_stm32f10x.c **** 
 964:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 965:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 966:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 967:./src/system_stm32f10x.c **** 
 968:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 969:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 970:./src/system_stm32f10x.c ****     {
 971:./src/system_stm32f10x.c ****     }
 972:./src/system_stm32f10x.c ****   }
 973:./src/system_stm32f10x.c ****   else
 974:./src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 975:./src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 976:./src/system_stm32f10x.c ****   } 
 977:./src/system_stm32f10x.c **** }
 978:./src/system_stm32f10x.c **** 
 979:./src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 980:./src/system_stm32f10x.c **** /**
 981:./src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 72MHz and configure HCLK, PCLK2 
 982:./src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 983:./src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 984:./src/system_stm32f10x.c ****   * @param  None
 985:./src/system_stm32f10x.c ****   * @retval None
 986:./src/system_stm32f10x.c ****   */
 987:./src/system_stm32f10x.c **** static void SetSysClockTo72(void)
 988:./src/system_stm32f10x.c **** {
 989:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  51              		.loc 1 989 0
  52 0020 0021     		movs	r1, #0
  53              	.LBE10:
  54              	.LBE9:
  55              	.LBE8:
 226:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  56              		.loc 1 226 0
  57 0022 22F08470 		bic	r0, r2, #17301504
  58 0026 20F48032 		bic	r2, r0, #65536
  59 002a 1A60     		str	r2, [r3, #0]
 229:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  60              		.loc 1 229 0
  61 002c 1868     		ldr	r0, [r3, #0]
 213:./src/system_stm32f10x.c **** {
  62              		.loc 1 213 0
  63 002e 82B0     		sub	sp, sp, #8
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
 229:./src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  66              		.loc 1 229 0
  67 0030 20F48022 		bic	r2, r0, #262144
  68 0034 1A60     		str	r2, [r3, #0]
 232:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  69              		.loc 1 232 0
  70 0036 5868     		ldr	r0, [r3, #4]
  71              	.LBB17:
  72              	.LBB14:
  73              	.LBB11:
 990:./src/system_stm32f10x.c ****   
 991:./src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 992:./src/system_stm32f10x.c ****   /* Enable HSE */    
 993:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 994:./src/system_stm32f10x.c ****  
 995:./src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 996:./src/system_stm32f10x.c ****   do
 997:./src/system_stm32f10x.c ****   {
 998:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  74              		.loc 1 998 0
  75 0038 1A46     		mov	r2, r3
  76              	.LBE11:
  77              	.LBE14:
  78              	.LBE17:
 232:./src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  79              		.loc 1 232 0
  80 003a 20F4FE00 		bic	r0, r0, #8323072
  81 003e 5860     		str	r0, [r3, #4]
 251:./src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
  82              		.loc 1 251 0
  83 0040 4FF41F00 		mov	r0, #10420224
  84 0044 9860     		str	r0, [r3, #8]
  85              	.LBB18:
  86              	.LBB15:
  87              	.LBB12:
 989:./src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  88              		.loc 1 989 0
  89 0046 0091     		str	r1, [sp, #0]
  90              	.LVL0:
  91 0048 0191     		str	r1, [sp, #4]
  92              	.LVL1:
 993:./src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  93              		.loc 1 993 0
  94 004a 1868     		ldr	r0, [r3, #0]
  95 004c 40F48031 		orr	r1, r0, #65536
  96 0050 1960     		str	r1, [r3, #0]
  97 0052 03E0     		b	.L3
  98              	.L13:
 999:./src/system_stm32f10x.c ****     StartUpCounter++;  
1000:./src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  99              		.loc 1 1000 0
 100 0054 0099     		ldr	r1, [sp, #0]
 101 0056 B1F5A06F 		cmp	r1, #1280
 102 005a 09D0     		beq	.L2
 103              	.L3:
 998:./src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 104              		.loc 1 998 0
 105 005c 1068     		ldr	r0, [r2, #0]
 106 005e 00F40033 		and	r3, r0, #131072
 107              	.LVL2:
 108 0062 0193     		str	r3, [sp, #4]
 109              	.LVL3:
 999:./src/system_stm32f10x.c ****     StartUpCounter++;  
 110              		.loc 1 999 0
 111 0064 0099     		ldr	r1, [sp, #0]
 112 0066 481C     		adds	r0, r1, #1
 113              	.LVL4:
 114 0068 0090     		str	r0, [sp, #0]
 115              	.LVL5:
 116              		.loc 1 1000 0
 117 006a 019B     		ldr	r3, [sp, #4]
 118              	.LVL6:
 119 006c 002B     		cmp	r3, #0
 120 006e F1D0     		beq	.L13
 121              	.L2:
1001:./src/system_stm32f10x.c **** 
1002:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 122              		.loc 1 1002 0
 123 0070 4FF4805C 		mov	ip, #4096
 124 0074 C4F2020C 		movt	ip, 16386
 125 0078 DCF80030 		ldr	r3, [ip, #0]
 126 007c 13F40032 		ands	r2, r3, #131072
1003:./src/system_stm32f10x.c ****   {
1004:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
1005:./src/system_stm32f10x.c ****   }
1006:./src/system_stm32f10x.c ****   else
1007:./src/system_stm32f10x.c ****   {
1008:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 127              		.loc 1 1008 0
 128 0080 08BF     		it	eq
 129 0082 0192     		streq	r2, [sp, #4]
1002:./src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 130              		.loc 1 1002 0
 131 0084 01D0     		beq	.L5
1004:./src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 132              		.loc 1 1004 0
 133 0086 0120     		movs	r0, #1
 134              	.LVL7:
 135 0088 0190     		str	r0, [sp, #4]
 136              	.L5:
1009:./src/system_stm32f10x.c ****   }  
1010:./src/system_stm32f10x.c **** 
1011:./src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 137              		.loc 1 1011 0
 138 008a 0199     		ldr	r1, [sp, #4]
 139 008c 0129     		cmp	r1, #1
 140 008e 09D0     		beq	.L14
 141              	.L6:
 142              	.LBE12:
 143              	.LBE15:
 144              	.LBE18:
 267:./src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 145              		.loc 1 267 0
 146 0090 4FF46D4C 		mov	ip, #60672
 147 0094 CEF2000C 		movt	ip, 57344
 148 0098 4FF00062 		mov	r2, #134217728
 149 009c CCF80820 		str	r2, [ip, #8]
 269:./src/system_stm32f10x.c **** }
 150              		.loc 1 269 0
 151 00a0 02B0     		add	sp, sp, #8
 152 00a2 7047     		bx	lr
 153              	.L14:
 154              	.LBB19:
 155              	.LBB16:
 156              	.LBB13:
1012:./src/system_stm32f10x.c ****   {
1013:./src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
1014:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 157              		.loc 1 1014 0
 158 00a4 4FF4005C 		mov	ip, #8192
 159 00a8 C4F2020C 		movt	ip, 16386
 160 00ac DCF80010 		ldr	r1, [ip, #0]
1015:./src/system_stm32f10x.c **** 
1016:./src/system_stm32f10x.c ****     /* Flash 2 wait state */
1017:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
1018:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
1019:./src/system_stm32f10x.c **** 
1020:./src/system_stm32f10x.c ****  
1021:./src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
1022:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 161              		.loc 1 1022 0
 162 00b0 4FF48053 		mov	r3, #4096
1014:./src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 163              		.loc 1 1014 0
 164 00b4 41F01002 		orr	r2, r1, #16
 165 00b8 CCF80020 		str	r2, [ip, #0]
1017:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 166              		.loc 1 1017 0
 167 00bc DCF80000 		ldr	r0, [ip, #0]
 168              		.loc 1 1022 0
 169 00c0 C4F20203 		movt	r3, 16386
1017:./src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 170              		.loc 1 1017 0
 171 00c4 20F00301 		bic	r1, r0, #3
 172 00c8 CCF80010 		str	r1, [ip, #0]
1018:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 173              		.loc 1 1018 0
 174 00cc DCF80020 		ldr	r2, [ip, #0]
1023:./src/system_stm32f10x.c ****       
1024:./src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
1025:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
1026:./src/system_stm32f10x.c ****     
1027:./src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
1028:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
1029:./src/system_stm32f10x.c **** 
1030:./src/system_stm32f10x.c **** #ifdef STM32F10X_CL
1031:./src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
1032:./src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
1033:./src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
1034:./src/system_stm32f10x.c ****         
1035:./src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
1036:./src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
1037:./src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
1038:./src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
1039:./src/system_stm32f10x.c ****   
1040:./src/system_stm32f10x.c ****     /* Enable PLL2 */
1041:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
1042:./src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
1043:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
1044:./src/system_stm32f10x.c ****     {
1045:./src/system_stm32f10x.c ****     }
1046:./src/system_stm32f10x.c ****     
1047:./src/system_stm32f10x.c ****    
1048:./src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
1049:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
1050:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
1051:./src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
1052:./src/system_stm32f10x.c **** #else    
1053:./src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
1054:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
1055:./src/system_stm32f10x.c ****                                         RCC_CFGR_PLLMULL));
1056:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
1057:./src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
1058:./src/system_stm32f10x.c **** 
1059:./src/system_stm32f10x.c ****     /* Enable PLL */
1060:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
1061:./src/system_stm32f10x.c **** 
1062:./src/system_stm32f10x.c ****     /* Wait till PLL is ready */
1063:./src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 175              		.loc 1 1063 0
 176 00d0 1946     		mov	r1, r3
1018:./src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 177              		.loc 1 1018 0
 178 00d2 42F00200 		orr	r0, r2, #2
 179 00d6 CCF80000 		str	r0, [ip, #0]
1022:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 180              		.loc 1 1022 0
 181 00da 5868     		ldr	r0, [r3, #4]
 182 00dc 5860     		str	r0, [r3, #4]
1025:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 183              		.loc 1 1025 0
 184 00de 5A68     		ldr	r2, [r3, #4]
 185 00e0 5A60     		str	r2, [r3, #4]
1028:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 186              		.loc 1 1028 0
 187 00e2 5868     		ldr	r0, [r3, #4]
 188 00e4 40F48062 		orr	r2, r0, #1024
 189 00e8 5A60     		str	r2, [r3, #4]
1054:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 190              		.loc 1 1054 0
 191 00ea 5868     		ldr	r0, [r3, #4]
 192 00ec 20F47C12 		bic	r2, r0, #4128768
 193 00f0 5A60     		str	r2, [r3, #4]
1056:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 194              		.loc 1 1056 0
 195 00f2 5868     		ldr	r0, [r3, #4]
 196 00f4 40F4E812 		orr	r2, r0, #1900544
 197 00f8 5A60     		str	r2, [r3, #4]
1060:./src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 198              		.loc 1 1060 0
 199 00fa 1868     		ldr	r0, [r3, #0]
 200 00fc 40F08072 		orr	r2, r0, #16777216
 201 0100 1A60     		str	r2, [r3, #0]
 202              	.L7:
 203              		.loc 1 1063 0
 204 0102 0868     		ldr	r0, [r1, #0]
 205 0104 4FF48053 		mov	r3, #4096
 206 0108 8201     		lsls	r2, r0, #6
 207 010a C4F20203 		movt	r3, 16386
 208 010e F8D5     		bpl	.L7
1064:./src/system_stm32f10x.c ****     {
1065:./src/system_stm32f10x.c ****     }
1066:./src/system_stm32f10x.c ****     
1067:./src/system_stm32f10x.c ****     /* Select PLL as system clock source */
1068:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 209              		.loc 1 1068 0
 210 0110 5868     		ldr	r0, [r3, #4]
1069:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
1070:./src/system_stm32f10x.c **** 
1071:./src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
1072:./src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 211              		.loc 1 1072 0
 212 0112 1A46     		mov	r2, r3
1068:./src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 213              		.loc 1 1068 0
 214 0114 20F00301 		bic	r1, r0, #3
 215 0118 5960     		str	r1, [r3, #4]
1069:./src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 216              		.loc 1 1069 0
 217 011a 5868     		ldr	r0, [r3, #4]
 218 011c 40F00201 		orr	r1, r0, #2
 219 0120 5960     		str	r1, [r3, #4]
 220              	.L8:
 221              		.loc 1 1072 0
 222 0122 5168     		ldr	r1, [r2, #4]
 223 0124 01F00C03 		and	r3, r1, #12
 224 0128 082B     		cmp	r3, #8
 225 012a FAD1     		bne	.L8
 226 012c B0E7     		b	.L6
 227              	.LBE13:
 228              	.LBE16:
 229              	.LBE19:
 230              		.cfi_endproc
 231              	.LFE55:
 233 012e 00BF     		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 234              		.align	2
 235              		.global	SystemCoreClockUpdate
 236              		.thumb
 237              		.thumb_func
 239              	SystemCoreClockUpdate:
 240              	.LFB56:
 307:./src/system_stm32f10x.c **** {
 241              		.loc 1 307 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246              	.LVL8:
 319:./src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 247              		.loc 1 319 0
 248 0000 4FF48053 		mov	r3, #4096
 249 0004 C4F20203 		movt	r3, 16386
 250 0008 5A68     		ldr	r2, [r3, #4]
 251              	.LVL9:
 252 000a 02F00C02 		and	r2, r2, #12
 253              	.LVL10:
 321:./src/system_stm32f10x.c ****   switch (tmp)
 254              		.loc 1 321 0
 255 000e 082A     		cmp	r2, #8
 256 0010 1CBF     		itt	ne
 257 0012 4FF49052 		movne	r2, #4608
 258              	.LVL11:
 259 0016 C0F27A02 		movtne	r2, 122
 260 001a 14D0     		beq	.L23
 261              	.LVL12:
 262              	.L16:
 409:./src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 263              		.loc 1 409 0
 264 001c 4FF4805C 		mov	ip, #4096
 265 0020 C4F2020C 		movt	ip, 16386
 266 0024 DCF80430 		ldr	r3, [ip, #4]
 267 0028 40F20000 		movw	r0, #:lower16:.LANCHOR0
 268 002c C3F30311 		ubfx	r1, r3, #4, #4
 269 0030 C0F20000 		movt	r0, #:upper16:.LANCHOR0
 270 0034 435C     		ldrb	r3, [r0, r1]	@ zero_extendqisi2
 271              	.LVL13:
 411:./src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 272              		.loc 1 411 0
 273 0036 40F2000C 		movw	ip, #:lower16:.LANCHOR1
 274 003a DA40     		lsrs	r2, r2, r3
 275 003c C0F2000C 		movt	ip, #:upper16:.LANCHOR1
 276 0040 CCF80020 		str	r2, [ip, #0]
 412:./src/system_stm32f10x.c **** }
 277              		.loc 1 412 0
 278 0044 7047     		bx	lr
 279              	.LVL14:
 280              	.L23:
 332:./src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 281              		.loc 1 332 0
 282 0046 5A68     		ldr	r2, [r3, #4]
 283              	.LVL15:
 333:./src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 284              		.loc 1 333 0
 285 0048 5968     		ldr	r1, [r3, #4]
 286              	.LVL16:
 336:./src/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 287              		.loc 1 336 0
 288 004a C2F38340 		ubfx	r0, r2, #18, #4
 289 004e 821C     		adds	r2, r0, #2
 290              	.LVL17:
 338:./src/system_stm32f10x.c ****       if (pllsource == 0x00)
 291              		.loc 1 338 0
 292 0050 C803     		lsls	r0, r1, #15
 293 0052 09D5     		bpl	.L22
 351:./src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 294              		.loc 1 351 0
 295 0054 5B68     		ldr	r3, [r3, #4]
 296 0056 9903     		lsls	r1, r3, #14
 297              	.LVL18:
 298 0058 06D4     		bmi	.L22
 357:./src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 299              		.loc 1 357 0
 300 005a 4FF49050 		mov	r0, #4608
 301 005e C0F27A00 		movt	r0, 122
 302 0062 00FB02F2 		mul	r2, r0, r2
 303              	.LVL19:
 304 0066 D9E7     		b	.L16
 305              	.LVL20:
 306              	.L22:
 353:./src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 307              		.loc 1 353 0
 308 0068 4FF41061 		mov	r1, #2304
 309 006c C0F23D01 		movt	r1, 61
 310 0070 01FB02F2 		mul	r2, r1, r2
 311              	.LVL21:
 312 0074 D2E7     		b	.L16
 313              		.cfi_endproc
 314              	.LFE56:
 316              		.global	AHBPrescTable
 317              		.global	SystemCoreClock
 318 0076 00BF     		.section	.data.AHBPrescTable,"aw",%progbits
 319              		.align	2
 320              		.set	.LANCHOR0,. + 0
 323              	AHBPrescTable:
 324 0000 00       		.byte	0
 325 0001 00       		.byte	0
 326 0002 00       		.byte	0
 327 0003 00       		.byte	0
 328 0004 00       		.byte	0
 329 0005 00       		.byte	0
 330 0006 00       		.byte	0
 331 0007 00       		.byte	0
 332 0008 01       		.byte	1
 333 0009 02       		.byte	2
 334 000a 03       		.byte	3
 335 000b 04       		.byte	4
 336 000c 06       		.byte	6
 337 000d 07       		.byte	7
 338 000e 08       		.byte	8
 339 000f 09       		.byte	9
 340              		.section	.data.SystemCoreClock,"aw",%progbits
 341              		.align	2
 342              		.set	.LANCHOR1,. + 0
 345              	SystemCoreClock:
 346 0000 00A24A04 		.word	72000000
 347              		.text
 348              	.Letext0:
 349              		.file 2 "/home/valentin/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-
 350              		.file 3 "../MyARMLib/CMSIS/include/core_cm3.h"
 351              		.file 4 "../MyARMLib/STM32/STM32F10x/include/stm32f10x.h"
 352              		.file 5 "../MyARMLib/STM32/STM32F10x/include/system_stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f10x.c
     /tmp/ccQ26DUh.s:19     .text.SystemInit:00000000 $t
     /tmp/ccQ26DUh.s:24     .text.SystemInit:00000000 SystemInit
     /tmp/ccQ26DUh.s:234    .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccQ26DUh.s:239    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccQ26DUh.s:320    .data.AHBPrescTable:00000000 .LANCHOR0
     /tmp/ccQ26DUh.s:342    .data.SystemCoreClock:00000000 .LANCHOR1
     /tmp/ccQ26DUh.s:323    .data.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccQ26DUh.s:345    .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccQ26DUh.s:319    .data.AHBPrescTable:00000000 $d
     /tmp/ccQ26DUh.s:341    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
