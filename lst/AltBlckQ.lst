   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AltBlckQ.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.vBlockingQueueProducer,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	vBlockingQueueProducer:
  24              	.LFB1:
  25              		.file 1 "../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c"
   1:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /*
   2:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	
   4:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
   5:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     ***************************************************************************
   6:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *                                                                       *
   7:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    available.                                                         *
  10:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *                                                                       *
  11:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *                                                                       *
  18:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *                                                                       *
  20:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****      *                                                                       *
  22:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     ***************************************************************************
  23:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  24:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  25:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  27:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  42:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  44:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     contact details.
  46:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  47:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     critical systems.
  49:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  50:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****     licensing and training services.
  52:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** */
  53:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  54:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /*
  55:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * This is a version of BlockQ.c that uses the alternative (Alt) API.
  56:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  *
  57:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * Creates six tasks that operate on three queues as follows:
  58:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  *
  59:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * The first two tasks send and receive an incrementing number to/from a queue.
  60:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * One task acts as a producer and the other as the consumer.  The consumer is a
  61:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * higher priority than the producer and is set to block on queue reads.  The queue
  62:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * only has space for one item - as soon as the producer posts a message on the
  63:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * queue the consumer will unblock, pre-empt the producer, and remove the item.
  64:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  *
  65:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * The second two tasks work the other way around.  Again the queue used only has
  66:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * enough space for one item.  This time the consumer has a lower priority than the
  67:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * producer.  The producer will try to post on the queue blocking when the queue is
  68:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * full.  When the consumer wakes it will remove the item from the queue, causing
  69:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * the producer to unblock, pre-empt the consumer, and immediately re-fill the
  70:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * queue.
  71:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  *
  72:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * The last two tasks use the same queue producer and consumer functions.  This time the queue has
  73:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * enough space for lots of items and the tasks operate at the same priority.  The
  74:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * producer will execute, placing items into the queue.  The consumer will start
  75:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * executing when either the queue becomes full (causing the producer to block) or
  76:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  * a context switch occurs (tasks of the same priority will time slice).
  77:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  *
  78:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c ****  */
  79:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  80:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  81:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #include <stdlib.h>
  82:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  83:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Scheduler include files. */
  84:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #include "FreeRTOS.h"
  85:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #include "task.h"
  86:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #include "queue.h"
  87:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  88:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Demo program include files. */
  89:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #include "AltBlckQ.h"
  90:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  91:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #define blckqSTACK_SIZE		configMINIMAL_STACK_SIZE
  92:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** #define blckqNUM_TASK_SETS	( 3 )
  93:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
  94:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Structure used to pass parameters to the blocking queue tasks. */
  95:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** typedef struct BLOCKING_QUEUE_PARAMETERS
  96:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
  97:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xQueueHandle xQueue;					/*< The queue to be used by the task. */
  98:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	portTickType xBlockTime;				/*< The block time to use on queue reads/writes. */
  99:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	volatile portSHORT *psCheckVariable;	/*< Incremented on each successful cycle to check the task is
 100:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** } xBlockingQueueParameters;
 101:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 102:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Task function that creates an incrementing number and posts it on a queue. */
 103:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueProducer, pvParameters );
 104:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 105:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Task function that removes the incrementing number from a queue and checks that
 106:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** it is the expected number. */
 107:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueConsumer, pvParameters );
 108:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 109:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Variables which are incremented each time an item is removed from a queue, and
 110:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** found to be the expected value.
 111:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** These are used to check that the tasks are still running. */
 112:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static volatile portSHORT sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0
 113:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 114:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* Variable which are incremented each time an item is posted on a queue.   These
 115:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** are used to check that the tasks are still running. */
 116:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static volatile portSHORT sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0
 117:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 118:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /*-----------------------------------------------------------*/
 119:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 120:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** void vStartAltBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )
 121:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 122:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
 123:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
 124:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
 125:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** const unsigned portBASE_TYPE uxQueueSize1 = 1, uxQueueSize5 = 5;
 126:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** const portTickType xBlockTime = ( portTickType ) 1000 / portTICK_RATE_MS;
 127:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** const portTickType xDontBlock = ( portTickType ) 0;
 128:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 129:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Create the first two tasks as described at the top of the file. */
 130:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	
 131:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* First create the structure used to pass parameters to the consumer tasks. */
 132:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 133:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 134:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Create the queue used by the first two tasks to pass the incrementing number.
 135:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	Pass a pointer to the queue in the parameter structure. */
 136:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 137:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 138:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* The consumer is created first so gets a block time as described above. */
 139:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->xBlockTime = xBlockTime;
 140:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 141:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Pass in the variable that this task is going to increment so we can check it
 142:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	is still running. */
 143:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 144:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		
 145:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Create the structure used to pass parameters to the producer task. */
 146:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 147:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 148:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Pass the queue to this task also, using the parameter structure. */
 149:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 150:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 151:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* The producer is not going to block - as soon as it posts the consumer will
 152:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	wake and remove the item so the producer should always have room to post. */
 153:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->xBlockTime = xDontBlock;
 154:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 155:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Pass in the variable that this task is going to increment so we can check
 156:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	it is still running. */
 157:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 158:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 159:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 160:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Note the producer has a lower priority than the consumer when the tasks are
 161:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	spawned. */
 162:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 163:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB2", blckqSTACK_SIZE, ( void * ) 
 164:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 165:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	
 166:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 167:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Create the second two tasks as described at the top of the file.   This uses
 168:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	the same mechanism but reverses the task priorities. */
 169:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 170:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 171:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 172:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
 173:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 174:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 175:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 176:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 177:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 178:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 179:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 180:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QProdB3", blckqSTACK_SIZE, ( void * ) 
 181:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QConsB4", blckqSTACK_SIZE, ( void * ) 
 182:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 183:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 184:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 185:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Create the last two tasks as described above.  The mechanism is again just
 186:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	the same.  This time both parameter structures are given a block time. */
 187:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 188:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsign
 189:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 190:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 191:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 192:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 193:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 194:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 195:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
 196:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 197:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB5", blckqSTACK_SIZE, ( void * ) 
 198:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB6", blckqSTACK_SIZE, ( void * ) 
 199:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** }
 200:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /*-----------------------------------------------------------*/
 201:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 202:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
 203:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
  26              		.loc 1 203 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 4, -16
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
 204:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** unsigned portSHORT usValue = 0;
  41              		.loc 1 204 0
  42 0004 02AD     		add	r5, sp, #8
  43 0006 0023     		movs	r3, #0
 203:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
  44              		.loc 1 203 0
  45 0008 0446     		mov	r4, r0
  46              		.loc 1 204 0
  47 000a 25F8023D 		strh	r3, [r5, #-2]!	@ movhi
  48              	.LVL1:
 205:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** xBlockingQueueParameters *pxQueueParameters;
 206:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portSHORT sErrorEverOccurred = pdFALSE;
  49              		.loc 1 206 0
  50 000e 0026     		movs	r6, #0
  51 0010 00E0     		b	.L6
  52              	.LVL2:
  53              	.L5:
 207:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 208:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	#ifdef USE_STDIO
 209:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 210:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	
 211:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		const portCHAR * const pcTaskStartMsg = "Alt blocking queue producer task started.\r\n";
 212:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 213:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		/* Queue a message for printing to say the task has started. */
 214:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 215:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	#endif
 216:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 217:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 218:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 219:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	for( ;; )
 220:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	{		
 221:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( xQueueAltSendToBack( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBloc
 222:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		{
 223:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			sErrorEverOccurred = pdTRUE;
  54              		.loc 1 223 0
  55 0012 0126     		movs	r6, #1
  56              	.LVL3:
  57              	.L6:
 221:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( xQueueAltSendToBack( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBloc
  58              		.loc 1 221 0
  59 0014 0023     		movs	r3, #0
  60 0016 2068     		ldr	r0, [r4, #0]
  61 0018 2946     		mov	r1, r5
  62 001a 6268     		ldr	r2, [r4, #4]
  63 001c FFF7FEFF 		bl	xQueueAltGenericSend
  64 0020 0128     		cmp	r0, #1
  65 0022 F6D1     		bne	.L5
 224:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		}
 225:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		else
 226:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		{
 227:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			/* We have successfully posted a message, so increment the variable
 228:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			used to check we are still running. */
 229:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			if( sErrorEverOccurred == pdFALSE )
  66              		.loc 1 229 0
  67 0024 1EB9     		cbnz	r6, .L3
 230:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			{
 231:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				( *pxQueueParameters->psCheckVariable )++;
  68              		.loc 1 231 0
  69 0026 A068     		ldr	r0, [r4, #8]
  70 0028 0188     		ldrh	r1, [r0, #0]
  71 002a 4A1C     		adds	r2, r1, #1
  72 002c 0280     		strh	r2, [r0, #0]	@ movhi
  73              	.L3:
 232:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			}
 233:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 234:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			/* Increment the variable we are going to post next time round.  The
 235:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			consumer will expect the numbers to	follow in numerical order. */
 236:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			++usValue;
  74              		.loc 1 236 0
  75 002e BDF80620 		ldrh	r2, [sp, #6]
  76 0032 531C     		adds	r3, r2, #1
  77 0034 ADF80630 		strh	r3, [sp, #6]	@ movhi
  78              	.LVL4:
  79 0038 ECE7     		b	.L6
  80              		.cfi_endproc
  81              	.LFE1:
  83 003a 00BF     		.section	.text.vBlockingQueueConsumer,"ax",%progbits
  84              		.align	2
  85              		.thumb
  86              		.thumb_func
  88              	vBlockingQueueConsumer:
  89              	.LFB2:
 237:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		}
 238:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	}
 239:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** }
 240:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /*-----------------------------------------------------------*/
 241:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 242:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
 243:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
  90              		.loc 1 243 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 8
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              	.LVL5:
  95 0000 70B5     		push	{r4, r5, r6, lr}
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 16
  98              		.cfi_offset 14, -4
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 5, -12
 101              		.cfi_offset 4, -16
 244:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** unsigned portSHORT usData, usExpectedValue = 0;
 245:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** xBlockingQueueParameters *pxQueueParameters;
 246:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portSHORT sErrorEverOccurred = pdFALSE;
 102              		.loc 1 246 0
 103 0002 0026     		movs	r6, #0
 243:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 104              		.loc 1 243 0
 105 0004 82B0     		sub	sp, sp, #8
 106              	.LCFI3:
 107              		.cfi_def_cfa_offset 24
 243:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 108              		.loc 1 243 0
 109 0006 0446     		mov	r4, r0
 110              	.LVL6:
 244:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** unsigned portSHORT usData, usExpectedValue = 0;
 111              		.loc 1 244 0
 112 0008 3546     		mov	r5, r6
 113              	.LVL7:
 114              	.L15:
 247:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 248:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	#ifdef USE_STDIO
 249:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 250:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	
 251:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		const portCHAR * const pcTaskStartMsg = "Alt blocking queue consumer task started.\r\n";
 252:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 253:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		/* Queue a message for printing to say the task has started. */
 254:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 255:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	#endif
 256:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 257:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 258:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 259:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	for( ;; )
 260:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	{	
 261:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( xQueueAltReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPA
 115              		.loc 1 261 0
 116 000a 0023     		movs	r3, #0
 117 000c 2068     		ldr	r0, [r4, #0]
 118 000e 0DF10601 		add	r1, sp, #6
 119 0012 6268     		ldr	r2, [r4, #4]
 120 0014 FFF7FEFF 		bl	xQueueAltGenericReceive
 121 0018 0128     		cmp	r0, #1
 122 001a F6D1     		bne	.L15
 262:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		{
 263:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			if( usData != usExpectedValue )
 123              		.loc 1 263 0
 124 001c BDF80630 		ldrh	r3, [sp, #6]
 125 0020 AB42     		cmp	r3, r5
 126 0022 1CBF     		itt	ne
 127 0024 1D46     		movne	r5, r3
 128              	.LVL8:
 264:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			{
 265:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				/* Catch-up. */
 266:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				usExpectedValue = usData;
 267:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 268:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				sErrorEverOccurred = pdTRUE;
 129              		.loc 1 268 0
 130 0026 0646     		movne	r6, r0
 131              	.LVL9:
 263:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			if( usData != usExpectedValue )
 132              		.loc 1 263 0
 133 0028 EFD1     		bne	.L15
 269:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			}
 270:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			else
 271:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			{
 272:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				/* We have successfully received a message, so increment the
 273:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				variable used to check we are still running. */	
 274:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				if( sErrorEverOccurred == pdFALSE )
 275:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				{
 276:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 					( *pxQueueParameters->psCheckVariable )++;
 277:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				}
 278:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 							
 279:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				/* Increment the value we expect to remove from the queue next time
 280:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				round. */
 281:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				++usExpectedValue;
 134              		.loc 1 281 0
 135 002a 5D1C     		adds	r5, r3, #1
 274:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 				if( sErrorEverOccurred == pdFALSE )
 136              		.loc 1 274 0
 137 002c 1EB9     		cbnz	r6, .L11
 276:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 					( *pxQueueParameters->psCheckVariable )++;
 138              		.loc 1 276 0
 139 002e A368     		ldr	r3, [r4, #8]
 140 0030 1888     		ldrh	r0, [r3, #0]
 141 0032 421C     		adds	r2, r0, #1
 142 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 143              	.L11:
 144              		.loc 1 281 0
 145 0036 ADB2     		uxth	r5, r5
 146              	.LVL10:
 147 0038 E7E7     		b	.L15
 148              		.cfi_endproc
 149              	.LFE2:
 151 003a 00BF     		.section	.text.vStartAltBlockingQueueTasks,"ax",%progbits
 152              		.align	2
 153              		.global	vStartAltBlockingQueueTasks
 154              		.thumb
 155              		.thumb_func
 157              	vStartAltBlockingQueueTasks:
 158              	.LFB0:
 121:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 159              		.loc 1 121 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              	.LVL11:
 164 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 36
 167              		.cfi_offset 14, -4
 168              		.cfi_offset 11, -8
 169              		.cfi_offset 10, -12
 170              		.cfi_offset 9, -16
 171              		.cfi_offset 8, -20
 172              		.cfi_offset 7, -24
 173              		.cfi_offset 6, -28
 174              		.cfi_offset 5, -32
 175              		.cfi_offset 4, -36
 176 0004 87B0     		sub	sp, sp, #28
 177              	.LCFI5:
 178              		.cfi_def_cfa_offset 64
 121:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 179              		.loc 1 121 0
 180 0006 0590     		str	r0, [sp, #20]
 132:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 181              		.loc 1 132 0
 182 0008 0C20     		movs	r0, #12
 183              	.LVL12:
 184 000a FFF7FEFF 		bl	pvPortMalloc
 136:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 185              		.loc 1 136 0
 186 000e 0221     		movs	r1, #2
 132:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 187              		.loc 1 132 0
 188 0010 8046     		mov	r8, r0
 189              	.LVL13:
 136:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 190              		.loc 1 136 0
 191 0012 0022     		movs	r2, #0
 192 0014 0120     		movs	r0, #1
 193              	.LVL14:
 194 0016 FFF7FEFF 		bl	xQueueGenericCreate
 143:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 195              		.loc 1 143 0
 196 001a 40F20005 		movw	r5, #:lower16:.LANCHOR0
 139:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->xBlockTime = xBlockTime;
 197              		.loc 1 139 0
 198 001e 4FF47A7B 		mov	fp, #1000
 143:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 199              		.loc 1 143 0
 200 0022 C0F20005 		movt	r5, #:upper16:.LANCHOR0
 139:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->xBlockTime = xBlockTime;
 201              		.loc 1 139 0
 202 0026 88E80108 		stmia	r8, {r0, fp}
 143:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 203              		.loc 1 143 0
 204 002a C8F80850 		str	r5, [r8, #8]
 146:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 205              		.loc 1 146 0
 206 002e 0C20     		movs	r0, #12
 207 0030 FFF7FEFF 		bl	pvPortMalloc
 157:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 208              		.loc 1 157 0
 209 0034 40F20006 		movw	r6, #:lower16:.LANCHOR1
 149:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 210              		.loc 1 149 0
 211 0038 D8F80030 		ldr	r3, [r8, #0]
 162:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 212              		.loc 1 162 0
 213 003c 40F2000A 		movw	sl, #:lower16:vBlockingQueueConsumer
 153:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->xBlockTime = xDontBlock;
 214              		.loc 1 153 0
 215 0040 0024     		movs	r4, #0
 162:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 216              		.loc 1 162 0
 217 0042 C0F2000A 		movt	sl, #:upper16:vBlockingQueueConsumer
 218 0046 059F     		ldr	r7, [sp, #20]
 157:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 219              		.loc 1 157 0
 220 0048 C0F20006 		movt	r6, #:upper16:.LANCHOR1
 162:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 221              		.loc 1 162 0
 222 004c 40F20001 		movw	r1, #:lower16:.LC0
 157:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 223              		.loc 1 157 0
 224 0050 80E85800 		stmia	r0, {r3, r4, r6}
 146:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 225              		.loc 1 146 0
 226 0054 8146     		mov	r9, r0
 227              	.LVL15:
 162:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 228              		.loc 1 162 0
 229 0056 7822     		movs	r2, #120
 230 0058 4346     		mov	r3, r8
 231 005a C0F20001 		movt	r1, #:upper16:.LC0
 232 005e 5046     		mov	r0, sl
 233              	.LVL16:
 163:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB2", blckqSTACK_SIZE, ( void * ) 
 234              		.loc 1 163 0
 235 0060 40F20008 		movw	r8, #:lower16:vBlockingQueueProducer
 236              	.LVL17:
 237 0064 C0F20008 		movt	r8, #:upper16:vBlockingQueueProducer
 162:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB1", blckqSTACK_SIZE, ( void * ) 
 238              		.loc 1 162 0
 239 0068 0097     		str	r7, [sp, #0]
 240 006a 0194     		str	r4, [sp, #4]
 241 006c 0294     		str	r4, [sp, #8]
 242 006e 0394     		str	r4, [sp, #12]
 243 0070 FFF7FEFF 		bl	xTaskGenericCreate
 244              	.LVL18:
 163:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB2", blckqSTACK_SIZE, ( void * ) 
 245              		.loc 1 163 0
 246 0074 40F20001 		movw	r1, #:lower16:.LC1
 247 0078 4B46     		mov	r3, r9
 248 007a 7822     		movs	r2, #120
 249 007c C0F20001 		movt	r1, #:upper16:.LC1
 250 0080 4046     		mov	r0, r8
 251 0082 0094     		str	r4, [sp, #0]
 252 0084 0194     		str	r4, [sp, #4]
 253 0086 0294     		str	r4, [sp, #8]
 254 0088 0394     		str	r4, [sp, #12]
 255 008a FFF7FEFF 		bl	xTaskGenericCreate
 170:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 256              		.loc 1 170 0
 257 008e 0C20     		movs	r0, #12
 258 0090 FFF7FEFF 		bl	pvPortMalloc
 171:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 259              		.loc 1 171 0
 260 0094 2246     		mov	r2, r4
 170:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 261              		.loc 1 170 0
 262 0096 8146     		mov	r9, r0
 263              	.LVL19:
 171:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsign
 264              		.loc 1 171 0
 265 0098 0221     		movs	r1, #2
 266 009a 0120     		movs	r0, #1
 267              	.LVL20:
 268 009c FFF7FEFF 		bl	xQueueGenericCreate
 173:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 269              		.loc 1 173 0
 270 00a0 B11C     		adds	r1, r6, #2
 172:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
 271              		.loc 1 172 0
 272 00a2 89E81100 		stmia	r9, {r0, r4}
 173:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 273              		.loc 1 173 0
 274 00a6 C9F80810 		str	r1, [r9, #8]
 175:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 275              		.loc 1 175 0
 276 00aa 0C20     		movs	r0, #12
 277 00ac FFF7FEFF 		bl	pvPortMalloc
 176:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 278              		.loc 1 176 0
 279 00b0 D9F80020 		ldr	r2, [r9, #0]
 178:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 280              		.loc 1 178 0
 281 00b4 AB1C     		adds	r3, r5, #2
 180:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QProdB3", blckqSTACK_SIZE, ( void * ) 
 282              		.loc 1 180 0
 283 00b6 40F20001 		movw	r1, #:lower16:.LC2
 177:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 284              		.loc 1 177 0
 285 00ba 80E80408 		stmia	r0, {r2, fp}
 178:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 286              		.loc 1 178 0
 287 00be 8360     		str	r3, [r0, #8]
 175:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 288              		.loc 1 175 0
 289 00c0 0746     		mov	r7, r0
 290              	.LVL21:
 180:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QProdB3", blckqSTACK_SIZE, ( void * ) 
 291              		.loc 1 180 0
 292 00c2 7822     		movs	r2, #120
 293 00c4 4B46     		mov	r3, r9
 294 00c6 C0F20001 		movt	r1, #:upper16:.LC2
 295 00ca 5046     		mov	r0, sl
 296              	.LVL22:
 297 00cc 0094     		str	r4, [sp, #0]
 298 00ce 0194     		str	r4, [sp, #4]
 299 00d0 0294     		str	r4, [sp, #8]
 300 00d2 0394     		str	r4, [sp, #12]
 301 00d4 FFF7FEFF 		bl	xTaskGenericCreate
 181:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QConsB4", blckqSTACK_SIZE, ( void * ) 
 302              		.loc 1 181 0
 303 00d8 3B46     		mov	r3, r7
 304 00da 40F20001 		movw	r1, #:lower16:.LC3
 305 00de 059F     		ldr	r7, [sp, #20]
 306              	.LVL23:
 307 00e0 7822     		movs	r2, #120
 308 00e2 C0F20001 		movt	r1, #:upper16:.LC3
 309 00e6 4046     		mov	r0, r8
 310 00e8 0097     		str	r7, [sp, #0]
 311 00ea 0194     		str	r4, [sp, #4]
 312 00ec 0294     		str	r4, [sp, #8]
 313 00ee 0394     		str	r4, [sp, #12]
 314 00f0 FFF7FEFF 		bl	xTaskGenericCreate
 315              	.LVL24:
 187:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 316              		.loc 1 187 0
 317 00f4 0C20     		movs	r0, #12
 318 00f6 FFF7FEFF 		bl	pvPortMalloc
 188:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsign
 319              		.loc 1 188 0
 320 00fa 2246     		mov	r2, r4
 187:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 321              		.loc 1 187 0
 322 00fc 0746     		mov	r7, r0
 323              	.LVL25:
 188:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsign
 324              		.loc 1 188 0
 325 00fe 0221     		movs	r1, #2
 326 0100 0520     		movs	r0, #5
 327              	.LVL26:
 328 0102 FFF7FEFF 		bl	xQueueGenericCreate
 190:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 329              		.loc 1 190 0
 330 0106 0436     		adds	r6, r6, #4
 189:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 331              		.loc 1 189 0
 332 0108 87E80108 		stmia	r7, {r0, fp}
 190:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 333              		.loc 1 190 0
 334 010c BE60     		str	r6, [r7, #8]
 192:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 335              		.loc 1 192 0
 336 010e 0C20     		movs	r0, #12
 337 0110 FFF7FEFF 		bl	pvPortMalloc
 193:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 338              		.loc 1 193 0
 339 0114 3B68     		ldr	r3, [r7, #0]
 195:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
 340              		.loc 1 195 0
 341 0116 0435     		adds	r5, r5, #4
 197:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB5", blckqSTACK_SIZE, ( void * ) 
 342              		.loc 1 197 0
 343 0118 40F20001 		movw	r1, #:lower16:.LC4
 194:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 344              		.loc 1 194 0
 345 011c 80E80808 		stmia	r0, {r3, fp}
 195:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
 346              		.loc 1 195 0
 347 0120 8560     		str	r5, [r0, #8]
 192:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 348              		.loc 1 192 0
 349 0122 0646     		mov	r6, r0
 350              	.LVL27:
 197:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueProducer, ( signed portCHAR * ) "QProdB5", blckqSTACK_SIZE, ( void * ) 
 351              		.loc 1 197 0
 352 0124 7822     		movs	r2, #120
 353 0126 3B46     		mov	r3, r7
 354 0128 C0F20001 		movt	r1, #:upper16:.LC4
 355 012c 4046     		mov	r0, r8
 356              	.LVL28:
 357 012e 0094     		str	r4, [sp, #0]
 358 0130 0194     		str	r4, [sp, #4]
 359 0132 0294     		str	r4, [sp, #8]
 360 0134 0394     		str	r4, [sp, #12]
 361 0136 FFF7FEFF 		bl	xTaskGenericCreate
 198:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	xTaskCreate( vBlockingQueueConsumer, ( signed portCHAR * ) "QConsB6", blckqSTACK_SIZE, ( void * ) 
 362              		.loc 1 198 0
 363 013a 40F20001 		movw	r1, #:lower16:.LC5
 364 013e 5046     		mov	r0, sl
 365 0140 C0F20001 		movt	r1, #:upper16:.LC5
 366 0144 7822     		movs	r2, #120
 367 0146 3346     		mov	r3, r6
 368 0148 0094     		str	r4, [sp, #0]
 369 014a 0194     		str	r4, [sp, #4]
 370 014c 0294     		str	r4, [sp, #8]
 371 014e 0394     		str	r4, [sp, #12]
 372 0150 FFF7FEFF 		bl	xTaskGenericCreate
 199:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** }
 373              		.loc 1 199 0
 374 0154 07B0     		add	sp, sp, #28
 375 0156 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 376              		.cfi_endproc
 377              	.LFE0:
 379 015a 00BF     		.section	.text.xAreAltBlockingQueuesStillRunning,"ax",%progbits
 380              		.align	2
 381              		.global	xAreAltBlockingQueuesStillRunning
 382              		.thumb
 383              		.thumb_func
 385              	xAreAltBlockingQueuesStillRunning:
 386              	.LFB3:
 282:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			}			
 283:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		}		
 284:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	}
 285:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** }
 286:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /*-----------------------------------------------------------*/
 287:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 288:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** /* This is called to check that all the created tasks are still running. */
 289:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portBASE_TYPE xAreAltBlockingQueuesStillRunning( void )
 290:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 387              		.loc 1 290 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 8
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392              	.LVL29:
 393 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, sl, fp}
 394              	.LCFI6:
 395              		.cfi_def_cfa_offset 32
 396              		.cfi_offset 11, -4
 397              		.cfi_offset 10, -8
 398              		.cfi_offset 9, -12
 399              		.cfi_offset 8, -16
 400              		.cfi_offset 7, -20
 401              		.cfi_offset 6, -24
 402              		.cfi_offset 5, -28
 403              		.cfi_offset 4, -32
 291:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static portSHORT sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0, ( u
 292:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** static portSHORT sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned portSHORT ) 0, ( u
 293:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portBASE_TYPE xReturn = pdPASS, xTasks;
 294:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 295:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	/* Not too worried about mutual exclusion on these variables as they are 16
 296:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	bits and we are only reading them. We also only care to see if they have
 297:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	changed or not.
 298:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	
 299:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	Loop through each check variable to and return pdFALSE if any are found not
 300:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	to have changed since the last call. */
 301:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 302:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 303:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	{
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 404              		.loc 1 304 0
 405 0004 40F2000B 		movw	fp, #:lower16:.LANCHOR0
 406 0008 C0F2000B 		movt	fp, #:upper16:.LANCHOR0
 407 000c 40F20002 		movw	r2, #:lower16:.LANCHOR2
 408 0010 BBF800C0 		ldrh	ip, [fp, #0]
 409 0014 C0F20002 		movt	r2, #:upper16:.LANCHOR2
 305:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		{
 306:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			xReturn = pdFALSE;
 307:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		}
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 410              		.loc 1 308 0
 411 0018 BBF80000 		ldrh	r0, [fp, #0]
 309:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 310:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 412              		.loc 1 311 0
 413 001c 40F20001 		movw	r1, #:lower16:.LANCHOR1
 290:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** {
 414              		.loc 1 290 0
 415 0020 82B0     		sub	sp, sp, #8
 416              	.LCFI7:
 417              		.cfi_def_cfa_offset 40
 418              		.loc 1 311 0
 419 0022 C0F20001 		movt	r1, #:upper16:.LANCHOR1
 289:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portBASE_TYPE xAreAltBlockingQueuesStillRunning( void )
 420              		.loc 1 289 0
 421 0026 B2F90060 		ldrsh	r6, [r2, #0]
 422              		.loc 1 311 0
 423 002a 40F20003 		movw	r3, #:lower16:.LANCHOR3
 424 002e 0D88     		ldrh	r5, [r1, #0]
 425 0030 C0F20003 		movt	r3, #:upper16:.LANCHOR3
 312:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		{
 313:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			xReturn = pdFALSE;
 314:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		}
 315:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 426              		.loc 1 315 0
 427 0034 0F88     		ldrh	r7, [r1, #0]
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 428              		.loc 1 308 0
 429 0036 ADF80000 		strh	r0, [sp, #0]	@ movhi
 289:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portBASE_TYPE xAreAltBlockingQueuesStillRunning( void )
 430              		.loc 1 289 0
 431 003a 0FFA8CF8 		sxth	r8, ip
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 432              		.loc 1 304 0
 433 003e BBF80200 		ldrh	r0, [fp, #2]
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 434              		.loc 1 308 0
 435 0042 BBF802A0 		ldrh	sl, [fp, #2]
 289:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portBASE_TYPE xAreAltBlockingQueuesStillRunning( void )
 436              		.loc 1 289 0
 437 0046 B6EB0804 		subs	r4, r6, r8
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 438              		.loc 1 311 0
 439 004a B3F90090 		ldrsh	r9, [r3, #0]
 440 004e B1F802C0 		ldrh	ip, [r1, #2]
 289:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** portBASE_TYPE xAreAltBlockingQueuesStillRunning( void )
 441              		.loc 1 289 0
 442 0052 18BF     		it	ne
 443 0054 0124     		movne	r4, #1
 444              	.LVL30:
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 445              		.loc 1 308 0
 446 0056 ADF804A0 		strh	sl, [sp, #4]	@ movhi
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 447              		.loc 1 311 0
 448 005a 0FFA85F8 		sxth	r8, r5
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 449              		.loc 1 304 0
 450 005e B2F902A0 		ldrsh	sl, [r2, #2]
 451              		.loc 1 315 0
 452 0062 4D88     		ldrh	r5, [r1, #2]
 313:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			xReturn = pdFALSE;
 453              		.loc 1 313 0
 454 0064 C145     		cmp	r9, r8
 455 0066 14BF     		ite	ne
 456 0068 A046     		movne	r8, r4
 457 006a 4FF00008 		moveq	r8, #0
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 458              		.loc 1 304 0
 459 006e BBF80460 		ldrh	r6, [fp, #4]
 460              		.loc 1 315 0
 461 0072 ADF80270 		strh	r7, [sp, #2]	@ movhi
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 462              		.loc 1 304 0
 463 0076 0FFA80F9 		sxth	r9, r0
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 464              		.loc 1 311 0
 465 007a B3F90270 		ldrsh	r7, [r3, #2]
 306:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			xReturn = pdFALSE;
 466              		.loc 1 306 0
 467 007e CA45     		cmp	sl, r9
 468 0080 08BF     		it	eq
 469 0082 4FF00008 		moveq	r8, #0
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 470              		.loc 1 311 0
 471 0086 0FFA8CFC 		sxth	ip, ip
 313:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			xReturn = pdFALSE;
 472              		.loc 1 313 0
 473 008a 6745     		cmp	r7, ip
 474 008c 08BF     		it	eq
 475 008e 4FF00008 		moveq	r8, #0
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 476              		.loc 1 304 0
 477 0092 0FFA86FC 		sxth	ip, r6
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 478              		.loc 1 308 0
 479 0096 BDF80070 		ldrh	r7, [sp, #0]
 480              		.loc 1 315 0
 481 009a BDF80260 		ldrh	r6, [sp, #2]
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 482              		.loc 1 308 0
 483 009e BBF80440 		ldrh	r4, [fp, #4]
 484              	.LVL31:
 485              		.loc 1 315 0
 486 00a2 ADF80650 		strh	r5, [sp, #6]	@ movhi
 304:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 487              		.loc 1 304 0
 488 00a6 B2F904B0 		ldrsh	fp, [r2, #4]
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 489              		.loc 1 311 0
 490 00aa 8D88     		ldrh	r5, [r1, #4]
 491 00ac B3F90400 		ldrsh	r0, [r3, #4]
 492              		.loc 1 315 0
 493 00b0 8988     		ldrh	r1, [r1, #4]
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 494              		.loc 1 308 0
 495 00b2 1780     		strh	r7, [r2, #0]	@ movhi
 496              		.loc 1 315 0
 497 00b4 1E80     		strh	r6, [r3, #0]	@ movhi
 498              	.LVL32:
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 499              		.loc 1 308 0
 500 00b6 BDF80470 		ldrh	r7, [sp, #4]
 501              		.loc 1 315 0
 502 00ba BDF80660 		ldrh	r6, [sp, #6]
 306:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 			xReturn = pdFALSE;
 503              		.loc 1 306 0
 504 00be E345     		cmp	fp, ip
 505 00c0 08BF     		it	eq
 506 00c2 4FF00008 		moveq	r8, #0
 311:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 507              		.loc 1 311 0
 508 00c6 2DB2     		sxth	r5, r5
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 509              		.loc 1 308 0
 510 00c8 5780     		strh	r7, [r2, #2]	@ movhi
 511              		.loc 1 315 0
 512 00ca 5E80     		strh	r6, [r3, #2]	@ movhi
 513              	.LVL33:
 308:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 514              		.loc 1 308 0
 515 00cc 9480     		strh	r4, [r2, #4]	@ movhi
 516              		.loc 1 315 0
 517 00ce 9980     		strh	r1, [r3, #4]	@ movhi
 518              	.LVL34:
 316:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	}
 317:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 
 318:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** 	return xReturn;
 319:../FreeRTOS/Demo/Common/Minimal/AltBlckQ.c **** }
 519              		.loc 1 319 0
 520 00d0 A842     		cmp	r0, r5
 521 00d2 14BF     		ite	ne
 522 00d4 4046     		movne	r0, r8
 523 00d6 0020     		moveq	r0, #0
 524 00d8 02B0     		add	sp, sp, #8
 525 00da BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp}
 526 00de 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE3:
 530              		.section	.bss.sBlockingProducerCount,"aw",%nobits
 531              		.align	2
 532              		.set	.LANCHOR1,. + 0
 535              	sBlockingProducerCount:
 536 0000 00000000 		.space	6
 536      0000
 537 0006 0000     		.section	.bss.sBlockingConsumerCount,"aw",%nobits
 538              		.align	2
 539              		.set	.LANCHOR0,. + 0
 542              	sBlockingConsumerCount:
 543 0000 00000000 		.space	6
 543      0000
 544 0006 0000     		.section	.rodata.str1.4,"aMS",%progbits,1
 545              		.align	2
 546              	.LC0:
 547 0000 51436F6E 		.ascii	"QConsB1\000"
 547      73423100 
 548              	.LC1:
 549 0008 5150726F 		.ascii	"QProdB2\000"
 549      64423200 
 550              	.LC2:
 551 0010 5150726F 		.ascii	"QProdB3\000"
 551      64423300 
 552              	.LC3:
 553 0018 51436F6E 		.ascii	"QConsB4\000"
 553      73423400 
 554              	.LC4:
 555 0020 5150726F 		.ascii	"QProdB5\000"
 555      64423500 
 556              	.LC5:
 557 0028 51436F6E 		.ascii	"QConsB6\000"
 557      73423600 
 558              		.section	.bss.sLastBlockingProducerCount.4804,"aw",%nobits
 559              		.align	2
 560              		.set	.LANCHOR3,. + 0
 563              	sLastBlockingProducerCount.4804:
 564 0000 00000000 		.space	6
 564      0000
 565 0006 0000     		.section	.bss.sLastBlockingConsumerCount.4803,"aw",%nobits
 566              		.align	2
 567              		.set	.LANCHOR2,. + 0
 570              	sLastBlockingConsumerCount.4803:
 571 0000 00000000 		.space	6
 571      0000
 572 0006 0000     		.text
 573              	.Letext0:
 574              		.file 2 "../FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
 575              		.file 3 "../FreeRTOS/Source/include/queue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AltBlckQ.c
     /tmp/ccktBfyc.s:19     .text.vBlockingQueueProducer:00000000 $t
     /tmp/ccktBfyc.s:23     .text.vBlockingQueueProducer:00000000 vBlockingQueueProducer
     /tmp/ccktBfyc.s:84     .text.vBlockingQueueConsumer:00000000 $t
     /tmp/ccktBfyc.s:88     .text.vBlockingQueueConsumer:00000000 vBlockingQueueConsumer
     /tmp/ccktBfyc.s:152    .text.vStartAltBlockingQueueTasks:00000000 $t
     /tmp/ccktBfyc.s:157    .text.vStartAltBlockingQueueTasks:00000000 vStartAltBlockingQueueTasks
     /tmp/ccktBfyc.s:539    .bss.sBlockingConsumerCount:00000000 .LANCHOR0
     /tmp/ccktBfyc.s:532    .bss.sBlockingProducerCount:00000000 .LANCHOR1
     /tmp/ccktBfyc.s:546    .rodata.str1.4:00000000 .LC0
     /tmp/ccktBfyc.s:548    .rodata.str1.4:00000008 .LC1
     /tmp/ccktBfyc.s:550    .rodata.str1.4:00000010 .LC2
     /tmp/ccktBfyc.s:552    .rodata.str1.4:00000018 .LC3
     /tmp/ccktBfyc.s:554    .rodata.str1.4:00000020 .LC4
     /tmp/ccktBfyc.s:556    .rodata.str1.4:00000028 .LC5
     /tmp/ccktBfyc.s:380    .text.xAreAltBlockingQueuesStillRunning:00000000 $t
     /tmp/ccktBfyc.s:385    .text.xAreAltBlockingQueuesStillRunning:00000000 xAreAltBlockingQueuesStillRunning
     /tmp/ccktBfyc.s:567    .bss.sLastBlockingConsumerCount.4803:00000000 .LANCHOR2
     /tmp/ccktBfyc.s:560    .bss.sLastBlockingProducerCount.4804:00000000 .LANCHOR3
     /tmp/ccktBfyc.s:531    .bss.sBlockingProducerCount:00000000 $d
     /tmp/ccktBfyc.s:535    .bss.sBlockingProducerCount:00000000 sBlockingProducerCount
     /tmp/ccktBfyc.s:538    .bss.sBlockingConsumerCount:00000000 $d
     /tmp/ccktBfyc.s:542    .bss.sBlockingConsumerCount:00000000 sBlockingConsumerCount
     /tmp/ccktBfyc.s:545    .rodata.str1.4:00000000 $d
     /tmp/ccktBfyc.s:559    .bss.sLastBlockingProducerCount.4804:00000000 $d
     /tmp/ccktBfyc.s:563    .bss.sLastBlockingProducerCount.4804:00000000 sLastBlockingProducerCount.4804
     /tmp/ccktBfyc.s:566    .bss.sLastBlockingConsumerCount.4803:00000000 $d
     /tmp/ccktBfyc.s:570    .bss.sLastBlockingConsumerCount.4803:00000000 sLastBlockingConsumerCount.4803
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueAltGenericSend
xQueueAltGenericReceive
pvPortMalloc
xQueueGenericCreate
xTaskGenericCreate
